# Types
{.experimental: "codeReordering".}


type
# types required for: xcb
  xcb_connection_t* = pointer
  xcb_window_t* = uint32
  xcb_visualid_t* = uint32
# types required for: xlib(_xrandr)
  Display* = pointer
  RROutput* = uint
  Window* = uint
  VisualID* = uint
# types required for: win32
  BOOL* = cint
  DWORD* = uint
  LPVOID* = pointer
  HANDLE* = pointer
  HMONITOR* = pointer
  WCHAR* = uint16
  LPCWSTR* = ptr uint16
  HINSTANCE* = pointer
  HWND* = pointer
  SECURITY_ATTRIBUTES* = object
    nLength: DWORD
    lpSecurityDescriptor: LPVOID
    bInheritHandle: BOOL
# types required for: wayland
  wl_display* = pointer
  wl_surface* = pointer
# types required for: mir
  MirConnection* = pointer
  MirSurface* = pointer
# types required for: ggp
  GgpFrameToken* = pointer
  GgpStreamDescriptor* = pointer
# types required for: directfb
  IDirectFB* = pointer
  IDirectFBSurface* = pointer
# types required for: fuchsia
  zx_handle_t* = pointer


template VK_MAKE_VERSION*(major, minor, patch: int): int = (major shl 22) or (minor shl 12) or patch
template VK_VERSION_MAJOR*(version: int): int = ((version shr 22))
template VK_VERSION_MINOR*(version: int): int = ((version shr 12) and 0x3ff)
template VK_VERSION_PATCH*(version: int): int = (version and 0xfff)

type
  ANativeWindow* = distinct pointer

  AHardwareBuffer* = distinct pointer

  CAMetalLayer* = distinct pointer

  VkInstance* = distinct pointer

  VkPhysicalDevice* = distinct pointer

  VkDevice* = distinct pointer

  VkQueue* = distinct pointer

  VkCommandBuffer* = distinct pointer

  VkDeviceMemory* = distinct pointer

  VkCommandPool* = distinct pointer

  VkBuffer* = distinct pointer

  VkBufferView* = distinct pointer

  VkImage* = distinct pointer

  VkImageView* = distinct pointer

  VkShaderModule* = distinct pointer

  VkPipeline* = distinct pointer

  VkPipelineLayout* = distinct pointer

  VkSampler* = distinct pointer

  VkDescriptorSet* = distinct pointer

  VkDescriptorSetLayout* = distinct pointer

  VkDescriptorPool* = distinct pointer

  VkFence* = distinct pointer

  VkSemaphore* = distinct pointer

  VkEvent* = distinct pointer

  VkQueryPool* = distinct pointer

  VkFramebuffer* = distinct pointer

  VkRenderPass* = distinct pointer

  VkPipelineCache* = distinct pointer

  VkIndirectCommandsLayoutNV* = distinct pointer

  VkDescriptorUpdateTemplate* = distinct pointer

  VkDescriptorUpdateTemplateKHR* = VkDescriptorUpdateTemplate

  VkSamplerYcbcrConversion* = distinct pointer

  VkSamplerYcbcrConversionKHR* = VkSamplerYcbcrConversion

  VkValidationCacheEXT* = distinct pointer

  VkAccelerationStructureKHR* = distinct pointer

  VkAccelerationStructureNV* = VkAccelerationStructureKHR

  VkPerformanceConfigurationINTEL* = distinct pointer

  VkDeferredOperationKHR* = distinct pointer

  VkPrivateDataSlotEXT* = distinct pointer

  VkDisplayKHR* = distinct pointer

  VkDisplayModeKHR* = distinct pointer

  VkSurfaceKHR* = distinct pointer

  VkSwapchainKHR* = distinct pointer

  VkDebugReportCallbackEXT* = distinct pointer

  VkDebugUtilsMessengerEXT* = distinct pointer

  VkAttachmentLoadOp* {.size: int32.sizeof} = enum
    VK_ATTACHMENT_LOAD_OP_LOAD = 0
    VK_ATTACHMENT_LOAD_OP_CLEAR = 1
    VK_ATTACHMENT_LOAD_OP_DONT_CARE = 2

  VkAttachmentStoreOp* {.size: int32.sizeof} = enum
    VK_ATTACHMENT_STORE_OP_STORE = 0
    VK_ATTACHMENT_STORE_OP_DONT_CARE = 1
    VK_ATTACHMENT_STORE_OP_NONE_QCOM = 1000301000

  VkBlendFactor* {.size: int32.sizeof} = enum
    VK_BLEND_FACTOR_ZERO = 0
    VK_BLEND_FACTOR_ONE = 1
    VK_BLEND_FACTOR_SRC_COLOR = 2
    VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR = 3
    VK_BLEND_FACTOR_DST_COLOR = 4
    VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR = 5
    VK_BLEND_FACTOR_SRC_ALPHA = 6
    VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = 7
    VK_BLEND_FACTOR_DST_ALPHA = 8
    VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA = 9
    VK_BLEND_FACTOR_CONSTANT_COLOR = 10
    VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = 11
    VK_BLEND_FACTOR_CONSTANT_ALPHA = 12
    VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = 13
    VK_BLEND_FACTOR_SRC_ALPHA_SATURATE = 14
    VK_BLEND_FACTOR_SRC1_COLOR = 15
    VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR = 16
    VK_BLEND_FACTOR_SRC1_ALPHA = 17
    VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA = 18

  VkBlendOp* {.size: int32.sizeof} = enum
    VK_BLEND_OP_ADD = 0
    VK_BLEND_OP_SUBTRACT = 1
    VK_BLEND_OP_REVERSE_SUBTRACT = 2
    VK_BLEND_OP_MIN = 3
    VK_BLEND_OP_MAX = 4
    VK_BLEND_OP_ZERO_EXT = 1000148000
    VK_BLEND_OP_SRC_EXT = 1000148001
    VK_BLEND_OP_DST_EXT = 1000148002
    VK_BLEND_OP_SRC_OVER_EXT = 1000148003
    VK_BLEND_OP_DST_OVER_EXT = 1000148004
    VK_BLEND_OP_SRC_IN_EXT = 1000148005
    VK_BLEND_OP_DST_IN_EXT = 1000148006
    VK_BLEND_OP_SRC_OUT_EXT = 1000148007
    VK_BLEND_OP_DST_OUT_EXT = 1000148008
    VK_BLEND_OP_SRC_ATOP_EXT = 1000148009
    VK_BLEND_OP_DST_ATOP_EXT = 1000148010
    VK_BLEND_OP_XOR_EXT = 1000148011
    VK_BLEND_OP_MULTIPLY_EXT = 1000148012
    VK_BLEND_OP_SCREEN_EXT = 1000148013
    VK_BLEND_OP_OVERLAY_EXT = 1000148014
    VK_BLEND_OP_DARKEN_EXT = 1000148015
    VK_BLEND_OP_LIGHTEN_EXT = 1000148016
    VK_BLEND_OP_COLORDODGE_EXT = 1000148017
    VK_BLEND_OP_COLORBURN_EXT = 1000148018
    VK_BLEND_OP_HARDLIGHT_EXT = 1000148019
    VK_BLEND_OP_SOFTLIGHT_EXT = 1000148020
    VK_BLEND_OP_DIFFERENCE_EXT = 1000148021
    VK_BLEND_OP_EXCLUSION_EXT = 1000148022
    VK_BLEND_OP_INVERT_EXT = 1000148023
    VK_BLEND_OP_INVERT_RGB_EXT = 1000148024
    VK_BLEND_OP_LINEARDODGE_EXT = 1000148025
    VK_BLEND_OP_LINEARBURN_EXT = 1000148026
    VK_BLEND_OP_VIVIDLIGHT_EXT = 1000148027
    VK_BLEND_OP_LINEARLIGHT_EXT = 1000148028
    VK_BLEND_OP_PINLIGHT_EXT = 1000148029
    VK_BLEND_OP_HARDMIX_EXT = 1000148030
    VK_BLEND_OP_HSL_HUE_EXT = 1000148031
    VK_BLEND_OP_HSL_SATURATION_EXT = 1000148032
    VK_BLEND_OP_HSL_COLOR_EXT = 1000148033
    VK_BLEND_OP_HSL_LUMINOSITY_EXT = 1000148034
    VK_BLEND_OP_PLUS_EXT = 1000148035
    VK_BLEND_OP_PLUS_CLAMPED_EXT = 1000148036
    VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT = 1000148037
    VK_BLEND_OP_PLUS_DARKER_EXT = 1000148038
    VK_BLEND_OP_MINUS_EXT = 1000148039
    VK_BLEND_OP_MINUS_CLAMPED_EXT = 1000148040
    VK_BLEND_OP_CONTRAST_EXT = 1000148041
    VK_BLEND_OP_INVERT_OVG_EXT = 1000148042
    VK_BLEND_OP_RED_EXT = 1000148043
    VK_BLEND_OP_GREEN_EXT = 1000148044
    VK_BLEND_OP_BLUE_EXT = 1000148045

  VkBorderColor* {.size: int32.sizeof} = enum
    VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK = 0
    VK_BORDER_COLOR_INT_TRANSPARENT_BLACK = 1
    VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK = 2
    VK_BORDER_COLOR_INT_OPAQUE_BLACK = 3
    VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE = 4
    VK_BORDER_COLOR_INT_OPAQUE_WHITE = 5
    VK_BORDER_COLOR_FLOAT_CUSTOM_EXT = 1000287003
    VK_BORDER_COLOR_INT_CUSTOM_EXT = 1000287004

  VkFramebufferCreateFlagBits* {.size: int32.sizeof} = enum
    VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT = 1

  VkRenderPassCreateFlagBits* {.size: int32.sizeof} = enum
    VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM = 2

  VkSamplerCreateFlagBits* {.size: int32.sizeof} = enum
    VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT = 1
    VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT = 2

  VkPipelineCacheHeaderVersion* {.size: int32.sizeof} = enum
    VK_PIPELINE_CACHE_HEADER_VERSION_ONE = 1

  VkPipelineCacheCreateFlagBits* {.size: int32.sizeof} = enum
    VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT = 1

  VkPipelineShaderStageCreateFlagBits* {.size: int32.sizeof} = enum
    VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT = 1
    VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT = 2

  VkDescriptorSetLayoutCreateFlagBits* {.size: int32.sizeof} = enum
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR = 1
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT = 2

  VkDeviceQueueCreateFlagBits* {.size: int32.sizeof} = enum
    VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT = 1

  VkBufferCreateFlagBits* {.size: int32.sizeof} = enum
    VK_BUFFER_CREATE_SPARSE_BINDING_BIT = 1
    VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT = 2
    VK_BUFFER_CREATE_SPARSE_ALIASED_BIT = 4
    VK_BUFFER_CREATE_PROTECTED_BIT = 8
    VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = 16

  VkBufferUsageFlagBits* {.size: int32.sizeof} = enum
    VK_BUFFER_USAGE_TRANSFER_SRC_BIT = 1
    VK_BUFFER_USAGE_TRANSFER_DST_BIT = 2
    VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT = 4
    VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT = 8
    VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT = 16
    VK_BUFFER_USAGE_STORAGE_BUFFER_BIT = 32
    VK_BUFFER_USAGE_INDEX_BUFFER_BIT = 64
    VK_BUFFER_USAGE_VERTEX_BUFFER_BIT = 128
    VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT = 256
    VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT = 512
    VK_BUFFER_USAGE_RAY_TRACING_BIT_KHR = 1024
    VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT = 2048
    VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT = 4096
    VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT = 131072

  VkColorComponentFlagBits* {.size: int32.sizeof} = enum
    VK_COLOR_COMPONENT_R_BIT = 1
    VK_COLOR_COMPONENT_G_BIT = 2
    VK_COLOR_COMPONENT_B_BIT = 4
    VK_COLOR_COMPONENT_A_BIT = 8

  VkComponentSwizzle* {.size: int32.sizeof} = enum
    VK_COMPONENT_SWIZZLE_IDENTITY = 0
    VK_COMPONENT_SWIZZLE_ZERO = 1
    VK_COMPONENT_SWIZZLE_ONE = 2
    VK_COMPONENT_SWIZZLE_R = 3
    VK_COMPONENT_SWIZZLE_G = 4
    VK_COMPONENT_SWIZZLE_B = 5
    VK_COMPONENT_SWIZZLE_A = 6

  VkCommandPoolCreateFlagBits* {.size: int32.sizeof} = enum
    VK_COMMAND_POOL_CREATE_TRANSIENT_BIT = 1
    VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT = 2
    VK_COMMAND_POOL_CREATE_PROTECTED_BIT = 4

  VkCommandPoolResetFlagBits* {.size: int32.sizeof} = enum
    VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT = 1

  VkCommandBufferResetFlagBits* {.size: int32.sizeof} = enum
    VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT = 1

  VkCommandBufferLevel* {.size: int32.sizeof} = enum
    VK_COMMAND_BUFFER_LEVEL_PRIMARY = 0
    VK_COMMAND_BUFFER_LEVEL_SECONDARY = 1

  VkCommandBufferUsageFlagBits* {.size: int32.sizeof} = enum
    VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT = 1
    VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT = 2
    VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT = 4

  VkCompareOp* {.size: int32.sizeof} = enum
    VK_COMPARE_OP_NEVER = 0
    VK_COMPARE_OP_LESS = 1
    VK_COMPARE_OP_EQUAL = 2
    VK_COMPARE_OP_LESS_OR_EQUAL = 3
    VK_COMPARE_OP_GREATER = 4
    VK_COMPARE_OP_NOT_EQUAL = 5
    VK_COMPARE_OP_GREATER_OR_EQUAL = 6
    VK_COMPARE_OP_ALWAYS = 7

  VkCullModeFlagBits* {.size: int32.sizeof} = enum
    VK_CULL_MODE_NONE = 0
    VK_CULL_MODE_FRONT_BIT = 1
    VK_CULL_MODE_BACK_BIT = 2
    VK_CULL_MODE_FRONT_AND_BACK = 0x00000003

  VkDescriptorType* {.size: int32.sizeof} = enum
    VK_DESCRIPTOR_TYPE_SAMPLER = 0
    VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = 1
    VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE = 2
    VK_DESCRIPTOR_TYPE_STORAGE_IMAGE = 3
    VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER = 4
    VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER = 5
    VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER = 6
    VK_DESCRIPTOR_TYPE_STORAGE_BUFFER = 7
    VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC = 8
    VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC = 9
    VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT = 10
    VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT = 1000138000
    VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR = 1000165000

  VkDynamicState* {.size: int32.sizeof} = enum
    VK_DYNAMIC_STATE_VIEWPORT = 0
    VK_DYNAMIC_STATE_SCISSOR = 1
    VK_DYNAMIC_STATE_LINE_WIDTH = 2
    VK_DYNAMIC_STATE_DEPTH_BIAS = 3
    VK_DYNAMIC_STATE_BLEND_CONSTANTS = 4
    VK_DYNAMIC_STATE_DEPTH_BOUNDS = 5
    VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK = 6
    VK_DYNAMIC_STATE_STENCIL_WRITE_MASK = 7
    VK_DYNAMIC_STATE_STENCIL_REFERENCE = 8
    VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV = 1000087000
    VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT = 1000099000
    VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT = 1000143000
    VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV = 1000164004
    VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV = 1000164006
    VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV = 1000205001
    VK_DYNAMIC_STATE_LINE_STIPPLE_EXT = 1000259000
    VK_DYNAMIC_STATE_CULL_MODE_EXT = 1000267000
    VK_DYNAMIC_STATE_FRONT_FACE_EXT = 1000267001
    VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT = 1000267002
    VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT = 1000267003
    VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT = 1000267004
    VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT = 1000267005
    VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT = 1000267006
    VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT = 1000267007
    VK_DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT = 1000267008
    VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT = 1000267009
    VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT = 1000267010
    VK_DYNAMIC_STATE_STENCIL_OP_EXT = 1000267011

  VkFenceCreateFlagBits* {.size: int32.sizeof} = enum
    VK_FENCE_CREATE_SIGNALED_BIT = 1

  VkPolygonMode* {.size: int32.sizeof} = enum
    VK_POLYGON_MODE_FILL = 0
    VK_POLYGON_MODE_LINE = 1
    VK_POLYGON_MODE_POINT = 2
    VK_POLYGON_MODE_FILL_RECTANGLE_NV = 1000153000

  VkFormat* {.size: int32.sizeof} = enum
    VK_FORMAT_UNDEFINED = 0
    VK_FORMAT_R4G4_UNORM_PACK8 = 1
    VK_FORMAT_R4G4B4A4_UNORM_PACK16 = 2
    VK_FORMAT_B4G4R4A4_UNORM_PACK16 = 3
    VK_FORMAT_R5G6B5_UNORM_PACK16 = 4
    VK_FORMAT_B5G6R5_UNORM_PACK16 = 5
    VK_FORMAT_R5G5B5A1_UNORM_PACK16 = 6
    VK_FORMAT_B5G5R5A1_UNORM_PACK16 = 7
    VK_FORMAT_A1R5G5B5_UNORM_PACK16 = 8
    VK_FORMAT_R8_UNORM = 9
    VK_FORMAT_R8_SNORM = 10
    VK_FORMAT_R8_USCALED = 11
    VK_FORMAT_R8_SSCALED = 12
    VK_FORMAT_R8_UINT = 13
    VK_FORMAT_R8_SINT = 14
    VK_FORMAT_R8_SRGB = 15
    VK_FORMAT_R8G8_UNORM = 16
    VK_FORMAT_R8G8_SNORM = 17
    VK_FORMAT_R8G8_USCALED = 18
    VK_FORMAT_R8G8_SSCALED = 19
    VK_FORMAT_R8G8_UINT = 20
    VK_FORMAT_R8G8_SINT = 21
    VK_FORMAT_R8G8_SRGB = 22
    VK_FORMAT_R8G8B8_UNORM = 23
    VK_FORMAT_R8G8B8_SNORM = 24
    VK_FORMAT_R8G8B8_USCALED = 25
    VK_FORMAT_R8G8B8_SSCALED = 26
    VK_FORMAT_R8G8B8_UINT = 27
    VK_FORMAT_R8G8B8_SINT = 28
    VK_FORMAT_R8G8B8_SRGB = 29
    VK_FORMAT_B8G8R8_UNORM = 30
    VK_FORMAT_B8G8R8_SNORM = 31
    VK_FORMAT_B8G8R8_USCALED = 32
    VK_FORMAT_B8G8R8_SSCALED = 33
    VK_FORMAT_B8G8R8_UINT = 34
    VK_FORMAT_B8G8R8_SINT = 35
    VK_FORMAT_B8G8R8_SRGB = 36
    VK_FORMAT_R8G8B8A8_UNORM = 37
    VK_FORMAT_R8G8B8A8_SNORM = 38
    VK_FORMAT_R8G8B8A8_USCALED = 39
    VK_FORMAT_R8G8B8A8_SSCALED = 40
    VK_FORMAT_R8G8B8A8_UINT = 41
    VK_FORMAT_R8G8B8A8_SINT = 42
    VK_FORMAT_R8G8B8A8_SRGB = 43
    VK_FORMAT_B8G8R8A8_UNORM = 44
    VK_FORMAT_B8G8R8A8_SNORM = 45
    VK_FORMAT_B8G8R8A8_USCALED = 46
    VK_FORMAT_B8G8R8A8_SSCALED = 47
    VK_FORMAT_B8G8R8A8_UINT = 48
    VK_FORMAT_B8G8R8A8_SINT = 49
    VK_FORMAT_B8G8R8A8_SRGB = 50
    VK_FORMAT_A8B8G8R8_UNORM_PACK32 = 51
    VK_FORMAT_A8B8G8R8_SNORM_PACK32 = 52
    VK_FORMAT_A8B8G8R8_USCALED_PACK32 = 53
    VK_FORMAT_A8B8G8R8_SSCALED_PACK32 = 54
    VK_FORMAT_A8B8G8R8_UINT_PACK32 = 55
    VK_FORMAT_A8B8G8R8_SINT_PACK32 = 56
    VK_FORMAT_A8B8G8R8_SRGB_PACK32 = 57
    VK_FORMAT_A2R10G10B10_UNORM_PACK32 = 58
    VK_FORMAT_A2R10G10B10_SNORM_PACK32 = 59
    VK_FORMAT_A2R10G10B10_USCALED_PACK32 = 60
    VK_FORMAT_A2R10G10B10_SSCALED_PACK32 = 61
    VK_FORMAT_A2R10G10B10_UINT_PACK32 = 62
    VK_FORMAT_A2R10G10B10_SINT_PACK32 = 63
    VK_FORMAT_A2B10G10R10_UNORM_PACK32 = 64
    VK_FORMAT_A2B10G10R10_SNORM_PACK32 = 65
    VK_FORMAT_A2B10G10R10_USCALED_PACK32 = 66
    VK_FORMAT_A2B10G10R10_SSCALED_PACK32 = 67
    VK_FORMAT_A2B10G10R10_UINT_PACK32 = 68
    VK_FORMAT_A2B10G10R10_SINT_PACK32 = 69
    VK_FORMAT_R16_UNORM = 70
    VK_FORMAT_R16_SNORM = 71
    VK_FORMAT_R16_USCALED = 72
    VK_FORMAT_R16_SSCALED = 73
    VK_FORMAT_R16_UINT = 74
    VK_FORMAT_R16_SINT = 75
    VK_FORMAT_R16_SFLOAT = 76
    VK_FORMAT_R16G16_UNORM = 77
    VK_FORMAT_R16G16_SNORM = 78
    VK_FORMAT_R16G16_USCALED = 79
    VK_FORMAT_R16G16_SSCALED = 80
    VK_FORMAT_R16G16_UINT = 81
    VK_FORMAT_R16G16_SINT = 82
    VK_FORMAT_R16G16_SFLOAT = 83
    VK_FORMAT_R16G16B16_UNORM = 84
    VK_FORMAT_R16G16B16_SNORM = 85
    VK_FORMAT_R16G16B16_USCALED = 86
    VK_FORMAT_R16G16B16_SSCALED = 87
    VK_FORMAT_R16G16B16_UINT = 88
    VK_FORMAT_R16G16B16_SINT = 89
    VK_FORMAT_R16G16B16_SFLOAT = 90
    VK_FORMAT_R16G16B16A16_UNORM = 91
    VK_FORMAT_R16G16B16A16_SNORM = 92
    VK_FORMAT_R16G16B16A16_USCALED = 93
    VK_FORMAT_R16G16B16A16_SSCALED = 94
    VK_FORMAT_R16G16B16A16_UINT = 95
    VK_FORMAT_R16G16B16A16_SINT = 96
    VK_FORMAT_R16G16B16A16_SFLOAT = 97
    VK_FORMAT_R32_UINT = 98
    VK_FORMAT_R32_SINT = 99
    VK_FORMAT_R32_SFLOAT = 100
    VK_FORMAT_R32G32_UINT = 101
    VK_FORMAT_R32G32_SINT = 102
    VK_FORMAT_R32G32_SFLOAT = 103
    VK_FORMAT_R32G32B32_UINT = 104
    VK_FORMAT_R32G32B32_SINT = 105
    VK_FORMAT_R32G32B32_SFLOAT = 106
    VK_FORMAT_R32G32B32A32_UINT = 107
    VK_FORMAT_R32G32B32A32_SINT = 108
    VK_FORMAT_R32G32B32A32_SFLOAT = 109
    VK_FORMAT_R64_UINT = 110
    VK_FORMAT_R64_SINT = 111
    VK_FORMAT_R64_SFLOAT = 112
    VK_FORMAT_R64G64_UINT = 113
    VK_FORMAT_R64G64_SINT = 114
    VK_FORMAT_R64G64_SFLOAT = 115
    VK_FORMAT_R64G64B64_UINT = 116
    VK_FORMAT_R64G64B64_SINT = 117
    VK_FORMAT_R64G64B64_SFLOAT = 118
    VK_FORMAT_R64G64B64A64_UINT = 119
    VK_FORMAT_R64G64B64A64_SINT = 120
    VK_FORMAT_R64G64B64A64_SFLOAT = 121
    VK_FORMAT_B10G11R11_UFLOAT_PACK32 = 122
    VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 = 123
    VK_FORMAT_D16_UNORM = 124
    VK_FORMAT_X8_D24_UNORM_PACK32 = 125
    VK_FORMAT_D32_SFLOAT = 126
    VK_FORMAT_S8_UINT = 127
    VK_FORMAT_D16_UNORM_S8_UINT = 128
    VK_FORMAT_D24_UNORM_S8_UINT = 129
    VK_FORMAT_D32_SFLOAT_S8_UINT = 130
    VK_FORMAT_BC1_RGB_UNORM_BLOCK = 131
    VK_FORMAT_BC1_RGB_SRGB_BLOCK = 132
    VK_FORMAT_BC1_RGBA_UNORM_BLOCK = 133
    VK_FORMAT_BC1_RGBA_SRGB_BLOCK = 134
    VK_FORMAT_BC2_UNORM_BLOCK = 135
    VK_FORMAT_BC2_SRGB_BLOCK = 136
    VK_FORMAT_BC3_UNORM_BLOCK = 137
    VK_FORMAT_BC3_SRGB_BLOCK = 138
    VK_FORMAT_BC4_UNORM_BLOCK = 139
    VK_FORMAT_BC4_SNORM_BLOCK = 140
    VK_FORMAT_BC5_UNORM_BLOCK = 141
    VK_FORMAT_BC5_SNORM_BLOCK = 142
    VK_FORMAT_BC6H_UFLOAT_BLOCK = 143
    VK_FORMAT_BC6H_SFLOAT_BLOCK = 144
    VK_FORMAT_BC7_UNORM_BLOCK = 145
    VK_FORMAT_BC7_SRGB_BLOCK = 146
    VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK = 147
    VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK = 148
    VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = 149
    VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = 150
    VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = 151
    VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = 152
    VK_FORMAT_EAC_R11_UNORM_BLOCK = 153
    VK_FORMAT_EAC_R11_SNORM_BLOCK = 154
    VK_FORMAT_EAC_R11G11_UNORM_BLOCK = 155
    VK_FORMAT_EAC_R11G11_SNORM_BLOCK = 156
    VK_FORMAT_ASTC_4x4_UNORM_BLOCK = 157
    VK_FORMAT_ASTC_4x4_SRGB_BLOCK = 158
    VK_FORMAT_ASTC_5x4_UNORM_BLOCK = 159
    VK_FORMAT_ASTC_5x4_SRGB_BLOCK = 160
    VK_FORMAT_ASTC_5x5_UNORM_BLOCK = 161
    VK_FORMAT_ASTC_5x5_SRGB_BLOCK = 162
    VK_FORMAT_ASTC_6x5_UNORM_BLOCK = 163
    VK_FORMAT_ASTC_6x5_SRGB_BLOCK = 164
    VK_FORMAT_ASTC_6x6_UNORM_BLOCK = 165
    VK_FORMAT_ASTC_6x6_SRGB_BLOCK = 166
    VK_FORMAT_ASTC_8x5_UNORM_BLOCK = 167
    VK_FORMAT_ASTC_8x5_SRGB_BLOCK = 168
    VK_FORMAT_ASTC_8x6_UNORM_BLOCK = 169
    VK_FORMAT_ASTC_8x6_SRGB_BLOCK = 170
    VK_FORMAT_ASTC_8x8_UNORM_BLOCK = 171
    VK_FORMAT_ASTC_8x8_SRGB_BLOCK = 172
    VK_FORMAT_ASTC_10x5_UNORM_BLOCK = 173
    VK_FORMAT_ASTC_10x5_SRGB_BLOCK = 174
    VK_FORMAT_ASTC_10x6_UNORM_BLOCK = 175
    VK_FORMAT_ASTC_10x6_SRGB_BLOCK = 176
    VK_FORMAT_ASTC_10x8_UNORM_BLOCK = 177
    VK_FORMAT_ASTC_10x8_SRGB_BLOCK = 178
    VK_FORMAT_ASTC_10x10_UNORM_BLOCK = 179
    VK_FORMAT_ASTC_10x10_SRGB_BLOCK = 180
    VK_FORMAT_ASTC_12x10_UNORM_BLOCK = 181
    VK_FORMAT_ASTC_12x10_SRGB_BLOCK = 182
    VK_FORMAT_ASTC_12x12_UNORM_BLOCK = 183
    VK_FORMAT_ASTC_12x12_SRGB_BLOCK = 184
    VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG = 1000054000
    VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG = 1000054001
    VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG = 1000054002
    VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG = 1000054003
    VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG = 1000054004
    VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG = 1000054005
    VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG = 1000054006
    VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG = 1000054007
    VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT = 1000066000
    VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT = 1000066001
    VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT = 1000066002
    VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT = 1000066003
    VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT = 1000066004
    VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT = 1000066005
    VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT = 1000066006
    VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT = 1000066007
    VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT = 1000066008
    VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT = 1000066009
    VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT = 1000066010
    VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT = 1000066011
    VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT = 1000066012
    VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT = 1000066013
    VK_FORMAT_G8B8G8R8_422_UNORM = 1000156000
    VK_FORMAT_B8G8R8G8_422_UNORM = 1000156001
    VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM = 1000156002
    VK_FORMAT_G8_B8R8_2PLANE_420_UNORM = 1000156003
    VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM = 1000156004
    VK_FORMAT_G8_B8R8_2PLANE_422_UNORM = 1000156005
    VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM = 1000156006
    VK_FORMAT_R10X6_UNORM_PACK16 = 1000156007
    VK_FORMAT_R10X6G10X6_UNORM_2PACK16 = 1000156008
    VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16 = 1000156009
    VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 = 1000156010
    VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 = 1000156011
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 = 1000156012
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 = 1000156013
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 = 1000156014
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 = 1000156015
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 = 1000156016
    VK_FORMAT_R12X4_UNORM_PACK16 = 1000156017
    VK_FORMAT_R12X4G12X4_UNORM_2PACK16 = 1000156018
    VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16 = 1000156019
    VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 = 1000156020
    VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 = 1000156021
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 = 1000156022
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 = 1000156023
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 = 1000156024
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 = 1000156025
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 = 1000156026
    VK_FORMAT_G16B16G16R16_422_UNORM = 1000156027
    VK_FORMAT_B16G16R16G16_422_UNORM = 1000156028
    VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM = 1000156029
    VK_FORMAT_G16_B16R16_2PLANE_420_UNORM = 1000156030
    VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM = 1000156031
    VK_FORMAT_G16_B16R16_2PLANE_422_UNORM = 1000156032
    VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM = 1000156033
    VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT = 1000340000
    VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT = 1000340001

  VkFormatFeatureFlagBits* {.size: int32.sizeof} = enum
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT = 1
    VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT = 2
    VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT = 4
    VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT = 8
    VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT = 16
    VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT = 32
    VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT = 64
    VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT = 128
    VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT = 256
    VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT = 512
    VK_FORMAT_FEATURE_BLIT_SRC_BIT = 1024
    VK_FORMAT_FEATURE_BLIT_DST_BIT = 2048
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT = 4096
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG = 8192
    VK_FORMAT_FEATURE_TRANSFER_SRC_BIT = 16384
    VK_FORMAT_FEATURE_TRANSFER_DST_BIT = 32768
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT = 65536
    VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT = 131072
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT = 262144
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT = 524288
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT = 1048576
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT = 2097152
    VK_FORMAT_FEATURE_DISJOINT_BIT = 4194304
    VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT = 8388608
    VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT = 16777216
    VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR = 536870912

  VkFrontFace* {.size: int32.sizeof} = enum
    VK_FRONT_FACE_COUNTER_CLOCKWISE = 0
    VK_FRONT_FACE_CLOCKWISE = 1

  VkImageAspectFlagBits* {.size: int32.sizeof} = enum
    VK_IMAGE_ASPECT_COLOR_BIT = 1
    VK_IMAGE_ASPECT_DEPTH_BIT = 2
    VK_IMAGE_ASPECT_STENCIL_BIT = 4
    VK_IMAGE_ASPECT_METADATA_BIT = 8
    VK_IMAGE_ASPECT_PLANE_0_BIT = 16
    VK_IMAGE_ASPECT_PLANE_1_BIT = 32
    VK_IMAGE_ASPECT_PLANE_2_BIT = 64
    VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT = 128
    VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT = 256
    VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT = 512
    VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT = 1024

  VkImageCreateFlagBits* {.size: int32.sizeof} = enum
    VK_IMAGE_CREATE_SPARSE_BINDING_BIT = 1
    VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT = 2
    VK_IMAGE_CREATE_SPARSE_ALIASED_BIT = 4
    VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT = 8
    VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT = 16
    VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT = 32
    VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT = 64
    VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT = 128
    VK_IMAGE_CREATE_EXTENDED_USAGE_BIT = 256
    VK_IMAGE_CREATE_DISJOINT_BIT = 512
    VK_IMAGE_CREATE_ALIAS_BIT = 1024
    VK_IMAGE_CREATE_PROTECTED_BIT = 2048
    VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT = 4096
    VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV = 8192
    VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT = 16384

  VkImageLayout* {.size: int32.sizeof} = enum
    VK_IMAGE_LAYOUT_UNDEFINED = 0
    VK_IMAGE_LAYOUT_GENERAL = 1
    VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL = 2
    VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL = 3
    VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL = 4
    VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL = 5
    VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL = 6
    VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL = 7
    VK_IMAGE_LAYOUT_PREINITIALIZED = 8
    VK_IMAGE_LAYOUT_PRESENT_SRC_KHR = 1000001002
    VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR = 1000111000
    VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL = 1000117000
    VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL = 1000117001
    VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV = 1000164003
    VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT = 1000218000
    VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL = 1000241000
    VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL = 1000241001
    VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL = 1000241002
    VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL = 1000241003

  VkImageTiling* {.size: int32.sizeof} = enum
    VK_IMAGE_TILING_OPTIMAL = 0
    VK_IMAGE_TILING_LINEAR = 1
    VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT = 1000158000

  VkImageType* {.size: int32.sizeof} = enum
    VK_IMAGE_TYPE_1D = 0
    VK_IMAGE_TYPE_2D = 1
    VK_IMAGE_TYPE_3D = 2

  VkImageUsageFlagBits* {.size: int32.sizeof} = enum
    VK_IMAGE_USAGE_TRANSFER_SRC_BIT = 1
    VK_IMAGE_USAGE_TRANSFER_DST_BIT = 2
    VK_IMAGE_USAGE_SAMPLED_BIT = 4
    VK_IMAGE_USAGE_STORAGE_BIT = 8
    VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT = 16
    VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT = 32
    VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT = 64
    VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT = 128
    VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV = 256
    VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT = 512

  VkImageViewCreateFlagBits* {.size: int32.sizeof} = enum
    VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT = 1
    VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT = 2

  VkImageViewType* {.size: int32.sizeof} = enum
    VK_IMAGE_VIEW_TYPE_1D = 0
    VK_IMAGE_VIEW_TYPE_2D = 1
    VK_IMAGE_VIEW_TYPE_3D = 2
    VK_IMAGE_VIEW_TYPE_CUBE = 3
    VK_IMAGE_VIEW_TYPE_1D_ARRAY = 4
    VK_IMAGE_VIEW_TYPE_2D_ARRAY = 5
    VK_IMAGE_VIEW_TYPE_CUBE_ARRAY = 6

  VkSharingMode* {.size: int32.sizeof} = enum
    VK_SHARING_MODE_EXCLUSIVE = 0
    VK_SHARING_MODE_CONCURRENT = 1

  VkIndexType* {.size: int32.sizeof} = enum
    VK_INDEX_TYPE_UINT16 = 0
    VK_INDEX_TYPE_UINT32 = 1
    VK_INDEX_TYPE_NONE_KHR = 1000165000
    VK_INDEX_TYPE_UINT8_EXT = 1000265000

  VkLogicOp* {.size: int32.sizeof} = enum
    VK_LOGIC_OP_CLEAR = 0
    VK_LOGIC_OP_AND = 1
    VK_LOGIC_OP_AND_REVERSE = 2
    VK_LOGIC_OP_COPY = 3
    VK_LOGIC_OP_AND_INVERTED = 4
    VK_LOGIC_OP_NO_OP = 5
    VK_LOGIC_OP_XOR = 6
    VK_LOGIC_OP_OR = 7
    VK_LOGIC_OP_NOR = 8
    VK_LOGIC_OP_EQUIVALENT = 9
    VK_LOGIC_OP_INVERT = 10
    VK_LOGIC_OP_OR_REVERSE = 11
    VK_LOGIC_OP_COPY_INVERTED = 12
    VK_LOGIC_OP_OR_INVERTED = 13
    VK_LOGIC_OP_NAND = 14
    VK_LOGIC_OP_SET = 15

  VkMemoryHeapFlagBits* {.size: int32.sizeof} = enum
    VK_MEMORY_HEAP_DEVICE_LOCAL_BIT = 1
    VK_MEMORY_HEAP_MULTI_INSTANCE_BIT = 2

  VkAccessFlagBits* {.size: int32.sizeof} = enum
    VK_ACCESS_INDIRECT_COMMAND_READ_BIT = 1
    VK_ACCESS_INDEX_READ_BIT = 2
    VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT = 4
    VK_ACCESS_UNIFORM_READ_BIT = 8
    VK_ACCESS_INPUT_ATTACHMENT_READ_BIT = 16
    VK_ACCESS_SHADER_READ_BIT = 32
    VK_ACCESS_SHADER_WRITE_BIT = 64
    VK_ACCESS_COLOR_ATTACHMENT_READ_BIT = 128
    VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT = 256
    VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT = 512
    VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = 1024
    VK_ACCESS_TRANSFER_READ_BIT = 2048
    VK_ACCESS_TRANSFER_WRITE_BIT = 4096
    VK_ACCESS_HOST_READ_BIT = 8192
    VK_ACCESS_HOST_WRITE_BIT = 16384
    VK_ACCESS_MEMORY_READ_BIT = 32768
    VK_ACCESS_MEMORY_WRITE_BIT = 65536
    VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV = 131072
    VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV = 262144
    VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT = 524288
    VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT = 1048576
    VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR = 2097152
    VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR = 4194304
    VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV = 8388608
    VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT = 16777216
    VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT = 33554432
    VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT = 67108864
    VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT = 134217728

  VkMemoryPropertyFlagBits* {.size: int32.sizeof} = enum
    VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT = 1
    VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT = 2
    VK_MEMORY_PROPERTY_HOST_COHERENT_BIT = 4
    VK_MEMORY_PROPERTY_HOST_CACHED_BIT = 8
    VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT = 16
    VK_MEMORY_PROPERTY_PROTECTED_BIT = 32
    VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD = 64
    VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD = 128

  VkPhysicalDeviceType* {.size: int32.sizeof} = enum
    VK_PHYSICAL_DEVICE_TYPE_OTHER = 0
    VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU = 1
    VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU = 2
    VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU = 3
    VK_PHYSICAL_DEVICE_TYPE_CPU = 4

  VkPipelineBindPoint* {.size: int32.sizeof} = enum
    VK_PIPELINE_BIND_POINT_GRAPHICS = 0
    VK_PIPELINE_BIND_POINT_COMPUTE = 1
    VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR = 1000165000

  VkPipelineCreateFlagBits* {.size: int32.sizeof} = enum
    VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT = 1
    VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT = 2
    VK_PIPELINE_CREATE_DERIVATIVE_BIT = 4
    VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT = 8
    VK_PIPELINE_CREATE_DISPATCH_BASE_BIT = 16
    VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV = 32
    VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR = 64
    VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR = 128
    VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT = 256
    VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT = 512
    VK_PIPELINE_CREATE_LIBRARY_BIT_KHR = 2048
    VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR = 4096
    VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR = 8192
    VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR = 16384
    VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR = 32768
    VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR = 65536
    VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR = 131072
    VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV = 262144

  VkPrimitiveTopology* {.size: int32.sizeof} = enum
    VK_PRIMITIVE_TOPOLOGY_POINT_LIST = 0
    VK_PRIMITIVE_TOPOLOGY_LINE_LIST = 1
    VK_PRIMITIVE_TOPOLOGY_LINE_STRIP = 2
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST = 3
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP = 4
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN = 5
    VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY = 6
    VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY = 7
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY = 8
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY = 9
    VK_PRIMITIVE_TOPOLOGY_PATCH_LIST = 10

  VkQueryControlFlagBits* {.size: int32.sizeof} = enum
    VK_QUERY_CONTROL_PRECISE_BIT = 1

  VkQueryPipelineStatisticFlagBits* {.size: int32.sizeof} = enum
    VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT = 1
    VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT = 2
    VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT = 4
    VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT = 8
    VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT = 16
    VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT = 32
    VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT = 64
    VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT = 128
    VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT = 256
    VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT = 512
    VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT = 1024

  VkQueryResultFlagBits* {.size: int32.sizeof} = enum
    VK_QUERY_RESULT_64_BIT = 1
    VK_QUERY_RESULT_WAIT_BIT = 2
    VK_QUERY_RESULT_WITH_AVAILABILITY_BIT = 4
    VK_QUERY_RESULT_PARTIAL_BIT = 8

  VkQueryType* {.size: int32.sizeof} = enum
    VK_QUERY_TYPE_OCCLUSION = 0
    VK_QUERY_TYPE_PIPELINE_STATISTICS = 1
    VK_QUERY_TYPE_TIMESTAMP = 2
    VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT = 1000028004
    VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR = 1000116000
    VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR = 1000150000
    VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR = 1000165000
    VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL = 1000210000

  VkQueueFlagBits* {.size: int32.sizeof} = enum
    VK_QUEUE_GRAPHICS_BIT = 1
    VK_QUEUE_COMPUTE_BIT = 2
    VK_QUEUE_TRANSFER_BIT = 4
    VK_QUEUE_SPARSE_BINDING_BIT = 8
    VK_QUEUE_PROTECTED_BIT = 16

  VkSubpassContents* {.size: int32.sizeof} = enum
    VK_SUBPASS_CONTENTS_INLINE = 0
    VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS = 1

  VkResult* {.size: int32.sizeof} = enum
    VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS = -1000257000
    VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT = -1000255000
    VK_ERROR_NOT_PERMITTED_EXT = -1000174001
    VK_ERROR_FRAGMENTATION = -1000161000
    VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT = -1000158000
    VK_ERROR_INCOMPATIBLE_VERSION_KHR = -1000150000
    VK_ERROR_INVALID_EXTERNAL_HANDLE = -1000072003
    VK_ERROR_OUT_OF_POOL_MEMORY = -1000069000
    VK_ERROR_INVALID_SHADER_NV = -1000012000
    VK_ERROR_VALIDATION_FAILED_EXT = -1000011001
    VK_ERROR_INCOMPATIBLE_DISPLAY_KHR = -1000003001
    VK_ERROR_OUT_OF_DATE_KHR = -1000001004
    VK_ERROR_NATIVE_WINDOW_IN_USE_KHR = -1000000001
    VK_ERROR_SURFACE_LOST_KHR = -1000000000
    VK_ERROR_UNKNOWN = -13
    VK_ERROR_FRAGMENTED_POOL = -12
    VK_ERROR_FORMAT_NOT_SUPPORTED = -11
    VK_ERROR_TOO_MANY_OBJECTS = -10
    VK_ERROR_INCOMPATIBLE_DRIVER = -9
    VK_ERROR_FEATURE_NOT_PRESENT = -8
    VK_ERROR_EXTENSION_NOT_PRESENT = -7
    VK_ERROR_LAYER_NOT_PRESENT = -6
    VK_ERROR_MEMORY_MAP_FAILED = -5
    VK_ERROR_DEVICE_LOST = -4
    VK_ERROR_INITIALIZATION_FAILED = -3
    VK_ERROR_OUT_OF_DEVICE_MEMORY = -2
    VK_ERROR_OUT_OF_HOST_MEMORY = -1
    VK_SUCCESS = 0
    VK_NOT_READY = 1
    VK_TIMEOUT = 2
    VK_EVENT_SET = 3
    VK_EVENT_RESET = 4
    VK_INCOMPLETE = 5
    VK_SUBOPTIMAL_KHR = 1000001003
    VK_THREAD_IDLE_KHR = 1000268000
    VK_THREAD_DONE_KHR = 1000268001
    VK_OPERATION_DEFERRED_KHR = 1000268002
    VK_OPERATION_NOT_DEFERRED_KHR = 1000268003
    VK_PIPELINE_COMPILE_REQUIRED_EXT = 1000297000

  VkShaderStageFlagBits* {.size: int32.sizeof} = enum
    VK_SHADER_STAGE_VERTEX_BIT = 1
    VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT = 2
    VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT = 4
    VK_SHADER_STAGE_GEOMETRY_BIT = 8
    VK_SHADER_STAGE_FRAGMENT_BIT = 16
    VK_SHADER_STAGE_ALL_GRAPHICS = 0x0000001F
    VK_SHADER_STAGE_COMPUTE_BIT = 32
    VK_SHADER_STAGE_TASK_BIT_NV = 64
    VK_SHADER_STAGE_MESH_BIT_NV = 128
    VK_SHADER_STAGE_RAYGEN_BIT_KHR = 256
    VK_SHADER_STAGE_ANY_HIT_BIT_KHR = 512
    VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR = 1024
    VK_SHADER_STAGE_MISS_BIT_KHR = 2048
    VK_SHADER_STAGE_INTERSECTION_BIT_KHR = 4096
    VK_SHADER_STAGE_CALLABLE_BIT_KHR = 8192
    VK_SHADER_STAGE_ALL = 0x7FFFFFFF

  VkSparseMemoryBindFlagBits* {.size: int32.sizeof} = enum
    VK_SPARSE_MEMORY_BIND_METADATA_BIT = 1

  VkStencilFaceFlagBits* {.size: int32.sizeof} = enum
    VK_STENCIL_FACE_FRONT_BIT = 1
    VK_STENCIL_FACE_BACK_BIT = 2
    VK_STENCIL_FACE_FRONT_AND_BACK = 0x00000003

  VkStencilOp* {.size: int32.sizeof} = enum
    VK_STENCIL_OP_KEEP = 0
    VK_STENCIL_OP_ZERO = 1
    VK_STENCIL_OP_REPLACE = 2
    VK_STENCIL_OP_INCREMENT_AND_CLAMP = 3
    VK_STENCIL_OP_DECREMENT_AND_CLAMP = 4
    VK_STENCIL_OP_INVERT = 5
    VK_STENCIL_OP_INCREMENT_AND_WRAP = 6
    VK_STENCIL_OP_DECREMENT_AND_WRAP = 7

  VkStructureType* {.size: int32.sizeof} = enum
    VK_STRUCTURE_TYPE_APPLICATION_INFO = 0
    VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO = 1
    VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO = 2
    VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO = 3
    VK_STRUCTURE_TYPE_SUBMIT_INFO = 4
    VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO = 5
    VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE = 6
    VK_STRUCTURE_TYPE_BIND_SPARSE_INFO = 7
    VK_STRUCTURE_TYPE_FENCE_CREATE_INFO = 8
    VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO = 9
    VK_STRUCTURE_TYPE_EVENT_CREATE_INFO = 10
    VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO = 11
    VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO = 12
    VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO = 13
    VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO = 14
    VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO = 15
    VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO = 16
    VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO = 17
    VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO = 18
    VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO = 19
    VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO = 20
    VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO = 21
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO = 22
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO = 23
    VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO = 24
    VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO = 25
    VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO = 26
    VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO = 27
    VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO = 28
    VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO = 29
    VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO = 30
    VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO = 31
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO = 32
    VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO = 33
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO = 34
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET = 35
    VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET = 36
    VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO = 37
    VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO = 38
    VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO = 39
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO = 40
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO = 41
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO = 42
    VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO = 43
    VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER = 44
    VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER = 45
    VK_STRUCTURE_TYPE_MEMORY_BARRIER = 46
    VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO = 47
    VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO = 48
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES = 49
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES = 50
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES = 51
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES = 52
    VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR = 1000001000
    VK_STRUCTURE_TYPE_PRESENT_INFO_KHR = 1000001001
    VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR = 1000002000
    VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR = 1000002001
    VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR = 1000003000
    VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR = 1000004000
    VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR = 1000005000
    VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR = 1000006000
    VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR = 1000008000
    VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR = 1000009000
    VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT = 1000011000
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD = 1000018000
    VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT = 1000022000
    VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT = 1000022001
    VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT = 1000022002
    VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV = 1000026000
    VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV = 1000026001
    VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV = 1000026002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT = 1000028000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT = 1000028001
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT = 1000028002
    VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX = 1000030000
    VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX = 1000030001
    VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD = 1000041000
    VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP = 1000049000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV = 1000050000
    VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO = 1000053000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES = 1000053001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES = 1000053002
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV = 1000056000
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV = 1000056001
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057000
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057001
    VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV = 1000058000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2 = 1000059000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 = 1000059001
    VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 = 1000059002
    VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 = 1000059003
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 = 1000059004
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 = 1000059005
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2 = 1000059006
    VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2 = 1000059007
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2 = 1000059008
    VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO = 1000060000
    VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO = 1000060003
    VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO = 1000060004
    VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO = 1000060005
    VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO = 1000060006
    VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR = 1000060007
    VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR = 1000060008
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR = 1000060009
    VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR = 1000060010
    VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR = 1000060011
    VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR = 1000060012
    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO = 1000060013
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO = 1000060014
    VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT = 1000061000
    VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN = 1000062000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES = 1000063000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT = 1000066000
    VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT = 1000067000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT = 1000067001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES = 1000070000
    VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO = 1000070001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO = 1000071000
    VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES = 1000071001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO = 1000071002
    VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES = 1000071003
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES = 1000071004
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO = 1000072000
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO = 1000072001
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO = 1000072002
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073000
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073001
    VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR = 1000073002
    VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR = 1000073003
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR = 1000074000
    VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR = 1000074001
    VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR = 1000074002
    VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR = 1000075000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO = 1000076000
    VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES = 1000076001
    VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO = 1000077000
    VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078000
    VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078001
    VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR = 1000078002
    VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR = 1000078003
    VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR = 1000079000
    VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR = 1000079001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR = 1000080000
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT = 1000081000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT = 1000081001
    VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT = 1000081002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES = 1000082000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES = 1000083000
    VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR = 1000084000
    VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO = 1000085000
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV = 1000087000
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT = 1000090000
    VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT = 1000091000
    VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT = 1000091001
    VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT = 1000091002
    VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT = 1000091003
    VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE = 1000092000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES = 1000094000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX = 1000097000
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV = 1000098000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT = 1000099000
    VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT = 1000099001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT = 1000101000
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT = 1000101001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT = 1000102000
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT = 1000102001
    VK_STRUCTURE_TYPE_HDR_METADATA_EXT = 1000105000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES = 1000108000
    VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO = 1000108001
    VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO = 1000108002
    VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO = 1000108003
    VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2 = 1000109000
    VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2 = 1000109001
    VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2 = 1000109002
    VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2 = 1000109003
    VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2 = 1000109004
    VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO = 1000109005
    VK_STRUCTURE_TYPE_SUBPASS_END_INFO = 1000109006
    VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR = 1000111000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO = 1000112000
    VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES = 1000112001
    VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO = 1000113000
    VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114000
    VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114001
    VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR = 1000114002
    VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR = 1000115000
    VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR = 1000115001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR = 1000116000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR = 1000116001
    VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR = 1000116002
    VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR = 1000116003
    VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR = 1000116004
    VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR = 1000116005
    VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR = 1000116006
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES = 1000117000
    VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO = 1000117001
    VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO = 1000117002
    VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO = 1000117003
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR = 1000119000
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR = 1000119001
    VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR = 1000119002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES = 1000120000
    VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR = 1000121000
    VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR = 1000121001
    VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR = 1000121002
    VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR = 1000121003
    VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR = 1000121004
    VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK = 1000122000
    VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK = 1000123000
    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS = 1000127000
    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO = 1000127001
    VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT = 1000128000
    VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT = 1000128001
    VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT = 1000128002
    VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT = 1000128003
    VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT = 1000128004
    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID = 1000129000
    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID = 1000129001
    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID = 1000129002
    VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129003
    VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129004
    VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID = 1000129005
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES = 1000130000
    VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO = 1000130001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT = 1000138000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT = 1000138001
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT = 1000138002
    VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT = 1000138003
    VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT = 1000143000
    VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT = 1000143001
    VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT = 1000143002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT = 1000143003
    VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT = 1000143004
    VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO = 1000145000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES = 1000145001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES = 1000145002
    VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2 = 1000145003
    VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 = 1000146000
    VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2 = 1000146001
    VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2 = 1000146002
    VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 = 1000146003
    VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2 = 1000146004
    VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO = 1000147000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT = 1000148000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT = 1000148001
    VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT = 1000148002
    VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV = 1000149000
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR = 1000150000
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_GEOMETRY_TYPE_INFO_KHR = 1000150001
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR = 1000150002
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR = 1000150003
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR = 1000150004
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR = 1000150005
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR = 1000150006
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_KHR = 1000150008
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_KHR = 1000150009
    VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR = 1000150010
    VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR = 1000150011
    VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR = 1000150012
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_FEATURES_KHR = 1000150013
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_KHR = 1000150014
    VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR = 1000150015
    VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR = 1000150016
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR = 1000150017
    VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR = 1000150018
    VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV = 1000152000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV = 1000154000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV = 1000154001
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO = 1000156000
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO = 1000156001
    VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO = 1000156002
    VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO = 1000156003
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES = 1000156004
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES = 1000156005
    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO = 1000157000
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO = 1000157001
    VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT = 1000158000
    VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT = 1000158001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT = 1000158002
    VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT = 1000158003
    VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT = 1000158004
    VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT = 1000158005
    VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160000
    VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160001
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO = 1000161000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES = 1000161001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES = 1000161002
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO = 1000161003
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT = 1000161004
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV = 1000164000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV = 1000164001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV = 1000164002
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV = 1000164005
    VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV = 1000165000
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV = 1000165001
    VK_STRUCTURE_TYPE_GEOMETRY_NV = 1000165003
    VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV = 1000165004
    VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV = 1000165005
    VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_KHR = 1000165006
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR = 1000165007
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV = 1000165008
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV = 1000165009
    VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV = 1000165011
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV = 1000165012
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV = 1000166000
    VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV = 1000166001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES = 1000168000
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT = 1000168001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT = 1000170000
    VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT = 1000170001
    VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT = 1000174000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES = 1000175000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES = 1000177000
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT = 1000178000
    VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT = 1000178001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT = 1000178002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES = 1000180000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR = 1000181000
    VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD = 1000183000
    VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT = 1000184000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD = 1000185000
    VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD = 1000189000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT = 1000190000
    VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT = 1000190001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT = 1000190002
    VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP = 1000191000
    VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT = 1000192000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES = 1000196000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES = 1000197000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES = 1000199000
    VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE = 1000199001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV = 1000201000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV = 1000202000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV = 1000202001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV = 1000203000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV = 1000204000
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV = 1000205000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV = 1000205002
    VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV = 1000206000
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV = 1000206001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES = 1000207000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES = 1000207001
    VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO = 1000207002
    VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO = 1000207003
    VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO = 1000207004
    VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO = 1000207005
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL = 1000209000
    VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL = 1000210000
    VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL = 1000210001
    VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL = 1000210002
    VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL = 1000210003
    VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL = 1000210004
    VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL = 1000210005
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES = 1000211000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT = 1000212000
    VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD = 1000213000
    VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD = 1000213001
    VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA = 1000214000
    VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT = 1000217000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT = 1000218000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT = 1000218001
    VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT = 1000218002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES = 1000221000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT = 1000225000
    VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT = 1000225001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT = 1000225002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD = 1000227000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD = 1000229000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT = 1000237000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT = 1000238000
    VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT = 1000238001
    VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR = 1000239000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV = 1000240000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES = 1000241000
    VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT = 1000241001
    VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT = 1000241002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT = 1000244000
    VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO = 1000244001
    VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT = 1000244002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT = 1000245000
    VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO = 1000246000
    VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT = 1000247000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV = 1000249000
    VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV = 1000250000
    VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV = 1000250001
    VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV = 1000250002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT = 1000251000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT = 1000252000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES = 1000253000
    VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT = 1000255000
    VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT = 1000255001
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT = 1000255002
    VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT = 1000256000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES = 1000257000
    VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO = 1000257002
    VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO = 1000257003
    VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO = 1000257004
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT = 1000259000
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT = 1000259001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT = 1000259002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT = 1000260000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES = 1000261000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT = 1000265000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT = 1000267000
    VK_STRUCTURE_TYPE_DEFERRED_OPERATION_INFO_KHR = 1000268000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR = 1000269000
    VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR = 1000269001
    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR = 1000269002
    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR = 1000269003
    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR = 1000269004
    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR = 1000269005
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT = 1000276000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV = 1000277000
    VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV = 1000277001
    VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV = 1000277002
    VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV = 1000277003
    VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV = 1000277004
    VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV = 1000277005
    VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV = 1000277006
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV = 1000277007
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT = 1000281000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT = 1000281001
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM = 1000282000
    VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM = 1000282001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT = 1000286000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT = 1000286001
    VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT = 1000287000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT = 1000287001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT = 1000287002
    VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR = 1000290000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT = 1000295000
    VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT = 1000295001
    VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT = 1000295002
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT = 1000297000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV = 1000300000
    VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV = 1000300001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT = 1000332000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT = 1000332001
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT = 1000335000
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT = 1000340000
    VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT = 1000346000

  VkSystemAllocationScope* {.size: int32.sizeof} = enum
    VK_SYSTEM_ALLOCATION_SCOPE_COMMAND = 0
    VK_SYSTEM_ALLOCATION_SCOPE_OBJECT = 1
    VK_SYSTEM_ALLOCATION_SCOPE_CACHE = 2
    VK_SYSTEM_ALLOCATION_SCOPE_DEVICE = 3
    VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE = 4

  VkInternalAllocationType* {.size: int32.sizeof} = enum
    VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE = 0

  VkSamplerAddressMode* {.size: int32.sizeof} = enum
    VK_SAMPLER_ADDRESS_MODE_REPEAT = 0
    VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT = 1
    VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE = 2
    VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER = 3
    VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE = 4

  VkFilter* {.size: int32.sizeof} = enum
    VK_FILTER_NEAREST = 0
    VK_FILTER_LINEAR = 1
    VK_FILTER_CUBIC_IMG = 1000015000

  VkSamplerMipmapMode* {.size: int32.sizeof} = enum
    VK_SAMPLER_MIPMAP_MODE_NEAREST = 0
    VK_SAMPLER_MIPMAP_MODE_LINEAR = 1

  VkVertexInputRate* {.size: int32.sizeof} = enum
    VK_VERTEX_INPUT_RATE_VERTEX = 0
    VK_VERTEX_INPUT_RATE_INSTANCE = 1

  VkPipelineStageFlagBits* {.size: int32.sizeof} = enum
    VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT = 1
    VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT = 2
    VK_PIPELINE_STAGE_VERTEX_INPUT_BIT = 4
    VK_PIPELINE_STAGE_VERTEX_SHADER_BIT = 8
    VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT = 16
    VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT = 32
    VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT = 64
    VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT = 128
    VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT = 256
    VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT = 512
    VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT = 1024
    VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT = 2048
    VK_PIPELINE_STAGE_TRANSFER_BIT = 4096
    VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT = 8192
    VK_PIPELINE_STAGE_HOST_BIT = 16384
    VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT = 32768
    VK_PIPELINE_STAGE_ALL_COMMANDS_BIT = 65536
    VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV = 131072
    VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT = 262144
    VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV = 524288
    VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV = 1048576
    VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR = 2097152
    VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV = 4194304
    VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT = 8388608
    VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT = 16777216
    VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR = 33554432

  VkSparseImageFormatFlagBits* {.size: int32.sizeof} = enum
    VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT = 1
    VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT = 2
    VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT = 4

  VkSampleCountFlagBits* {.size: int32.sizeof} = enum
    VK_SAMPLE_COUNT_1_BIT = 1
    VK_SAMPLE_COUNT_2_BIT = 2
    VK_SAMPLE_COUNT_4_BIT = 4
    VK_SAMPLE_COUNT_8_BIT = 8
    VK_SAMPLE_COUNT_16_BIT = 16
    VK_SAMPLE_COUNT_32_BIT = 32
    VK_SAMPLE_COUNT_64_BIT = 64

  VkAttachmentDescriptionFlagBits* {.size: int32.sizeof} = enum
    VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT = 1

  VkDescriptorPoolCreateFlagBits* {.size: int32.sizeof} = enum
    VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT = 1
    VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT = 2

  VkDependencyFlagBits* {.size: int32.sizeof} = enum
    VK_DEPENDENCY_BY_REGION_BIT = 1
    VK_DEPENDENCY_VIEW_LOCAL_BIT = 2
    VK_DEPENDENCY_DEVICE_GROUP_BIT = 4

  VkObjectType* {.size: int32.sizeof} = enum
    VK_OBJECT_TYPE_UNKNOWN = 0
    VK_OBJECT_TYPE_INSTANCE = 1
    VK_OBJECT_TYPE_PHYSICAL_DEVICE = 2
    VK_OBJECT_TYPE_DEVICE = 3
    VK_OBJECT_TYPE_QUEUE = 4
    VK_OBJECT_TYPE_SEMAPHORE = 5
    VK_OBJECT_TYPE_COMMAND_BUFFER = 6
    VK_OBJECT_TYPE_FENCE = 7
    VK_OBJECT_TYPE_DEVICE_MEMORY = 8
    VK_OBJECT_TYPE_BUFFER = 9
    VK_OBJECT_TYPE_IMAGE = 10
    VK_OBJECT_TYPE_EVENT = 11
    VK_OBJECT_TYPE_QUERY_POOL = 12
    VK_OBJECT_TYPE_BUFFER_VIEW = 13
    VK_OBJECT_TYPE_IMAGE_VIEW = 14
    VK_OBJECT_TYPE_SHADER_MODULE = 15
    VK_OBJECT_TYPE_PIPELINE_CACHE = 16
    VK_OBJECT_TYPE_PIPELINE_LAYOUT = 17
    VK_OBJECT_TYPE_RENDER_PASS = 18
    VK_OBJECT_TYPE_PIPELINE = 19
    VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT = 20
    VK_OBJECT_TYPE_SAMPLER = 21
    VK_OBJECT_TYPE_DESCRIPTOR_POOL = 22
    VK_OBJECT_TYPE_DESCRIPTOR_SET = 23
    VK_OBJECT_TYPE_FRAMEBUFFER = 24
    VK_OBJECT_TYPE_COMMAND_POOL = 25
    VK_OBJECT_TYPE_SURFACE_KHR = 1000000000
    VK_OBJECT_TYPE_SWAPCHAIN_KHR = 1000001000
    VK_OBJECT_TYPE_DISPLAY_KHR = 1000002000
    VK_OBJECT_TYPE_DISPLAY_MODE_KHR = 1000002001
    VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT = 1000011000
    VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE = 1000085000
    VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT = 1000128000
    VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION = 1000156000
    VK_OBJECT_TYPE_VALIDATION_CACHE_EXT = 1000160000
    VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR = 1000165000
    VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL = 1000210000
    VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR = 1000268000
    VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV = 1000277000
    VK_OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT = 1000295000

  VkIndirectCommandsLayoutUsageFlagBitsNV* {.size: int32.sizeof} = enum
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV = 1
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV = 2
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV = 4

  VkIndirectCommandsTokenTypeNV* {.size: int32.sizeof} = enum
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV = 0
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV = 1
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV = 2
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV = 3
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV = 4
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV = 5
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV = 6
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV = 7

  VkIndirectStateFlagBitsNV* {.size: int32.sizeof} = enum
    VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV = 1

  VkDescriptorUpdateTemplateType* {.size: int32.sizeof} = enum
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET = 0
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR = 1

  VkDescriptorUpdateTemplateTypeKHR* = VkDescriptorUpdateTemplateType

  VkViewportCoordinateSwizzleNV* {.size: int32.sizeof} = enum
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV = 0
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV = 1
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV = 2
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV = 3
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV = 4
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV = 5
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV = 6
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV = 7

  VkDiscardRectangleModeEXT* {.size: int32.sizeof} = enum
    VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT = 0
    VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT = 1

  VkSubpassDescriptionFlagBits* {.size: int32.sizeof} = enum
    VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX = 1
    VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX = 2
    VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM = 4
    VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM = 8

  VkPointClippingBehavior* {.size: int32.sizeof} = enum
    VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES = 0
    VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY = 1

  VkPointClippingBehaviorKHR* = VkPointClippingBehavior

  VkCoverageModulationModeNV* {.size: int32.sizeof} = enum
    VK_COVERAGE_MODULATION_MODE_NONE_NV = 0
    VK_COVERAGE_MODULATION_MODE_RGB_NV = 1
    VK_COVERAGE_MODULATION_MODE_ALPHA_NV = 2
    VK_COVERAGE_MODULATION_MODE_RGBA_NV = 3

  VkCoverageReductionModeNV* {.size: int32.sizeof} = enum
    VK_COVERAGE_REDUCTION_MODE_MERGE_NV = 0
    VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV = 1

  VkValidationCacheHeaderVersionEXT* {.size: int32.sizeof} = enum
    VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT = 1

  VkShaderInfoTypeAMD* {.size: int32.sizeof} = enum
    VK_SHADER_INFO_TYPE_STATISTICS_AMD = 0
    VK_SHADER_INFO_TYPE_BINARY_AMD = 1
    VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD = 2

  VkQueueGlobalPriorityEXT* {.size: int32.sizeof} = enum
    VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT = 128
    VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT = 256
    VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT = 512
    VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT = 1024

  VkTimeDomainEXT* {.size: int32.sizeof} = enum
    VK_TIME_DOMAIN_DEVICE_EXT = 0
    VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT = 1
    VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT = 2
    VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT = 3

  VkConservativeRasterizationModeEXT* {.size: int32.sizeof} = enum
    VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT = 0
    VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT = 1
    VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT = 2

  VkResolveModeFlagBits* {.size: int32.sizeof} = enum
    VK_RESOLVE_MODE_NONE = 0
    VK_RESOLVE_MODE_SAMPLE_ZERO_BIT = 1
    VK_RESOLVE_MODE_AVERAGE_BIT = 2
    VK_RESOLVE_MODE_MIN_BIT = 4
    VK_RESOLVE_MODE_MAX_BIT = 8

  VkResolveModeFlagBitsKHR* = VkResolveModeFlagBits

  VkDescriptorBindingFlagBits* {.size: int32.sizeof} = enum
    VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT = 1
    VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT = 2
    VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT = 4
    VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT = 8

  VkDescriptorBindingFlagBitsEXT* = VkDescriptorBindingFlagBits

  VkConditionalRenderingFlagBitsEXT* {.size: int32.sizeof} = enum
    VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT = 1

  VkSemaphoreType* {.size: int32.sizeof} = enum
    VK_SEMAPHORE_TYPE_BINARY = 0
    VK_SEMAPHORE_TYPE_TIMELINE = 1

  VkSemaphoreTypeKHR* = VkSemaphoreType

  VkGeometryFlagBitsKHR* {.size: int32.sizeof} = enum
    VK_GEOMETRY_OPAQUE_BIT_KHR = 1
    VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR = 2

  VkGeometryFlagBitsNV* = VkGeometryFlagBitsKHR

  VkGeometryInstanceFlagBitsKHR* {.size: int32.sizeof} = enum
    VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR = 1
    VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR = 2
    VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR = 4
    VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR = 8

  VkGeometryInstanceFlagBitsNV* = VkGeometryInstanceFlagBitsKHR

  VkBuildAccelerationStructureFlagBitsKHR* {.size: int32.sizeof} = enum
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR = 1
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR = 2
    VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR = 4
    VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR = 8
    VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR = 16

  VkBuildAccelerationStructureFlagBitsNV* = VkBuildAccelerationStructureFlagBitsKHR

  VkCopyAccelerationStructureModeKHR* {.size: int32.sizeof} = enum
    VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR = 0
    VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR = 1
    VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR = 2
    VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR = 3

  VkCopyAccelerationStructureModeNV* = VkCopyAccelerationStructureModeKHR

  VkAccelerationStructureTypeKHR* {.size: int32.sizeof} = enum
    VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR = 0
    VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR = 1

  VkAccelerationStructureTypeNV* = VkAccelerationStructureTypeKHR

  VkGeometryTypeKHR* {.size: int32.sizeof} = enum
    VK_GEOMETRY_TYPE_TRIANGLES_KHR = 0
    VK_GEOMETRY_TYPE_AABBS_KHR = 1
    VK_GEOMETRY_TYPE_INSTANCES_KHR = 1000150000

  VkGeometryTypeNV* = VkGeometryTypeKHR

  VkRayTracingShaderGroupTypeKHR* {.size: int32.sizeof} = enum
    VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR = 0
    VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR = 1
    VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR = 2

  VkRayTracingShaderGroupTypeNV* = VkRayTracingShaderGroupTypeKHR

  VkAccelerationStructureMemoryRequirementsTypeKHR* {.size: int32.sizeof} = enum
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_KHR = 0
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_KHR = 1
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_KHR = 2

  VkAccelerationStructureMemoryRequirementsTypeNV* = VkAccelerationStructureMemoryRequirementsTypeKHR

  VkAccelerationStructureBuildTypeKHR* {.size: int32.sizeof} = enum
    VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR = 0
    VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR = 1
    VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR = 2

  VkMemoryOverallocationBehaviorAMD* {.size: int32.sizeof} = enum
    VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD = 0
    VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD = 1
    VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD = 2

  VkScopeNV* {.size: int32.sizeof} = enum
    VK_SCOPE_DEVICE_NV = 1
    VK_SCOPE_WORKGROUP_NV = 2
    VK_SCOPE_SUBGROUP_NV = 3
    VK_SCOPE_QUEUE_FAMILY_NV = 5

  VkComponentTypeNV* {.size: int32.sizeof} = enum
    VK_COMPONENT_TYPE_FLOAT16_NV = 0
    VK_COMPONENT_TYPE_FLOAT32_NV = 1
    VK_COMPONENT_TYPE_FLOAT64_NV = 2
    VK_COMPONENT_TYPE_SINT8_NV = 3
    VK_COMPONENT_TYPE_SINT16_NV = 4
    VK_COMPONENT_TYPE_SINT32_NV = 5
    VK_COMPONENT_TYPE_SINT64_NV = 6
    VK_COMPONENT_TYPE_UINT8_NV = 7
    VK_COMPONENT_TYPE_UINT16_NV = 8
    VK_COMPONENT_TYPE_UINT32_NV = 9
    VK_COMPONENT_TYPE_UINT64_NV = 10

  VkDeviceDiagnosticsConfigFlagBitsNV* {.size: int32.sizeof} = enum
    VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV = 1
    VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV = 2
    VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV = 4

  VkPipelineCreationFeedbackFlagBitsEXT* {.size: int32.sizeof} = enum
    VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT = 1
    VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT = 2
    VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT = 4

  VkPerformanceCounterScopeKHR* {.size: int32.sizeof} = enum
    VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR = 0
    VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR = 1
    VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR = 2

  VkPerformanceCounterUnitKHR* {.size: int32.sizeof} = enum
    VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR = 0
    VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR = 1
    VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR = 2
    VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR = 3
    VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR = 4
    VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR = 5
    VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR = 6
    VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR = 7
    VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR = 8
    VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR = 9
    VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR = 10

  VkPerformanceCounterStorageKHR* {.size: int32.sizeof} = enum
    VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR = 0
    VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR = 1
    VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR = 2
    VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR = 3
    VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR = 4
    VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR = 5

  VkPerformanceCounterDescriptionFlagBitsKHR* {.size: int32.sizeof} = enum
    VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR = 1
    VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR = 2

  VkSemaphoreWaitFlagBits* {.size: int32.sizeof} = enum
    VK_SEMAPHORE_WAIT_ANY_BIT = 1

  VkSemaphoreWaitFlagBitsKHR* = VkSemaphoreWaitFlagBits

  VkPerformanceConfigurationTypeINTEL* {.size: int32.sizeof} = enum
    VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL = 0

  VkQueryPoolSamplingModeINTEL* {.size: int32.sizeof} = enum
    VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL = 0

  VkPerformanceOverrideTypeINTEL* {.size: int32.sizeof} = enum
    VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL = 0
    VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL = 1

  VkPerformanceParameterTypeINTEL* {.size: int32.sizeof} = enum
    VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL = 0
    VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL = 1

  VkPerformanceValueTypeINTEL* {.size: int32.sizeof} = enum
    VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL = 0
    VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL = 1
    VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL = 2
    VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL = 3
    VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL = 4

  VkLineRasterizationModeEXT* {.size: int32.sizeof} = enum
    VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT = 0
    VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT = 1
    VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT = 2
    VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT = 3

  VkToolPurposeFlagBitsEXT* {.size: int32.sizeof} = enum
    VK_TOOL_PURPOSE_VALIDATION_BIT_EXT = 1
    VK_TOOL_PURPOSE_PROFILING_BIT_EXT = 2
    VK_TOOL_PURPOSE_TRACING_BIT_EXT = 4
    VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT = 8
    VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT = 16
    VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT = 32
    VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT = 64

  VkColorSpaceKHR* {.size: int32.sizeof} = enum
    VK_COLOR_SPACE_SRGB_NONLINEAR_KHR = 0
    VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT = 1000104001
    VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT = 1000104002
    VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT = 1000104003
    VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT = 1000104004
    VK_COLOR_SPACE_BT709_LINEAR_EXT = 1000104005
    VK_COLOR_SPACE_BT709_NONLINEAR_EXT = 1000104006
    VK_COLOR_SPACE_BT2020_LINEAR_EXT = 1000104007
    VK_COLOR_SPACE_HDR10_ST2084_EXT = 1000104008
    VK_COLOR_SPACE_DOLBYVISION_EXT = 1000104009
    VK_COLOR_SPACE_HDR10_HLG_EXT = 1000104010
    VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT = 1000104011
    VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT = 1000104012
    VK_COLOR_SPACE_PASS_THROUGH_EXT = 1000104013
    VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT = 1000104014
    VK_COLOR_SPACE_DISPLAY_NATIVE_AMD = 1000213000

  VkCompositeAlphaFlagBitsKHR* {.size: int32.sizeof} = enum
    VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR = 1
    VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR = 2
    VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR = 4
    VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR = 8

  VkDisplayPlaneAlphaFlagBitsKHR* {.size: int32.sizeof} = enum
    VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR = 1
    VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR = 2
    VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR = 4
    VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR = 8

  VkPresentModeKHR* {.size: int32.sizeof} = enum
    VK_PRESENT_MODE_IMMEDIATE_KHR = 0
    VK_PRESENT_MODE_MAILBOX_KHR = 1
    VK_PRESENT_MODE_FIFO_KHR = 2
    VK_PRESENT_MODE_FIFO_RELAXED_KHR = 3
    VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR = 1000111000
    VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR = 1000111001

  VkSurfaceTransformFlagBitsKHR* {.size: int32.sizeof} = enum
    VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR = 1
    VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR = 2
    VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR = 4
    VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR = 8
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR = 16
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR = 32
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR = 64
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR = 128
    VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR = 256

  VkDebugReportFlagBitsEXT* {.size: int32.sizeof} = enum
    VK_DEBUG_REPORT_INFORMATION_BIT_EXT = 1
    VK_DEBUG_REPORT_WARNING_BIT_EXT = 2
    VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT = 4
    VK_DEBUG_REPORT_ERROR_BIT_EXT = 8
    VK_DEBUG_REPORT_DEBUG_BIT_EXT = 16

  VkDebugReportObjectTypeEXT* {.size: int32.sizeof} = enum
    VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT = 0
    VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT = 1
    VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT = 2
    VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT = 3
    VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT = 4
    VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT = 5
    VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT = 6
    VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT = 7
    VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT = 8
    VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT = 9
    VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT = 10
    VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT = 11
    VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT = 12
    VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT = 13
    VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT = 14
    VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT = 15
    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT = 16
    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT = 17
    VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT = 18
    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT = 19
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT = 20
    VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT = 21
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT = 22
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT = 23
    VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT = 24
    VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT = 25
    VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT = 26
    VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT = 27
    VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT = 28
    VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT = 29
    VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT = 30
    VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT = 33
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT = 1000085000
    VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT = 1000156000
    VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT = 1000165000

  VkRasterizationOrderAMD* {.size: int32.sizeof} = enum
    VK_RASTERIZATION_ORDER_STRICT_AMD = 0
    VK_RASTERIZATION_ORDER_RELAXED_AMD = 1

  VkExternalMemoryHandleTypeFlagBitsNV* {.size: int32.sizeof} = enum
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV = 1
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV = 2
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV = 4
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV = 8

  VkExternalMemoryFeatureFlagBitsNV* {.size: int32.sizeof} = enum
    VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV = 1
    VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV = 2
    VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV = 4

  VkValidationCheckEXT* {.size: int32.sizeof} = enum
    VK_VALIDATION_CHECK_ALL_EXT = 0
    VK_VALIDATION_CHECK_SHADERS_EXT = 1

  VkValidationFeatureEnableEXT* {.size: int32.sizeof} = enum
    VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT = 0
    VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT = 1
    VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT = 2
    VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT = 3
    VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT = 4

  VkValidationFeatureDisableEXT* {.size: int32.sizeof} = enum
    VK_VALIDATION_FEATURE_DISABLE_ALL_EXT = 0
    VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT = 1
    VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT = 2
    VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT = 3
    VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT = 4
    VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT = 5
    VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT = 6

  VkExternalMemoryHandleTypeFlagBits* {.size: int32.sizeof} = enum
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT = 1
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT = 8
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT = 16
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT = 32
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT = 64
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT = 128
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT = 256
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT = 512
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID = 1024

  VkExternalMemoryHandleTypeFlagBitsKHR* = VkExternalMemoryHandleTypeFlagBits

  VkExternalMemoryFeatureFlagBits* {.size: int32.sizeof} = enum
    VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT = 1
    VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT = 2
    VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT = 4

  VkExternalMemoryFeatureFlagBitsKHR* = VkExternalMemoryFeatureFlagBits

  VkExternalSemaphoreHandleTypeFlagBits* {.size: int32.sizeof} = enum
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT = 1
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT = 8
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT = 16

  VkExternalSemaphoreHandleTypeFlagBitsKHR* = VkExternalSemaphoreHandleTypeFlagBits

  VkExternalSemaphoreFeatureFlagBits* {.size: int32.sizeof} = enum
    VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT = 1
    VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT = 2

  VkExternalSemaphoreFeatureFlagBitsKHR* = VkExternalSemaphoreFeatureFlagBits

  VkSemaphoreImportFlagBits* {.size: int32.sizeof} = enum
    VK_SEMAPHORE_IMPORT_TEMPORARY_BIT = 1

  VkSemaphoreImportFlagBitsKHR* = VkSemaphoreImportFlagBits

  VkExternalFenceHandleTypeFlagBits* {.size: int32.sizeof} = enum
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT = 1
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4
    VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT = 8

  VkExternalFenceHandleTypeFlagBitsKHR* = VkExternalFenceHandleTypeFlagBits

  VkExternalFenceFeatureFlagBits* {.size: int32.sizeof} = enum
    VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT = 1
    VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT = 2

  VkExternalFenceFeatureFlagBitsKHR* = VkExternalFenceFeatureFlagBits

  VkFenceImportFlagBits* {.size: int32.sizeof} = enum
    VK_FENCE_IMPORT_TEMPORARY_BIT = 1

  VkFenceImportFlagBitsKHR* = VkFenceImportFlagBits

  VkSurfaceCounterFlagBitsEXT* {.size: int32.sizeof} = enum
    VK_SURFACE_COUNTER_VBLANK_EXT = 1

  VkDisplayPowerStateEXT* {.size: int32.sizeof} = enum
    VK_DISPLAY_POWER_STATE_OFF_EXT = 0
    VK_DISPLAY_POWER_STATE_SUSPEND_EXT = 1
    VK_DISPLAY_POWER_STATE_ON_EXT = 2

  VkDeviceEventTypeEXT* {.size: int32.sizeof} = enum
    VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT = 0

  VkDisplayEventTypeEXT* {.size: int32.sizeof} = enum
    VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT = 0

  VkPeerMemoryFeatureFlagBits* {.size: int32.sizeof} = enum
    VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT = 1
    VK_PEER_MEMORY_FEATURE_COPY_DST_BIT = 2
    VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT = 4
    VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT = 8

  VkPeerMemoryFeatureFlagBitsKHR* = VkPeerMemoryFeatureFlagBits

  VkMemoryAllocateFlagBits* {.size: int32.sizeof} = enum
    VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT = 1
    VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT = 2
    VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = 4

  VkMemoryAllocateFlagBitsKHR* = VkMemoryAllocateFlagBits

  VkDeviceGroupPresentModeFlagBitsKHR* {.size: int32.sizeof} = enum
    VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR = 1
    VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR = 2
    VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR = 4
    VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR = 8

  VkSwapchainCreateFlagBitsKHR* {.size: int32.sizeof} = enum
    VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = 1
    VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR = 2
    VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR = 4

  VkSubgroupFeatureFlagBits* {.size: int32.sizeof} = enum
    VK_SUBGROUP_FEATURE_BASIC_BIT = 1
    VK_SUBGROUP_FEATURE_VOTE_BIT = 2
    VK_SUBGROUP_FEATURE_ARITHMETIC_BIT = 4
    VK_SUBGROUP_FEATURE_BALLOT_BIT = 8
    VK_SUBGROUP_FEATURE_SHUFFLE_BIT = 16
    VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT = 32
    VK_SUBGROUP_FEATURE_CLUSTERED_BIT = 64
    VK_SUBGROUP_FEATURE_QUAD_BIT = 128
    VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV = 256

  VkTessellationDomainOrigin* {.size: int32.sizeof} = enum
    VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT = 0
    VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT = 1

  VkTessellationDomainOriginKHR* = VkTessellationDomainOrigin

  VkSamplerYcbcrModelConversion* {.size: int32.sizeof} = enum
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY = 0
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY = 1
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709 = 2
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601 = 3
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020 = 4

  VkSamplerYcbcrModelConversionKHR* = VkSamplerYcbcrModelConversion

  VkSamplerYcbcrRange* {.size: int32.sizeof} = enum
    VK_SAMPLER_YCBCR_RANGE_ITU_FULL = 0
    VK_SAMPLER_YCBCR_RANGE_ITU_NARROW = 1

  VkSamplerYcbcrRangeKHR* = VkSamplerYcbcrRange

  VkChromaLocation* {.size: int32.sizeof} = enum
    VK_CHROMA_LOCATION_COSITED_EVEN = 0
    VK_CHROMA_LOCATION_MIDPOINT = 1

  VkChromaLocationKHR* = VkChromaLocation

  VkSamplerReductionMode* {.size: int32.sizeof} = enum
    VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE = 0
    VK_SAMPLER_REDUCTION_MODE_MIN = 1
    VK_SAMPLER_REDUCTION_MODE_MAX = 2

  VkSamplerReductionModeEXT* = VkSamplerReductionMode

  VkBlendOverlapEXT* {.size: int32.sizeof} = enum
    VK_BLEND_OVERLAP_UNCORRELATED_EXT = 0
    VK_BLEND_OVERLAP_DISJOINT_EXT = 1
    VK_BLEND_OVERLAP_CONJOINT_EXT = 2

  VkDebugUtilsMessageSeverityFlagBitsEXT* {.size: int32.sizeof} = enum
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT = 1
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT = 16
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT = 256
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT = 4096

  VkDebugUtilsMessageTypeFlagBitsEXT* {.size: int32.sizeof} = enum
    VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT = 1
    VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT = 2
    VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT = 4

  VkFullScreenExclusiveEXT* {.size: int32.sizeof} = enum
    VK_FULL_SCREEN_EXCLUSIVE_DEFAULT_EXT = 0
    VK_FULL_SCREEN_EXCLUSIVE_ALLOWED_EXT = 1
    VK_FULL_SCREEN_EXCLUSIVE_DISALLOWED_EXT = 2
    VK_FULL_SCREEN_EXCLUSIVE_APPLICATION_CONTROLLED_EXT = 3

  VkShaderFloatControlsIndependence* {.size: int32.sizeof} = enum
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY = 0
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL = 1
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE = 2

  VkShaderFloatControlsIndependenceKHR* = VkShaderFloatControlsIndependence

  VkVendorId* {.size: int32.sizeof} = enum
    VK_VENDOR_ID_VIV = 0x10001
    VK_VENDOR_ID_VSI = 0x10002
    VK_VENDOR_ID_KAZAN = 0x10003
    VK_VENDOR_ID_CODEPLAY = 0x10004
    VK_VENDOR_ID_MESA = 0x10005

  VkDriverId* {.size: int32.sizeof} = enum
    VK_DRIVER_ID_AMD_PROPRIETARY = 1
    VK_DRIVER_ID_AMD_OPEN_SOURCE = 2
    VK_DRIVER_ID_MESA_RADV = 3
    VK_DRIVER_ID_NVIDIA_PROPRIETARY = 4
    VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS = 5
    VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA = 6
    VK_DRIVER_ID_IMAGINATION_PROPRIETARY = 7
    VK_DRIVER_ID_QUALCOMM_PROPRIETARY = 8
    VK_DRIVER_ID_ARM_PROPRIETARY = 9
    VK_DRIVER_ID_GOOGLE_SWIFTSHADER = 10
    VK_DRIVER_ID_GGP_PROPRIETARY = 11
    VK_DRIVER_ID_BROADCOM_PROPRIETARY = 12
    VK_DRIVER_ID_MESA_LLVMPIPE = 13
    VK_DRIVER_ID_MOLTENVK = 14

  VkDriverIdKHR* = VkDriverId

  VkShadingRatePaletteEntryNV* {.size: int32.sizeof} = enum
    VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV = 0
    VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV = 1
    VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV = 2
    VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV = 3
    VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV = 4
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV = 5
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV = 6
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV = 7
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV = 8
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV = 9
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV = 10
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV = 11

  VkCoarseSampleOrderTypeNV* {.size: int32.sizeof} = enum
    VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV = 0
    VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV = 1
    VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV = 2
    VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV = 3

  VkPipelineExecutableStatisticFormatKHR* {.size: int32.sizeof} = enum
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR = 0
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR = 1
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR = 2
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR = 3

  PFN_vkInternalAllocationNotification* = proc(
    pUserData: pointer,
    size: uint,
    allocationType: VkInternalAllocationType,
    allocationScope: VkSystemAllocationScope,
   ): void {.cdecl.}

  PFN_vkInternalFreeNotification* = proc(
    pUserData: pointer,
    size: uint,
    allocationType: VkInternalAllocationType,
    allocationScope: VkSystemAllocationScope,
   ): void {.cdecl.}

  PFN_vkReallocationFunction* = proc(
    pUserData: pointer,
    pOriginal: pointer,
    size: uint,
    alignment: uint,
    allocationScope: VkSystemAllocationScope,
   ): pointer {.cdecl.}

  PFN_vkAllocationFunction* = proc(
    pUserData: pointer,
    size: uint,
    alignment: uint,
    allocationScope: VkSystemAllocationScope,
   ): pointer {.cdecl.}

  PFN_vkFreeFunction* = proc(
    pUserData: pointer,
    pMemory: pointer,
   ): void {.cdecl.}

  PFN_vkVoidFunction* = proc(
   ): void {.cdecl.}

  VkBaseOutStructure*  = object
    sType*: VkStructureType
    pNext*: ptr VkBaseOutStructure

  VkBaseInStructure*  = object
    sType*: VkStructureType
    pNext*: ptr VkBaseInStructure

  VkOffset2D*  = object
    x*: int32
    y*: int32

  VkOffset3D*  = object
    x*: int32
    y*: int32
    z*: int32

  VkExtent2D*  = object
    width*: uint32
    height*: uint32

  VkExtent3D*  = object
    width*: uint32
    height*: uint32
    depth*: uint32

  VkViewport*  = object
    x*: float32
    y*: float32
    width*: float32
    height*: float32
    minDepth*: float32
    maxDepth*: float32

  VkRect2D*  = object
    offset*: VkOffset2D
    extent*: VkExtent2D

  VkClearRect*  = object
    rect*: VkRect2D
    baseArrayLayer*: uint32
    layerCount*: uint32

  VkComponentMapping*  = object
    r*: VkComponentSwizzle
    g*: VkComponentSwizzle
    b*: VkComponentSwizzle
    a*: VkComponentSwizzle

  VkExtensionProperties*  = object
    extensionName*: array[VK_MAX_EXTENSION_NAME_SIZE,char]
    specVersion*: uint32

  VkLayerProperties*  = object
    layerName*: array[VK_MAX_EXTENSION_NAME_SIZE,char]
    specVersion*: uint32
    implementationVersion*: uint32
    description*: array[VK_MAX_DESCRIPTION_SIZE,char]

  VkApplicationInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    pApplicationName*: cstring
    applicationVersion*: uint32
    pEngineName*: cstring
    engineVersion*: uint32
    apiVersion*: uint32

  VkAllocationCallbacks*  = object
    pUserData*: pointer
    pfnAllocation*: PFN_vkAllocationFunction
    pfnReallocation*: PFN_vkReallocationFunction
    pfnFree*: PFN_vkFreeFunction
    pfnInternalAllocation*: PFN_vkInternalAllocationNotification
    pfnInternalFree*: PFN_vkInternalFreeNotification

  VkDescriptorImageInfo*  = object
    sampler*: VkSampler
    imageView*: VkImageView
    imageLayout*: VkImageLayout

  VkCopyDescriptorSet*  = object
    sType*: VkStructureType
    pNext*: pointer
    srcSet*: VkDescriptorSet
    srcBinding*: uint32
    srcArrayElement*: uint32
    dstSet*: VkDescriptorSet
    dstBinding*: uint32
    dstArrayElement*: uint32
    descriptorCount*: uint32

  VkDescriptorPoolSize*  = object
    `type`*: VkDescriptorType
    descriptorCount*: uint32

  VkDescriptorSetAllocateInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    descriptorPool*: VkDescriptorPool
    descriptorSetCount*: uint32
    pSetLayouts*: ptr VkDescriptorSetLayout

  VkSpecializationMapEntry*  = object
    constantID*: uint32
    offset*: uint32
    size*: uint

  VkSpecializationInfo*  = object
    mapEntryCount*: uint32
    pMapEntries*: ptr VkSpecializationMapEntry
    dataSize*: uint
    pData*: pointer

  VkVertexInputBindingDescription*  = object
    binding*: uint32
    stride*: uint32
    inputRate*: VkVertexInputRate

  VkVertexInputAttributeDescription*  = object
    location*: uint32
    binding*: uint32
    format*: VkFormat
    offset*: uint32

  VkStencilOpState*  = object
    failOp*: VkStencilOp
    passOp*: VkStencilOp
    depthFailOp*: VkStencilOp
    compareOp*: VkCompareOp
    compareMask*: uint32
    writeMask*: uint32
    reference*: uint32

  VkCommandBufferAllocateInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    commandPool*: VkCommandPool
    level*: VkCommandBufferLevel
    commandBufferCount*: uint32

  VkClearColorValue* {.union.} = object
    float32*: array[4,float32]
    int32*: array[4,int32]
    uint32*: array[4,uint32]

  VkClearDepthStencilValue*  = object
    depth*: float32
    stencil*: uint32

  VkClearValue* {.union.} = object
    color*: VkClearColorValue
    depthStencil*: VkClearDepthStencilValue

  VkAttachmentReference*  = object
    attachment*: uint32
    layout*: VkImageLayout

  VkDrawIndirectCommand*  = object
    vertexCount*: uint32
    instanceCount*: uint32
    firstVertex*: uint32
    firstInstance*: uint32

  VkDrawIndexedIndirectCommand*  = object
    indexCount*: uint32
    instanceCount*: uint32
    firstIndex*: uint32
    vertexOffset*: int32
    firstInstance*: uint32

  VkDispatchIndirectCommand*  = object
    x*: uint32
    y*: uint32
    z*: uint32

  VkDisplayPlanePropertiesKHR*  = object
    currentDisplay*: VkDisplayKHR
    currentStackIndex*: uint32

  VkDisplayModeParametersKHR*  = object
    visibleRegion*: VkExtent2D
    refreshRate*: uint32

  VkDisplayModePropertiesKHR*  = object
    displayMode*: VkDisplayModeKHR
    parameters*: VkDisplayModeParametersKHR

  VkSurfaceFormatKHR*  = object
    format*: VkFormat
    colorSpace*: VkColorSpaceKHR

  VkPresentInfoKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    waitSemaphoreCount*: uint32
    pWaitSemaphores*: ptr VkSemaphore
    swapchainCount*: uint32
    pSwapchains*: ptr VkSwapchainKHR
    pImageIndices*: ptr uint32
    pResults*: ptr VkResult

  VkValidationFlagsEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    disabledValidationCheckCount*: uint32
    pDisabledValidationChecks*: ptr VkValidationCheckEXT

  VkValidationFeaturesEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    enabledValidationFeatureCount*: uint32
    pEnabledValidationFeatures*: ptr VkValidationFeatureEnableEXT
    disabledValidationFeatureCount*: uint32
    pDisabledValidationFeatures*: ptr VkValidationFeatureDisableEXT

  VkPipelineRasterizationStateRasterizationOrderAMD*  = object
    sType*: VkStructureType
    pNext*: pointer
    rasterizationOrder*: VkRasterizationOrderAMD

  VkDebugMarkerObjectNameInfoEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    objectType*: VkDebugReportObjectTypeEXT
    `object`*: uint64
    pObjectName*: cstring

  VkDebugMarkerObjectTagInfoEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    objectType*: VkDebugReportObjectTypeEXT
    `object`*: uint64
    tagName*: uint64
    tagSize*: uint
    pTag*: pointer

  VkDebugMarkerMarkerInfoEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    pMarkerName*: cstring
    color*: array[4,float32]

  VkDedicatedAllocationMemoryAllocateInfoNV*  = object
    sType*: VkStructureType
    pNext*: pointer
    image*: VkImage
    buffer*: VkBuffer

  VkExportMemoryWin32HandleInfoNV*  = object
    sType*: VkStructureType
    pNext*: pointer
    pAttributes*: ptr SECURITY_ATTRIBUTES
    dwAccess*: DWORD

  VkWin32KeyedMutexAcquireReleaseInfoNV*  = object
    sType*: VkStructureType
    pNext*: pointer
    acquireCount*: uint32
    pAcquireSyncs*: ptr VkDeviceMemory
    pAcquireKeys*: ptr uint64
    pAcquireTimeoutMilliseconds*: ptr uint32
    releaseCount*: uint32
    pReleaseSyncs*: ptr VkDeviceMemory
    pReleaseKeys*: ptr uint64

  VkDevicePrivateDataCreateInfoEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    privateDataSlotRequestCount*: uint32

  VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV*  = object
    sType*: VkStructureType
    pNext*: pointer
    maxGraphicsShaderGroupCount*: uint32
    maxIndirectSequenceCount*: uint32
    maxIndirectCommandsTokenCount*: uint32
    maxIndirectCommandsStreamCount*: uint32
    maxIndirectCommandsTokenOffset*: uint32
    maxIndirectCommandsStreamStride*: uint32
    minSequencesCountBufferOffsetAlignment*: uint32
    minSequencesIndexBufferOffsetAlignment*: uint32
    minIndirectCommandsBufferOffsetAlignment*: uint32

  VkBindShaderGroupIndirectCommandNV*  = object
    groupIndex*: uint32

  VkSetStateFlagsIndirectCommandNV*  = object
    data*: uint32

  VkGeneratedCommandsMemoryRequirementsInfoNV*  = object
    sType*: VkStructureType
    pNext*: pointer
    pipelineBindPoint*: VkPipelineBindPoint
    pipeline*: VkPipeline
    indirectCommandsLayout*: VkIndirectCommandsLayoutNV
    maxSequencesCount*: uint32

  VkPhysicalDevicePushDescriptorPropertiesKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    maxPushDescriptors*: uint32

  VkConformanceVersion*  = object
    major*: uint8
    minor*: uint8
    subminor*: uint8
    patch*: uint8

  VkConformanceVersionKHR* = VkConformanceVersion

  VkPhysicalDeviceDriverProperties*  = object
    sType*: VkStructureType
    pNext*: pointer
    driverID*: VkDriverId
    driverName*: array[VK_MAX_DRIVER_NAME_SIZE,char]
    driverInfo*: array[VK_MAX_DRIVER_INFO_SIZE,char]
    conformanceVersion*: VkConformanceVersion

  VkPhysicalDeviceDriverPropertiesKHR* = VkPhysicalDeviceDriverProperties

  VkRectLayerKHR*  = object
    offset*: VkOffset2D
    extent*: VkExtent2D
    layer*: uint32

  VkPhysicalDeviceExternalImageFormatInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    handleType*: VkExternalMemoryHandleTypeFlagBits

  VkPhysicalDeviceExternalImageFormatInfoKHR* = VkPhysicalDeviceExternalImageFormatInfo

  VkImportMemoryWin32HandleInfoKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    handleType*: VkExternalMemoryHandleTypeFlagBits
    handle*: HANDLE
    name*: LPCWSTR

  VkExportMemoryWin32HandleInfoKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    pAttributes*: ptr SECURITY_ATTRIBUTES
    dwAccess*: DWORD
    name*: LPCWSTR

  VkMemoryWin32HandlePropertiesKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    memoryTypeBits*: uint32

  VkMemoryGetWin32HandleInfoKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    memory*: VkDeviceMemory
    handleType*: VkExternalMemoryHandleTypeFlagBits

  VkImportMemoryFdInfoKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    handleType*: VkExternalMemoryHandleTypeFlagBits
    fd*: cint

  VkMemoryFdPropertiesKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    memoryTypeBits*: uint32

  VkMemoryGetFdInfoKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    memory*: VkDeviceMemory
    handleType*: VkExternalMemoryHandleTypeFlagBits

  VkWin32KeyedMutexAcquireReleaseInfoKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    acquireCount*: uint32
    pAcquireSyncs*: ptr VkDeviceMemory
    pAcquireKeys*: ptr uint64
    pAcquireTimeouts*: ptr uint32
    releaseCount*: uint32
    pReleaseSyncs*: ptr VkDeviceMemory
    pReleaseKeys*: ptr uint64

  VkPhysicalDeviceExternalSemaphoreInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    handleType*: VkExternalSemaphoreHandleTypeFlagBits

  VkPhysicalDeviceExternalSemaphoreInfoKHR* = VkPhysicalDeviceExternalSemaphoreInfo

  VkExportSemaphoreWin32HandleInfoKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    pAttributes*: ptr SECURITY_ATTRIBUTES
    dwAccess*: DWORD
    name*: LPCWSTR

  VkD3D12FenceSubmitInfoKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    waitSemaphoreValuesCount*: uint32
    pWaitSemaphoreValues*: ptr uint64
    signalSemaphoreValuesCount*: uint32
    pSignalSemaphoreValues*: ptr uint64

  VkSemaphoreGetWin32HandleInfoKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    semaphore*: VkSemaphore
    handleType*: VkExternalSemaphoreHandleTypeFlagBits

  VkSemaphoreGetFdInfoKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    semaphore*: VkSemaphore
    handleType*: VkExternalSemaphoreHandleTypeFlagBits

  VkPhysicalDeviceExternalFenceInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    handleType*: VkExternalFenceHandleTypeFlagBits

  VkPhysicalDeviceExternalFenceInfoKHR* = VkPhysicalDeviceExternalFenceInfo

  VkExportFenceWin32HandleInfoKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    pAttributes*: ptr SECURITY_ATTRIBUTES
    dwAccess*: DWORD
    name*: LPCWSTR

  VkFenceGetWin32HandleInfoKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    fence*: VkFence
    handleType*: VkExternalFenceHandleTypeFlagBits

  VkFenceGetFdInfoKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    fence*: VkFence
    handleType*: VkExternalFenceHandleTypeFlagBits

  VkPhysicalDeviceMultiviewProperties*  = object
    sType*: VkStructureType
    pNext*: pointer
    maxMultiviewViewCount*: uint32
    maxMultiviewInstanceIndex*: uint32

  VkPhysicalDeviceMultiviewPropertiesKHR* = VkPhysicalDeviceMultiviewProperties

  VkRenderPassMultiviewCreateInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    subpassCount*: uint32
    pViewMasks*: ptr uint32
    dependencyCount*: uint32
    pViewOffsets*: ptr int32
    correlationMaskCount*: uint32
    pCorrelationMasks*: ptr uint32

  VkRenderPassMultiviewCreateInfoKHR* = VkRenderPassMultiviewCreateInfo

  VkDisplayPowerInfoEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    powerState*: VkDisplayPowerStateEXT

  VkDeviceEventInfoEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    deviceEvent*: VkDeviceEventTypeEXT

  VkDisplayEventInfoEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    displayEvent*: VkDisplayEventTypeEXT

  VkBindBufferMemoryDeviceGroupInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    deviceIndexCount*: uint32
    pDeviceIndices*: ptr uint32

  VkBindBufferMemoryDeviceGroupInfoKHR* = VkBindBufferMemoryDeviceGroupInfo

  VkBindImageMemoryDeviceGroupInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    deviceIndexCount*: uint32
    pDeviceIndices*: ptr uint32
    splitInstanceBindRegionCount*: uint32
    pSplitInstanceBindRegions*: ptr VkRect2D

  VkBindImageMemoryDeviceGroupInfoKHR* = VkBindImageMemoryDeviceGroupInfo

  VkDeviceGroupRenderPassBeginInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    deviceMask*: uint32
    deviceRenderAreaCount*: uint32
    pDeviceRenderAreas*: ptr VkRect2D

  VkDeviceGroupRenderPassBeginInfoKHR* = VkDeviceGroupRenderPassBeginInfo

  VkDeviceGroupCommandBufferBeginInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    deviceMask*: uint32

  VkDeviceGroupCommandBufferBeginInfoKHR* = VkDeviceGroupCommandBufferBeginInfo

  VkDeviceGroupSubmitInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    waitSemaphoreCount*: uint32
    pWaitSemaphoreDeviceIndices*: ptr uint32
    commandBufferCount*: uint32
    pCommandBufferDeviceMasks*: ptr uint32
    signalSemaphoreCount*: uint32
    pSignalSemaphoreDeviceIndices*: ptr uint32

  VkDeviceGroupSubmitInfoKHR* = VkDeviceGroupSubmitInfo

  VkDeviceGroupBindSparseInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    resourceDeviceIndex*: uint32
    memoryDeviceIndex*: uint32

  VkDeviceGroupBindSparseInfoKHR* = VkDeviceGroupBindSparseInfo

  VkImageSwapchainCreateInfoKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    swapchain*: VkSwapchainKHR

  VkBindImageMemorySwapchainInfoKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    swapchain*: VkSwapchainKHR
    imageIndex*: uint32

  VkAcquireNextImageInfoKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    swapchain*: VkSwapchainKHR
    timeout*: uint64
    semaphore*: VkSemaphore
    fence*: VkFence
    deviceMask*: uint32

  VkDeviceGroupPresentInfoKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    swapchainCount*: uint32
    pDeviceMasks*: ptr uint32
    mode*: VkDeviceGroupPresentModeFlagBitsKHR

  VkDeviceGroupDeviceCreateInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    physicalDeviceCount*: uint32
    pPhysicalDevices*: ptr VkPhysicalDevice

  VkDeviceGroupDeviceCreateInfoKHR* = VkDeviceGroupDeviceCreateInfo

  VkDescriptorUpdateTemplateEntry*  = object
    dstBinding*: uint32
    dstArrayElement*: uint32
    descriptorCount*: uint32
    descriptorType*: VkDescriptorType
    offset*: uint
    stride*: uint

  VkDescriptorUpdateTemplateEntryKHR* = VkDescriptorUpdateTemplateEntry

  VkXYColorEXT*  = object
    x*: float32
    y*: float32

  VkHdrMetadataEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    displayPrimaryRed*: VkXYColorEXT
    displayPrimaryGreen*: VkXYColorEXT
    displayPrimaryBlue*: VkXYColorEXT
    whitePoint*: VkXYColorEXT
    maxLuminance*: float32
    minLuminance*: float32
    maxContentLightLevel*: float32
    maxFrameAverageLightLevel*: float32

  VkRefreshCycleDurationGOOGLE*  = object
    refreshDuration*: uint64

  VkPastPresentationTimingGOOGLE*  = object
    presentID*: uint32
    desiredPresentTime*: uint64
    actualPresentTime*: uint64
    earliestPresentTime*: uint64
    presentMargin*: uint64

  VkPresentTimeGOOGLE*  = object
    presentID*: uint32
    desiredPresentTime*: uint64

  VkViewportWScalingNV*  = object
    xcoeff*: float32
    ycoeff*: float32

  VkViewportSwizzleNV*  = object
    x*: VkViewportCoordinateSwizzleNV
    y*: VkViewportCoordinateSwizzleNV
    z*: VkViewportCoordinateSwizzleNV
    w*: VkViewportCoordinateSwizzleNV

  VkPhysicalDeviceDiscardRectanglePropertiesEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    maxDiscardRectangles*: uint32

  VkPhysicalDeviceSurfaceInfo2KHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    surface*: VkSurfaceKHR

  VkSurfaceFormat2KHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    surfaceFormat*: VkSurfaceFormatKHR

  VkDisplayPlaneProperties2KHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    displayPlaneProperties*: VkDisplayPlanePropertiesKHR

  VkDisplayModeProperties2KHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    displayModeProperties*: VkDisplayModePropertiesKHR

  VkDisplayPlaneInfo2KHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    mode*: VkDisplayModeKHR
    planeIndex*: uint32

  VkBufferMemoryRequirementsInfo2*  = object
    sType*: VkStructureType
    pNext*: pointer
    buffer*: VkBuffer

  VkBufferMemoryRequirementsInfo2KHR* = VkBufferMemoryRequirementsInfo2

  VkImageMemoryRequirementsInfo2*  = object
    sType*: VkStructureType
    pNext*: pointer
    image*: VkImage

  VkImageMemoryRequirementsInfo2KHR* = VkImageMemoryRequirementsInfo2

  VkImageSparseMemoryRequirementsInfo2*  = object
    sType*: VkStructureType
    pNext*: pointer
    image*: VkImage

  VkImageSparseMemoryRequirementsInfo2KHR* = VkImageSparseMemoryRequirementsInfo2

  VkPhysicalDevicePointClippingProperties*  = object
    sType*: VkStructureType
    pNext*: pointer
    pointClippingBehavior*: VkPointClippingBehavior

  VkPhysicalDevicePointClippingPropertiesKHR* = VkPhysicalDevicePointClippingProperties

  VkMemoryDedicatedAllocateInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    image*: VkImage
    buffer*: VkBuffer

  VkMemoryDedicatedAllocateInfoKHR* = VkMemoryDedicatedAllocateInfo

  VkPipelineTessellationDomainOriginStateCreateInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    domainOrigin*: VkTessellationDomainOrigin

  VkPipelineTessellationDomainOriginStateCreateInfoKHR* = VkPipelineTessellationDomainOriginStateCreateInfo

  VkSamplerYcbcrConversionInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    conversion*: VkSamplerYcbcrConversion

  VkSamplerYcbcrConversionInfoKHR* = VkSamplerYcbcrConversionInfo

  VkBindImagePlaneMemoryInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    planeAspect*: VkImageAspectFlagBits

  VkBindImagePlaneMemoryInfoKHR* = VkBindImagePlaneMemoryInfo

  VkImagePlaneMemoryRequirementsInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    planeAspect*: VkImageAspectFlagBits

  VkImagePlaneMemoryRequirementsInfoKHR* = VkImagePlaneMemoryRequirementsInfo

  VkSamplerYcbcrConversionImageFormatProperties*  = object
    sType*: VkStructureType
    pNext*: pointer
    combinedImageSamplerDescriptorCount*: uint32

  VkSamplerYcbcrConversionImageFormatPropertiesKHR* = VkSamplerYcbcrConversionImageFormatProperties

  VkSampleLocationEXT*  = object
    x*: float32
    y*: float32

  VkSampleLocationsInfoEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    sampleLocationsPerPixel*: VkSampleCountFlagBits
    sampleLocationGridSize*: VkExtent2D
    sampleLocationsCount*: uint32
    pSampleLocations*: ptr VkSampleLocationEXT

  VkAttachmentSampleLocationsEXT*  = object
    attachmentIndex*: uint32
    sampleLocationsInfo*: VkSampleLocationsInfoEXT

  VkSubpassSampleLocationsEXT*  = object
    subpassIndex*: uint32
    sampleLocationsInfo*: VkSampleLocationsInfoEXT

  VkRenderPassSampleLocationsBeginInfoEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    attachmentInitialSampleLocationsCount*: uint32
    pAttachmentInitialSampleLocations*: ptr VkAttachmentSampleLocationsEXT
    postSubpassSampleLocationsCount*: uint32
    pPostSubpassSampleLocations*: ptr VkSubpassSampleLocationsEXT

  VkMultisamplePropertiesEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    maxSampleLocationGridSize*: VkExtent2D

  VkSamplerReductionModeCreateInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    reductionMode*: VkSamplerReductionMode

  VkSamplerReductionModeCreateInfoEXT* = VkSamplerReductionModeCreateInfo

  VkPhysicalDeviceInlineUniformBlockPropertiesEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    maxInlineUniformBlockSize*: uint32
    maxPerStageDescriptorInlineUniformBlocks*: uint32
    maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks*: uint32
    maxDescriptorSetInlineUniformBlocks*: uint32
    maxDescriptorSetUpdateAfterBindInlineUniformBlocks*: uint32

  VkWriteDescriptorSetInlineUniformBlockEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    dataSize*: uint32
    pData*: pointer

  VkDescriptorPoolInlineUniformBlockCreateInfoEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    maxInlineUniformBlockBindings*: uint32

  VkImageFormatListCreateInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    viewFormatCount*: uint32
    pViewFormats*: ptr VkFormat

  VkImageFormatListCreateInfoKHR* = VkImageFormatListCreateInfo

  VkShaderModuleValidationCacheCreateInfoEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    validationCache*: VkValidationCacheEXT

  VkShaderResourceUsageAMD*  = object
    numUsedVgprs*: uint32
    numUsedSgprs*: uint32
    ldsSizePerLocalWorkGroup*: uint32
    ldsUsageSizeInBytes*: uint
    scratchMemUsageInBytes*: uint

  VkDeviceQueueGlobalPriorityCreateInfoEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    globalPriority*: VkQueueGlobalPriorityEXT

  VkDebugUtilsObjectNameInfoEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    objectType*: VkObjectType
    objectHandle*: uint64
    pObjectName*: cstring

  VkDebugUtilsObjectTagInfoEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    objectType*: VkObjectType
    objectHandle*: uint64
    tagName*: uint64
    tagSize*: uint
    pTag*: pointer

  VkDebugUtilsLabelEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    pLabelName*: cstring
    color*: array[4,float32]

  VkImportMemoryHostPointerInfoEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    handleType*: VkExternalMemoryHandleTypeFlagBits
    pHostPointer*: pointer

  VkMemoryHostPointerPropertiesEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    memoryTypeBits*: uint32

  VkCalibratedTimestampInfoEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    timeDomain*: VkTimeDomainEXT

  VkPhysicalDeviceShaderCorePropertiesAMD*  = object
    sType*: VkStructureType
    pNext*: pointer
    shaderEngineCount*: uint32
    shaderArraysPerEngineCount*: uint32
    computeUnitsPerShaderArray*: uint32
    simdPerComputeUnit*: uint32
    wavefrontsPerSimd*: uint32
    wavefrontSize*: uint32
    sgprsPerSimd*: uint32
    minSgprAllocation*: uint32
    maxSgprAllocation*: uint32
    sgprAllocationGranularity*: uint32
    vgprsPerSimd*: uint32
    minVgprAllocation*: uint32
    maxVgprAllocation*: uint32
    vgprAllocationGranularity*: uint32

  VkDescriptorSetVariableDescriptorCountAllocateInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    descriptorSetCount*: uint32
    pDescriptorCounts*: ptr uint32

  VkDescriptorSetVariableDescriptorCountAllocateInfoEXT* = VkDescriptorSetVariableDescriptorCountAllocateInfo

  VkDescriptorSetVariableDescriptorCountLayoutSupport*  = object
    sType*: VkStructureType
    pNext*: pointer
    maxVariableDescriptorCount*: uint32

  VkDescriptorSetVariableDescriptorCountLayoutSupportEXT* = VkDescriptorSetVariableDescriptorCountLayoutSupport

  VkSubpassBeginInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    contents*: VkSubpassContents

  VkSubpassBeginInfoKHR* = VkSubpassBeginInfo

  VkSubpassEndInfo*  = object
    sType*: VkStructureType
    pNext*: pointer

  VkSubpassEndInfoKHR* = VkSubpassEndInfo

  VkPhysicalDeviceTimelineSemaphoreProperties*  = object
    sType*: VkStructureType
    pNext*: pointer
    maxTimelineSemaphoreValueDifference*: uint64

  VkPhysicalDeviceTimelineSemaphorePropertiesKHR* = VkPhysicalDeviceTimelineSemaphoreProperties

  VkSemaphoreTypeCreateInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    semaphoreType*: VkSemaphoreType
    initialValue*: uint64

  VkSemaphoreTypeCreateInfoKHR* = VkSemaphoreTypeCreateInfo

  VkTimelineSemaphoreSubmitInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    waitSemaphoreValueCount*: uint32
    pWaitSemaphoreValues*: ptr uint64
    signalSemaphoreValueCount*: uint32
    pSignalSemaphoreValues*: ptr uint64

  VkTimelineSemaphoreSubmitInfoKHR* = VkTimelineSemaphoreSubmitInfo

  VkSemaphoreSignalInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    semaphore*: VkSemaphore
    value*: uint64

  VkSemaphoreSignalInfoKHR* = VkSemaphoreSignalInfo

  VkVertexInputBindingDivisorDescriptionEXT*  = object
    binding*: uint32
    divisor*: uint32

  VkPipelineVertexInputDivisorStateCreateInfoEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    vertexBindingDivisorCount*: uint32
    pVertexBindingDivisors*: ptr VkVertexInputBindingDivisorDescriptionEXT

  VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    maxVertexAttribDivisor*: uint32

  VkPhysicalDevicePCIBusInfoPropertiesEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    pciDomain*: uint32
    pciBus*: uint32
    pciDevice*: uint32
    pciFunction*: uint32

  VkImportAndroidHardwareBufferInfoANDROID*  = object
    sType*: VkStructureType
    pNext*: pointer
    buffer*: ptr AHardwareBuffer

  VkAndroidHardwareBufferUsageANDROID*  = object
    sType*: VkStructureType
    pNext*: pointer
    androidHardwareBufferUsage*: uint64

  VkMemoryGetAndroidHardwareBufferInfoANDROID*  = object
    sType*: VkStructureType
    pNext*: pointer
    memory*: VkDeviceMemory

  VkExternalFormatANDROID*  = object
    sType*: VkStructureType
    pNext*: pointer
    externalFormat*: uint64

  VkCheckpointDataNV*  = object
    sType*: VkStructureType
    pNext*: pointer
    stage*: VkPipelineStageFlagBits
    pCheckpointMarker*: pointer

  VkImageViewASTCDecodeModeEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    decodeMode*: VkFormat

  VkPipelineViewportExclusiveScissorStateCreateInfoNV*  = object
    sType*: VkStructureType
    pNext*: pointer
    exclusiveScissorCount*: uint32
    pExclusiveScissors*: ptr VkRect2D

  VkShadingRatePaletteNV*  = object
    shadingRatePaletteEntryCount*: uint32
    pShadingRatePaletteEntries*: ptr VkShadingRatePaletteEntryNV

  VkPhysicalDeviceShadingRateImagePropertiesNV*  = object
    sType*: VkStructureType
    pNext*: pointer
    shadingRateTexelSize*: VkExtent2D
    shadingRatePaletteSize*: uint32
    shadingRateMaxCoarseSamples*: uint32

  VkCoarseSampleLocationNV*  = object
    pixelX*: uint32
    pixelY*: uint32
    sample*: uint32

  VkCoarseSampleOrderCustomNV*  = object
    shadingRate*: VkShadingRatePaletteEntryNV
    sampleCount*: uint32
    sampleLocationCount*: uint32
    pSampleLocations*: ptr VkCoarseSampleLocationNV

  VkPipelineViewportCoarseSampleOrderStateCreateInfoNV*  = object
    sType*: VkStructureType
    pNext*: pointer
    sampleOrderType*: VkCoarseSampleOrderTypeNV
    customSampleOrderCount*: uint32
    pCustomSampleOrders*: ptr VkCoarseSampleOrderCustomNV

  VkPhysicalDeviceMeshShaderPropertiesNV*  = object
    sType*: VkStructureType
    pNext*: pointer
    maxDrawMeshTasksCount*: uint32
    maxTaskWorkGroupInvocations*: uint32
    maxTaskWorkGroupSize*: array[3,uint32]
    maxTaskTotalMemorySize*: uint32
    maxTaskOutputCount*: uint32
    maxMeshWorkGroupInvocations*: uint32
    maxMeshWorkGroupSize*: array[3,uint32]
    maxMeshTotalMemorySize*: uint32
    maxMeshOutputVertices*: uint32
    maxMeshOutputPrimitives*: uint32
    maxMeshMultiviewViewCount*: uint32
    meshOutputPerVertexGranularity*: uint32
    meshOutputPerPrimitiveGranularity*: uint32

  VkDrawMeshTasksIndirectCommandNV*  = object
    taskCount*: uint32
    firstTask*: uint32

  VkRayTracingShaderGroupCreateInfoNV*  = object
    sType*: VkStructureType
    pNext*: pointer
    `type`*: VkRayTracingShaderGroupTypeKHR
    generalShader*: uint32
    closestHitShader*: uint32
    anyHitShader*: uint32
    intersectionShader*: uint32

  VkRayTracingShaderGroupCreateInfoKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    `type`*: VkRayTracingShaderGroupTypeKHR
    generalShader*: uint32
    closestHitShader*: uint32
    anyHitShader*: uint32
    intersectionShader*: uint32
    pShaderGroupCaptureReplayHandle*: pointer

  VkWriteDescriptorSetAccelerationStructureKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    accelerationStructureCount*: uint32
    pAccelerationStructures*: ptr VkAccelerationStructureKHR

  VkWriteDescriptorSetAccelerationStructureNV* = VkWriteDescriptorSetAccelerationStructureKHR

  VkAccelerationStructureMemoryRequirementsInfoKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    `type`*: VkAccelerationStructureMemoryRequirementsTypeKHR
    buildType*: VkAccelerationStructureBuildTypeKHR
    accelerationStructure*: VkAccelerationStructureKHR

  VkAccelerationStructureMemoryRequirementsInfoNV*  = object
    sType*: VkStructureType
    pNext*: pointer
    `type`*: VkAccelerationStructureMemoryRequirementsTypeNV
    accelerationStructure*: VkAccelerationStructureNV

  VkPhysicalDeviceRayTracingPropertiesKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    shaderGroupHandleSize*: uint32
    maxRecursionDepth*: uint32
    maxShaderGroupStride*: uint32
    shaderGroupBaseAlignment*: uint32
    maxGeometryCount*: uint64
    maxInstanceCount*: uint64
    maxPrimitiveCount*: uint64
    maxDescriptorSetAccelerationStructures*: uint32
    shaderGroupHandleCaptureReplaySize*: uint32

  VkPhysicalDeviceRayTracingPropertiesNV*  = object
    sType*: VkStructureType
    pNext*: pointer
    shaderGroupHandleSize*: uint32
    maxRecursionDepth*: uint32
    maxShaderGroupStride*: uint32
    shaderGroupBaseAlignment*: uint32
    maxGeometryCount*: uint64
    maxInstanceCount*: uint64
    maxTriangleCount*: uint64
    maxDescriptorSetAccelerationStructures*: uint32

  VkTraceRaysIndirectCommandKHR*  = object
    width*: uint32
    height*: uint32
    depth*: uint32

  VkPhysicalDeviceImageDrmFormatModifierInfoEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    drmFormatModifier*: uint64
    sharingMode*: VkSharingMode
    queueFamilyIndexCount*: uint32
    pQueueFamilyIndices*: ptr uint32

  VkImageDrmFormatModifierListCreateInfoEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    drmFormatModifierCount*: uint32
    pDrmFormatModifiers*: ptr uint64

  VkImageDrmFormatModifierPropertiesEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    drmFormatModifier*: uint64

  VkDeviceMemoryOverallocationCreateInfoAMD*  = object
    sType*: VkStructureType
    pNext*: pointer
    overallocationBehavior*: VkMemoryOverallocationBehaviorAMD

  VkRenderPassFragmentDensityMapCreateInfoEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    fragmentDensityMapAttachment*: VkAttachmentReference

  VkMemoryPriorityAllocateInfoEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    priority*: float32

  VkBufferDeviceAddressInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    buffer*: VkBuffer

  VkBufferDeviceAddressInfoKHR* = VkBufferDeviceAddressInfo

  VkBufferDeviceAddressInfoEXT* = VkBufferDeviceAddressInfo

  VkBufferOpaqueCaptureAddressCreateInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    opaqueCaptureAddress*: uint64

  VkBufferOpaqueCaptureAddressCreateInfoKHR* = VkBufferOpaqueCaptureAddressCreateInfo

  VkPhysicalDeviceImageViewImageFormatInfoEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    imageViewType*: VkImageViewType

  VkRenderPassAttachmentBeginInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    attachmentCount*: uint32
    pAttachments*: ptr VkImageView

  VkRenderPassAttachmentBeginInfoKHR* = VkRenderPassAttachmentBeginInfo

  VkCooperativeMatrixPropertiesNV*  = object
    sType*: VkStructureType
    pNext*: pointer
    MSize*: uint32
    NSize*: uint32
    KSize*: uint32
    AType*: VkComponentTypeNV
    BType*: VkComponentTypeNV
    CType*: VkComponentTypeNV
    DType*: VkComponentTypeNV
    scope*: VkScopeNV

  VkImageViewHandleInfoNVX*  = object
    sType*: VkStructureType
    pNext*: pointer
    imageView*: VkImageView
    descriptorType*: VkDescriptorType
    sampler*: VkSampler

  VkPresentFrameTokenGGP*  = object
    sType*: VkStructureType
    pNext*: pointer
    frameToken*: GgpFrameToken

  VkSurfaceFullScreenExclusiveInfoEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    fullScreenExclusive*: VkFullScreenExclusiveEXT

  VkSurfaceFullScreenExclusiveWin32InfoEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    hmonitor*: HMONITOR

  VkPerformanceCounterKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    unit*: VkPerformanceCounterUnitKHR
    scope*: VkPerformanceCounterScopeKHR
    storage*: VkPerformanceCounterStorageKHR
    uuid*: array[VK_UUID_SIZE,uint8]

  VkQueryPoolPerformanceCreateInfoKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    queueFamilyIndex*: uint32
    counterIndexCount*: uint32
    pCounterIndices*: ptr uint32

  VkPerformanceCounterResultKHR* {.union.} = object
    int32*: int32
    int64*: int64
    uint32*: uint32
    uint64*: uint64
    float32*: float32
    float64*: float64

  VkPerformanceQuerySubmitInfoKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    counterPassIndex*: uint32

  VkInitializePerformanceApiInfoINTEL*  = object
    sType*: VkStructureType
    pNext*: pointer
    pUserData*: pointer

  VkQueryPoolPerformanceQueryCreateInfoINTEL*  = object
    sType*: VkStructureType
    pNext*: pointer
    performanceCountersSampling*: VkQueryPoolSamplingModeINTEL

  VkQueryPoolCreateInfoINTEL* = VkQueryPoolPerformanceQueryCreateInfoINTEL

  VkPerformanceMarkerInfoINTEL*  = object
    sType*: VkStructureType
    pNext*: pointer
    marker*: uint64

  VkPerformanceStreamMarkerInfoINTEL*  = object
    sType*: VkStructureType
    pNext*: pointer
    marker*: uint32

  VkPerformanceConfigurationAcquireInfoINTEL*  = object
    sType*: VkStructureType
    pNext*: pointer
    `type`*: VkPerformanceConfigurationTypeINTEL

  VkPhysicalDeviceShaderSMBuiltinsPropertiesNV*  = object
    sType*: VkStructureType
    pNext*: pointer
    shaderSMCount*: uint32
    shaderWarpsPerSM*: uint32

  VkAttachmentReferenceStencilLayout*  = object
    sType*: VkStructureType
    pNext*: pointer
    stencilLayout*: VkImageLayout

  VkAttachmentReferenceStencilLayoutKHR* = VkAttachmentReferenceStencilLayout

  VkAttachmentDescriptionStencilLayout*  = object
    sType*: VkStructureType
    pNext*: pointer
    stencilInitialLayout*: VkImageLayout
    stencilFinalLayout*: VkImageLayout

  VkAttachmentDescriptionStencilLayoutKHR* = VkAttachmentDescriptionStencilLayout

  VkPipelineInfoKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    pipeline*: VkPipeline

  VkPipelineExecutableInfoKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    pipeline*: VkPipeline
    executableIndex*: uint32

  VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    requiredSubgroupSize*: uint32

  VkMemoryOpaqueCaptureAddressAllocateInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    opaqueCaptureAddress*: uint64

  VkMemoryOpaqueCaptureAddressAllocateInfoKHR* = VkMemoryOpaqueCaptureAddressAllocateInfo

  VkDeviceMemoryOpaqueCaptureAddressInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    memory*: VkDeviceMemory

  VkDeviceMemoryOpaqueCaptureAddressInfoKHR* = VkDeviceMemoryOpaqueCaptureAddressInfo

  VkPhysicalDeviceLineRasterizationPropertiesEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    lineSubPixelPrecisionBits*: uint32

  VkSamplerCustomBorderColorCreateInfoEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    customBorderColor*: VkClearColorValue
    format*: VkFormat

  VkPhysicalDeviceCustomBorderColorPropertiesEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    maxCustomBorderColorSamplers*: uint32

  VkAccelerationStructureBuildOffsetInfoKHR*  = object
    primitiveCount*: uint32
    primitiveOffset*: uint32
    firstVertex*: uint32
    transformOffset*: uint32

  VkAabbPositionsKHR*  = object
    minX*: float32
    minY*: float32
    minZ*: float32
    maxX*: float32
    maxY*: float32
    maxZ*: float32

  VkAabbPositionsNV* = VkAabbPositionsKHR

  VkTransformMatrixKHR*  = object
    matrix*: array[3,array[4, float32]]

  VkTransformMatrixNV* = VkTransformMatrixKHR

  VkAccelerationStructureDeviceAddressInfoKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    accelerationStructure*: VkAccelerationStructureKHR

  VkAccelerationStructureVersionKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    versionData*: ptr uint8

  VkCopyAccelerationStructureInfoKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    src*: VkAccelerationStructureKHR
    dst*: VkAccelerationStructureKHR
    mode*: VkCopyAccelerationStructureModeKHR

  VkRayTracingPipelineInterfaceCreateInfoKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    maxPayloadSize*: uint32
    maxAttributeSize*: uint32
    maxCallableSize*: uint32

  VkDeferredOperationInfoKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    operationHandle*: VkDeferredOperationKHR

  VkPipelineLibraryCreateInfoKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    libraryCount*: uint32
    pLibraries*: ptr VkPipeline

  VkRenderPassTransformBeginInfoQCOM*  = object
    sType*: VkStructureType
    pNext*: pointer
    transform*: VkSurfaceTransformFlagBitsKHR

  VkCommandBufferInheritanceRenderPassTransformInfoQCOM*  = object
    sType*: VkStructureType
    pNext*: pointer
    transform*: VkSurfaceTransformFlagBitsKHR
    renderArea*: VkRect2D

  VkSampleMask* = distinct uint32

  VkBool32* = distinct uint32

  VkFlags* = distinct uint32

  VkDeviceSize* = distinct uint64

  VkDeviceAddress* = distinct uint64

  VkFramebufferCreateFlags* = distinct VkFlags

  VkQueryPoolCreateFlags* = distinct VkFlags

  VkRenderPassCreateFlags* = distinct VkFlags

  VkSamplerCreateFlags* = distinct VkFlags

  VkPipelineLayoutCreateFlags* = distinct VkFlags

  VkPipelineCacheCreateFlags* = distinct VkFlags

  VkPipelineDepthStencilStateCreateFlags* = distinct VkFlags

  VkPipelineDynamicStateCreateFlags* = distinct VkFlags

  VkPipelineColorBlendStateCreateFlags* = distinct VkFlags

  VkPipelineMultisampleStateCreateFlags* = distinct VkFlags

  VkPipelineRasterizationStateCreateFlags* = distinct VkFlags

  VkPipelineViewportStateCreateFlags* = distinct VkFlags

  VkPipelineTessellationStateCreateFlags* = distinct VkFlags

  VkPipelineInputAssemblyStateCreateFlags* = distinct VkFlags

  VkPipelineVertexInputStateCreateFlags* = distinct VkFlags

  VkPipelineShaderStageCreateFlags* = distinct VkFlags

  VkDescriptorSetLayoutCreateFlags* = distinct VkFlags

  VkBufferViewCreateFlags* = distinct VkFlags

  VkInstanceCreateFlags* = distinct VkFlags

  VkDeviceCreateFlags* = distinct VkFlags

  VkDeviceQueueCreateFlags* = distinct VkFlags

  VkQueueFlags* = distinct VkFlags

  VkMemoryPropertyFlags* = distinct VkFlags

  VkMemoryHeapFlags* = distinct VkFlags

  VkAccessFlags* = distinct VkFlags

  VkBufferUsageFlags* = distinct VkFlags

  VkBufferCreateFlags* = distinct VkFlags

  VkShaderStageFlags* = distinct VkFlags

  VkImageUsageFlags* = distinct VkFlags

  VkImageCreateFlags* = distinct VkFlags

  VkImageViewCreateFlags* = distinct VkFlags

  VkPipelineCreateFlags* = distinct VkFlags

  VkColorComponentFlags* = distinct VkFlags

  VkFenceCreateFlags* = distinct VkFlags

  VkSemaphoreCreateFlags* = distinct VkFlags

  VkFormatFeatureFlags* = distinct VkFlags

  VkQueryControlFlags* = distinct VkFlags

  VkQueryResultFlags* = distinct VkFlags

  VkShaderModuleCreateFlags* = distinct VkFlags

  VkEventCreateFlags* = distinct VkFlags

  VkCommandPoolCreateFlags* = distinct VkFlags

  VkCommandPoolResetFlags* = distinct VkFlags

  VkCommandBufferResetFlags* = distinct VkFlags

  VkCommandBufferUsageFlags* = distinct VkFlags

  VkQueryPipelineStatisticFlags* = distinct VkFlags

  VkMemoryMapFlags* = distinct VkFlags

  VkImageAspectFlags* = distinct VkFlags

  VkSparseMemoryBindFlags* = distinct VkFlags

  VkSparseImageFormatFlags* = distinct VkFlags

  VkSubpassDescriptionFlags* = distinct VkFlags

  VkPipelineStageFlags* = distinct VkFlags

  VkSampleCountFlags* = distinct VkFlags

  VkAttachmentDescriptionFlags* = distinct VkFlags

  VkStencilFaceFlags* = distinct VkFlags

  VkCullModeFlags* = distinct VkFlags

  VkDescriptorPoolCreateFlags* = distinct VkFlags

  VkDescriptorPoolResetFlags* = distinct VkFlags

  VkDependencyFlags* = distinct VkFlags

  VkSubgroupFeatureFlags* = distinct VkFlags

  VkIndirectCommandsLayoutUsageFlagsNV* = distinct VkFlags

  VkIndirectStateFlagsNV* = distinct VkFlags

  VkGeometryFlagsKHR* = distinct VkFlags

  VkGeometryFlagsNV* = VkGeometryFlagsKHR

  VkGeometryInstanceFlagsKHR* = distinct VkFlags

  VkGeometryInstanceFlagsNV* = VkGeometryInstanceFlagsKHR

  VkBuildAccelerationStructureFlagsKHR* = distinct VkFlags

  VkBuildAccelerationStructureFlagsNV* = VkBuildAccelerationStructureFlagsKHR

  VkPrivateDataSlotCreateFlagsEXT* = distinct VkFlags

  VkDescriptorUpdateTemplateCreateFlags* = distinct VkFlags

  VkDescriptorUpdateTemplateCreateFlagsKHR* = VkDescriptorUpdateTemplateCreateFlags

  VkPipelineCreationFeedbackFlagsEXT* = distinct VkFlags

  VkPerformanceCounterDescriptionFlagsKHR* = distinct VkFlags

  VkAcquireProfilingLockFlagsKHR* = distinct VkFlags

  VkSemaphoreWaitFlags* = distinct VkFlags

  VkSemaphoreWaitFlagsKHR* = VkSemaphoreWaitFlags

  VkPipelineCompilerControlFlagsAMD* = distinct VkFlags

  VkShaderCorePropertiesFlagsAMD* = distinct VkFlags

  VkDeviceDiagnosticsConfigFlagsNV* = distinct VkFlags

  VkCompositeAlphaFlagsKHR* = distinct VkFlags

  VkDisplayPlaneAlphaFlagsKHR* = distinct VkFlags

  VkSurfaceTransformFlagsKHR* = distinct VkFlags

  VkSwapchainCreateFlagsKHR* = distinct VkFlags

  VkDisplayModeCreateFlagsKHR* = distinct VkFlags

  VkDisplaySurfaceCreateFlagsKHR* = distinct VkFlags

  VkAndroidSurfaceCreateFlagsKHR* = distinct VkFlags

  VkViSurfaceCreateFlagsNN* = distinct VkFlags

  VkWaylandSurfaceCreateFlagsKHR* = distinct VkFlags

  VkWin32SurfaceCreateFlagsKHR* = distinct VkFlags

  VkXlibSurfaceCreateFlagsKHR* = distinct VkFlags

  VkXcbSurfaceCreateFlagsKHR* = distinct VkFlags

  VkDirectFBSurfaceCreateFlagsEXT* = distinct VkFlags

  VkIOSSurfaceCreateFlagsMVK* = distinct VkFlags

  VkMacOSSurfaceCreateFlagsMVK* = distinct VkFlags

  VkMetalSurfaceCreateFlagsEXT* = distinct VkFlags

  VkImagePipeSurfaceCreateFlagsFUCHSIA* = distinct VkFlags

  VkStreamDescriptorSurfaceCreateFlagsGGP* = distinct VkFlags

  VkHeadlessSurfaceCreateFlagsEXT* = distinct VkFlags

  VkPeerMemoryFeatureFlags* = distinct VkFlags

  VkPeerMemoryFeatureFlagsKHR* = VkPeerMemoryFeatureFlags

  VkMemoryAllocateFlags* = distinct VkFlags

  VkMemoryAllocateFlagsKHR* = VkMemoryAllocateFlags

  VkDeviceGroupPresentModeFlagsKHR* = distinct VkFlags

  VkDebugReportFlagsEXT* = distinct VkFlags

  VkCommandPoolTrimFlags* = distinct VkFlags

  VkCommandPoolTrimFlagsKHR* = VkCommandPoolTrimFlags

  VkExternalMemoryHandleTypeFlagsNV* = distinct VkFlags

  VkExternalMemoryFeatureFlagsNV* = distinct VkFlags

  VkExternalMemoryHandleTypeFlags* = distinct VkFlags

  VkExternalMemoryHandleTypeFlagsKHR* = VkExternalMemoryHandleTypeFlags

  VkExternalMemoryFeatureFlags* = distinct VkFlags

  VkExternalMemoryFeatureFlagsKHR* = VkExternalMemoryFeatureFlags

  VkExternalSemaphoreHandleTypeFlags* = distinct VkFlags

  VkExternalSemaphoreHandleTypeFlagsKHR* = VkExternalSemaphoreHandleTypeFlags

  VkExternalSemaphoreFeatureFlags* = distinct VkFlags

  VkExternalSemaphoreFeatureFlagsKHR* = VkExternalSemaphoreFeatureFlags

  VkSemaphoreImportFlags* = distinct VkFlags

  VkSemaphoreImportFlagsKHR* = VkSemaphoreImportFlags

  VkExternalFenceHandleTypeFlags* = distinct VkFlags

  VkExternalFenceHandleTypeFlagsKHR* = VkExternalFenceHandleTypeFlags

  VkExternalFenceFeatureFlags* = distinct VkFlags

  VkExternalFenceFeatureFlagsKHR* = VkExternalFenceFeatureFlags

  VkFenceImportFlags* = distinct VkFlags

  VkFenceImportFlagsKHR* = VkFenceImportFlags

  VkSurfaceCounterFlagsEXT* = distinct VkFlags

  VkPipelineViewportSwizzleStateCreateFlagsNV* = distinct VkFlags

  VkPipelineDiscardRectangleStateCreateFlagsEXT* = distinct VkFlags

  VkPipelineCoverageToColorStateCreateFlagsNV* = distinct VkFlags

  VkPipelineCoverageModulationStateCreateFlagsNV* = distinct VkFlags

  VkPipelineCoverageReductionStateCreateFlagsNV* = distinct VkFlags

  VkValidationCacheCreateFlagsEXT* = distinct VkFlags

  VkDebugUtilsMessageSeverityFlagsEXT* = distinct VkFlags

  VkDebugUtilsMessageTypeFlagsEXT* = distinct VkFlags

  VkDebugUtilsMessengerCreateFlagsEXT* = distinct VkFlags

  VkDebugUtilsMessengerCallbackDataFlagsEXT* = distinct VkFlags

  VkPipelineRasterizationConservativeStateCreateFlagsEXT* = distinct VkFlags

  VkDescriptorBindingFlags* = distinct VkFlags

  VkDescriptorBindingFlagsEXT* = VkDescriptorBindingFlags

  VkConditionalRenderingFlagsEXT* = distinct VkFlags

  VkResolveModeFlags* = distinct VkFlags

  VkResolveModeFlagsKHR* = VkResolveModeFlags

  VkPipelineRasterizationStateStreamCreateFlagsEXT* = distinct VkFlags

  VkPipelineRasterizationDepthClipStateCreateFlagsEXT* = distinct VkFlags

  VkToolPurposeFlagsEXT* = distinct VkFlags

  PFN_vkDebugReportCallbackEXT* = proc(
    flags: VkDebugReportFlagsEXT,
    objectType: VkDebugReportObjectTypeEXT,
    `object`: uint64,
    location: uint,
    messageCode: int32,
    pLayerPrefix: cstring,
    pMessage: cstring,
    pUserData: pointer,
   ): VkBool32 {.cdecl.}

  VkDeviceQueueCreateInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkDeviceQueueCreateFlags
    queueFamilyIndex*: uint32
    queueCount*: uint32
    pQueuePriorities*: ptr float32

  VkInstanceCreateInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkInstanceCreateFlags
    pApplicationInfo*: ptr VkApplicationInfo
    enabledLayerCount*: uint32
    ppEnabledLayerNames*: ptr ptr char
    enabledExtensionCount*: uint32
    ppEnabledExtensionNames*: ptr ptr char

  VkQueueFamilyProperties*  = object
    queueFlags*: VkQueueFlags
    queueCount*: uint32
    timestampValidBits*: uint32
    minImageTransferGranularity*: VkExtent3D

  VkMemoryAllocateInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    allocationSize*: VkDeviceSize
    memoryTypeIndex*: uint32

  VkMemoryRequirements*  = object
    size*: VkDeviceSize
    alignment*: VkDeviceSize
    memoryTypeBits*: uint32

  VkSparseImageFormatProperties*  = object
    aspectMask*: VkImageAspectFlags
    imageGranularity*: VkExtent3D
    flags*: VkSparseImageFormatFlags

  VkSparseImageMemoryRequirements*  = object
    formatProperties*: VkSparseImageFormatProperties
    imageMipTailFirstLod*: uint32
    imageMipTailSize*: VkDeviceSize
    imageMipTailOffset*: VkDeviceSize
    imageMipTailStride*: VkDeviceSize

  VkMemoryType*  = object
    propertyFlags*: VkMemoryPropertyFlags
    heapIndex*: uint32

  VkMemoryHeap*  = object
    size*: VkDeviceSize
    flags*: VkMemoryHeapFlags

  VkMappedMemoryRange*  = object
    sType*: VkStructureType
    pNext*: pointer
    memory*: VkDeviceMemory
    offset*: VkDeviceSize
    size*: VkDeviceSize

  VkFormatProperties*  = object
    linearTilingFeatures*: VkFormatFeatureFlags
    optimalTilingFeatures*: VkFormatFeatureFlags
    bufferFeatures*: VkFormatFeatureFlags

  VkImageFormatProperties*  = object
    maxExtent*: VkExtent3D
    maxMipLevels*: uint32
    maxArrayLayers*: uint32
    sampleCounts*: VkSampleCountFlags
    maxResourceSize*: VkDeviceSize

  VkDescriptorBufferInfo*  = object
    buffer*: VkBuffer
    offset*: VkDeviceSize
    range*: VkDeviceSize

  VkWriteDescriptorSet*  = object
    sType*: VkStructureType
    pNext*: pointer
    dstSet*: VkDescriptorSet
    dstBinding*: uint32
    dstArrayElement*: uint32
    descriptorCount*: uint32
    descriptorType*: VkDescriptorType
    pImageInfo*: ptr VkDescriptorImageInfo
    pBufferInfo*: ptr VkDescriptorBufferInfo
    pTexelBufferView*: ptr VkBufferView

  VkBufferCreateInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkBufferCreateFlags
    size*: VkDeviceSize
    usage*: VkBufferUsageFlags
    sharingMode*: VkSharingMode
    queueFamilyIndexCount*: uint32
    pQueueFamilyIndices*: ptr uint32

  VkBufferViewCreateInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkBufferViewCreateFlags
    buffer*: VkBuffer
    format*: VkFormat
    offset*: VkDeviceSize
    range*: VkDeviceSize

  VkImageSubresource*  = object
    aspectMask*: VkImageAspectFlags
    mipLevel*: uint32
    arrayLayer*: uint32

  VkImageSubresourceLayers*  = object
    aspectMask*: VkImageAspectFlags
    mipLevel*: uint32
    baseArrayLayer*: uint32
    layerCount*: uint32

  VkImageSubresourceRange*  = object
    aspectMask*: VkImageAspectFlags
    baseMipLevel*: uint32
    levelCount*: uint32
    baseArrayLayer*: uint32
    layerCount*: uint32

  VkMemoryBarrier*  = object
    sType*: VkStructureType
    pNext*: pointer
    srcAccessMask*: VkAccessFlags
    dstAccessMask*: VkAccessFlags

  VkBufferMemoryBarrier*  = object
    sType*: VkStructureType
    pNext*: pointer
    srcAccessMask*: VkAccessFlags
    dstAccessMask*: VkAccessFlags
    srcQueueFamilyIndex*: uint32
    dstQueueFamilyIndex*: uint32
    buffer*: VkBuffer
    offset*: VkDeviceSize
    size*: VkDeviceSize

  VkImageMemoryBarrier*  = object
    sType*: VkStructureType
    pNext*: pointer
    srcAccessMask*: VkAccessFlags
    dstAccessMask*: VkAccessFlags
    oldLayout*: VkImageLayout
    newLayout*: VkImageLayout
    srcQueueFamilyIndex*: uint32
    dstQueueFamilyIndex*: uint32
    image*: VkImage
    subresourceRange*: VkImageSubresourceRange

  VkImageCreateInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkImageCreateFlags
    imageType*: VkImageType
    format*: VkFormat
    extent*: VkExtent3D
    mipLevels*: uint32
    arrayLayers*: uint32
    samples*: VkSampleCountFlagBits
    tiling*: VkImageTiling
    usage*: VkImageUsageFlags
    sharingMode*: VkSharingMode
    queueFamilyIndexCount*: uint32
    pQueueFamilyIndices*: ptr uint32
    initialLayout*: VkImageLayout

  VkSubresourceLayout*  = object
    offset*: VkDeviceSize
    size*: VkDeviceSize
    rowPitch*: VkDeviceSize
    arrayPitch*: VkDeviceSize
    depthPitch*: VkDeviceSize

  VkImageViewCreateInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkImageViewCreateFlags
    image*: VkImage
    viewType*: VkImageViewType
    format*: VkFormat
    components*: VkComponentMapping
    subresourceRange*: VkImageSubresourceRange

  VkBufferCopy*  = object
    srcOffset*: VkDeviceSize
    dstOffset*: VkDeviceSize
    size*: VkDeviceSize

  VkSparseMemoryBind*  = object
    resourceOffset*: VkDeviceSize
    size*: VkDeviceSize
    memory*: VkDeviceMemory
    memoryOffset*: VkDeviceSize
    flags*: VkSparseMemoryBindFlags

  VkSparseImageMemoryBind*  = object
    subresource*: VkImageSubresource
    offset*: VkOffset3D
    extent*: VkExtent3D
    memory*: VkDeviceMemory
    memoryOffset*: VkDeviceSize
    flags*: VkSparseMemoryBindFlags

  VkSparseBufferMemoryBindInfo*  = object
    buffer*: VkBuffer
    bindCount*: uint32
    pBinds*: ptr VkSparseMemoryBind

  VkSparseImageOpaqueMemoryBindInfo*  = object
    image*: VkImage
    bindCount*: uint32
    pBinds*: ptr VkSparseMemoryBind

  VkSparseImageMemoryBindInfo*  = object
    image*: VkImage
    bindCount*: uint32
    pBinds*: ptr VkSparseImageMemoryBind

  VkBindSparseInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    waitSemaphoreCount*: uint32
    pWaitSemaphores*: ptr VkSemaphore
    bufferBindCount*: uint32
    pBufferBinds*: ptr VkSparseBufferMemoryBindInfo
    imageOpaqueBindCount*: uint32
    pImageOpaqueBinds*: ptr VkSparseImageOpaqueMemoryBindInfo
    imageBindCount*: uint32
    pImageBinds*: ptr VkSparseImageMemoryBindInfo
    signalSemaphoreCount*: uint32
    pSignalSemaphores*: ptr VkSemaphore

  VkImageCopy*  = object
    srcSubresource*: VkImageSubresourceLayers
    srcOffset*: VkOffset3D
    dstSubresource*: VkImageSubresourceLayers
    dstOffset*: VkOffset3D
    extent*: VkExtent3D

  VkImageBlit*  = object
    srcSubresource*: VkImageSubresourceLayers
    srcOffsets*: array[2,VkOffset3D]
    dstSubresource*: VkImageSubresourceLayers
    dstOffsets*: array[2,VkOffset3D]

  VkBufferImageCopy*  = object
    bufferOffset*: VkDeviceSize
    bufferRowLength*: uint32
    bufferImageHeight*: uint32
    imageSubresource*: VkImageSubresourceLayers
    imageOffset*: VkOffset3D
    imageExtent*: VkExtent3D

  VkImageResolve*  = object
    srcSubresource*: VkImageSubresourceLayers
    srcOffset*: VkOffset3D
    dstSubresource*: VkImageSubresourceLayers
    dstOffset*: VkOffset3D
    extent*: VkExtent3D

  VkShaderModuleCreateInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkShaderModuleCreateFlags
    codeSize*: uint
    pCode*: ptr uint32

  VkDescriptorSetLayoutBinding*  = object
    binding*: uint32
    descriptorType*: VkDescriptorType
    descriptorCount*: uint32
    stageFlags*: VkShaderStageFlags
    pImmutableSamplers*: ptr VkSampler

  VkDescriptorSetLayoutCreateInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkDescriptorSetLayoutCreateFlags
    bindingCount*: uint32
    pBindings*: ptr VkDescriptorSetLayoutBinding

  VkDescriptorPoolCreateInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkDescriptorPoolCreateFlags
    maxSets*: uint32
    poolSizeCount*: uint32
    pPoolSizes*: ptr VkDescriptorPoolSize

  VkPipelineShaderStageCreateInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkPipelineShaderStageCreateFlags
    stage*: VkShaderStageFlagBits
    module*: VkShaderModule
    pName*: cstring
    pSpecializationInfo*: ptr VkSpecializationInfo

  VkComputePipelineCreateInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkPipelineCreateFlags
    stage*: VkPipelineShaderStageCreateInfo
    layout*: VkPipelineLayout
    basePipelineHandle*: VkPipeline
    basePipelineIndex*: int32

  VkPipelineVertexInputStateCreateInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkPipelineVertexInputStateCreateFlags
    vertexBindingDescriptionCount*: uint32
    pVertexBindingDescriptions*: ptr VkVertexInputBindingDescription
    vertexAttributeDescriptionCount*: uint32
    pVertexAttributeDescriptions*: ptr VkVertexInputAttributeDescription

  VkPipelineInputAssemblyStateCreateInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkPipelineInputAssemblyStateCreateFlags
    topology*: VkPrimitiveTopology
    primitiveRestartEnable*: VkBool32

  VkPipelineTessellationStateCreateInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkPipelineTessellationStateCreateFlags
    patchControlPoints*: uint32

  VkPipelineViewportStateCreateInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkPipelineViewportStateCreateFlags
    viewportCount*: uint32
    pViewports*: ptr VkViewport
    scissorCount*: uint32
    pScissors*: ptr VkRect2D

  VkPipelineRasterizationStateCreateInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkPipelineRasterizationStateCreateFlags
    depthClampEnable*: VkBool32
    rasterizerDiscardEnable*: VkBool32
    polygonMode*: VkPolygonMode
    cullMode*: VkCullModeFlags
    frontFace*: VkFrontFace
    depthBiasEnable*: VkBool32
    depthBiasConstantFactor*: float32
    depthBiasClamp*: float32
    depthBiasSlopeFactor*: float32
    lineWidth*: float32

  VkPipelineMultisampleStateCreateInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkPipelineMultisampleStateCreateFlags
    rasterizationSamples*: VkSampleCountFlagBits
    sampleShadingEnable*: VkBool32
    minSampleShading*: float32
    pSampleMask*: ptr VkSampleMask
    alphaToCoverageEnable*: VkBool32
    alphaToOneEnable*: VkBool32

  VkPipelineColorBlendAttachmentState*  = object
    blendEnable*: VkBool32
    srcColorBlendFactor*: VkBlendFactor
    dstColorBlendFactor*: VkBlendFactor
    colorBlendOp*: VkBlendOp
    srcAlphaBlendFactor*: VkBlendFactor
    dstAlphaBlendFactor*: VkBlendFactor
    alphaBlendOp*: VkBlendOp
    colorWriteMask*: VkColorComponentFlags

  VkPipelineColorBlendStateCreateInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkPipelineColorBlendStateCreateFlags
    logicOpEnable*: VkBool32
    logicOp*: VkLogicOp
    attachmentCount*: uint32
    pAttachments*: ptr VkPipelineColorBlendAttachmentState
    blendConstants*: array[4,float32]

  VkPipelineDynamicStateCreateInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkPipelineDynamicStateCreateFlags
    dynamicStateCount*: uint32
    pDynamicStates*: ptr VkDynamicState

  VkPipelineDepthStencilStateCreateInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkPipelineDepthStencilStateCreateFlags
    depthTestEnable*: VkBool32
    depthWriteEnable*: VkBool32
    depthCompareOp*: VkCompareOp
    depthBoundsTestEnable*: VkBool32
    stencilTestEnable*: VkBool32
    front*: VkStencilOpState
    back*: VkStencilOpState
    minDepthBounds*: float32
    maxDepthBounds*: float32

  VkGraphicsPipelineCreateInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkPipelineCreateFlags
    stageCount*: uint32
    pStages*: ptr VkPipelineShaderStageCreateInfo
    pVertexInputState*: ptr VkPipelineVertexInputStateCreateInfo
    pInputAssemblyState*: ptr VkPipelineInputAssemblyStateCreateInfo
    pTessellationState*: ptr VkPipelineTessellationStateCreateInfo
    pViewportState*: ptr VkPipelineViewportStateCreateInfo
    pRasterizationState*: ptr VkPipelineRasterizationStateCreateInfo
    pMultisampleState*: ptr VkPipelineMultisampleStateCreateInfo
    pDepthStencilState*: ptr VkPipelineDepthStencilStateCreateInfo
    pColorBlendState*: ptr VkPipelineColorBlendStateCreateInfo
    pDynamicState*: ptr VkPipelineDynamicStateCreateInfo
    layout*: VkPipelineLayout
    renderPass*: VkRenderPass
    subpass*: uint32
    basePipelineHandle*: VkPipeline
    basePipelineIndex*: int32

  VkPipelineCacheCreateInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkPipelineCacheCreateFlags
    initialDataSize*: uint
    pInitialData*: pointer

  VkPushConstantRange*  = object
    stageFlags*: VkShaderStageFlags
    offset*: uint32
    size*: uint32

  VkPipelineLayoutCreateInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkPipelineLayoutCreateFlags
    setLayoutCount*: uint32
    pSetLayouts*: ptr VkDescriptorSetLayout
    pushConstantRangeCount*: uint32
    pPushConstantRanges*: ptr VkPushConstantRange

  VkSamplerCreateInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkSamplerCreateFlags
    magFilter*: VkFilter
    minFilter*: VkFilter
    mipmapMode*: VkSamplerMipmapMode
    addressModeU*: VkSamplerAddressMode
    addressModeV*: VkSamplerAddressMode
    addressModeW*: VkSamplerAddressMode
    mipLodBias*: float32
    anisotropyEnable*: VkBool32
    maxAnisotropy*: float32
    compareEnable*: VkBool32
    compareOp*: VkCompareOp
    minLod*: float32
    maxLod*: float32
    borderColor*: VkBorderColor
    unnormalizedCoordinates*: VkBool32

  VkCommandPoolCreateInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkCommandPoolCreateFlags
    queueFamilyIndex*: uint32

  VkCommandBufferInheritanceInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    renderPass*: VkRenderPass
    subpass*: uint32
    framebuffer*: VkFramebuffer
    occlusionQueryEnable*: VkBool32
    queryFlags*: VkQueryControlFlags
    pipelineStatistics*: VkQueryPipelineStatisticFlags

  VkCommandBufferBeginInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkCommandBufferUsageFlags
    pInheritanceInfo*: ptr VkCommandBufferInheritanceInfo

  VkRenderPassBeginInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    renderPass*: VkRenderPass
    framebuffer*: VkFramebuffer
    renderArea*: VkRect2D
    clearValueCount*: uint32
    pClearValues*: ptr VkClearValue

  VkClearAttachment*  = object
    aspectMask*: VkImageAspectFlags
    colorAttachment*: uint32
    clearValue*: VkClearValue

  VkAttachmentDescription*  = object
    flags*: VkAttachmentDescriptionFlags
    format*: VkFormat
    samples*: VkSampleCountFlagBits
    loadOp*: VkAttachmentLoadOp
    storeOp*: VkAttachmentStoreOp
    stencilLoadOp*: VkAttachmentLoadOp
    stencilStoreOp*: VkAttachmentStoreOp
    initialLayout*: VkImageLayout
    finalLayout*: VkImageLayout

  VkSubpassDescription*  = object
    flags*: VkSubpassDescriptionFlags
    pipelineBindPoint*: VkPipelineBindPoint
    inputAttachmentCount*: uint32
    pInputAttachments*: ptr VkAttachmentReference
    colorAttachmentCount*: uint32
    pColorAttachments*: ptr VkAttachmentReference
    pResolveAttachments*: ptr VkAttachmentReference
    pDepthStencilAttachment*: ptr VkAttachmentReference
    preserveAttachmentCount*: uint32
    pPreserveAttachments*: ptr uint32

  VkSubpassDependency*  = object
    srcSubpass*: uint32
    dstSubpass*: uint32
    srcStageMask*: VkPipelineStageFlags
    dstStageMask*: VkPipelineStageFlags
    srcAccessMask*: VkAccessFlags
    dstAccessMask*: VkAccessFlags
    dependencyFlags*: VkDependencyFlags

  VkRenderPassCreateInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkRenderPassCreateFlags
    attachmentCount*: uint32
    pAttachments*: ptr VkAttachmentDescription
    subpassCount*: uint32
    pSubpasses*: ptr VkSubpassDescription
    dependencyCount*: uint32
    pDependencies*: ptr VkSubpassDependency

  VkEventCreateInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkEventCreateFlags

  VkFenceCreateInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkFenceCreateFlags

  VkPhysicalDeviceFeatures*  = object
    robustBufferAccess*: VkBool32
    fullDrawIndexUint32*: VkBool32
    imageCubeArray*: VkBool32
    independentBlend*: VkBool32
    geometryShader*: VkBool32
    tessellationShader*: VkBool32
    sampleRateShading*: VkBool32
    dualSrcBlend*: VkBool32
    logicOp*: VkBool32
    multiDrawIndirect*: VkBool32
    drawIndirectFirstInstance*: VkBool32
    depthClamp*: VkBool32
    depthBiasClamp*: VkBool32
    fillModeNonSolid*: VkBool32
    depthBounds*: VkBool32
    wideLines*: VkBool32
    largePoints*: VkBool32
    alphaToOne*: VkBool32
    multiViewport*: VkBool32
    samplerAnisotropy*: VkBool32
    textureCompressionETC2*: VkBool32
    textureCompressionASTC_LDR*: VkBool32
    textureCompressionBC*: VkBool32
    occlusionQueryPrecise*: VkBool32
    pipelineStatisticsQuery*: VkBool32
    vertexPipelineStoresAndAtomics*: VkBool32
    fragmentStoresAndAtomics*: VkBool32
    shaderTessellationAndGeometryPointSize*: VkBool32
    shaderImageGatherExtended*: VkBool32
    shaderStorageImageExtendedFormats*: VkBool32
    shaderStorageImageMultisample*: VkBool32
    shaderStorageImageReadWithoutFormat*: VkBool32
    shaderStorageImageWriteWithoutFormat*: VkBool32
    shaderUniformBufferArrayDynamicIndexing*: VkBool32
    shaderSampledImageArrayDynamicIndexing*: VkBool32
    shaderStorageBufferArrayDynamicIndexing*: VkBool32
    shaderStorageImageArrayDynamicIndexing*: VkBool32
    shaderClipDistance*: VkBool32
    shaderCullDistance*: VkBool32
    shaderFloat64*: VkBool32
    shaderInt64*: VkBool32
    shaderInt16*: VkBool32
    shaderResourceResidency*: VkBool32
    shaderResourceMinLod*: VkBool32
    sparseBinding*: VkBool32
    sparseResidencyBuffer*: VkBool32
    sparseResidencyImage2D*: VkBool32
    sparseResidencyImage3D*: VkBool32
    sparseResidency2Samples*: VkBool32
    sparseResidency4Samples*: VkBool32
    sparseResidency8Samples*: VkBool32
    sparseResidency16Samples*: VkBool32
    sparseResidencyAliased*: VkBool32
    variableMultisampleRate*: VkBool32
    inheritedQueries*: VkBool32

  VkPhysicalDeviceSparseProperties*  = object
    residencyStandard2DBlockShape*: VkBool32
    residencyStandard2DMultisampleBlockShape*: VkBool32
    residencyStandard3DBlockShape*: VkBool32
    residencyAlignedMipSize*: VkBool32
    residencyNonResidentStrict*: VkBool32

  VkPhysicalDeviceLimits*  = object
    maxImageDimension1D*: uint32
    maxImageDimension2D*: uint32
    maxImageDimension3D*: uint32
    maxImageDimensionCube*: uint32
    maxImageArrayLayers*: uint32
    maxTexelBufferElements*: uint32
    maxUniformBufferRange*: uint32
    maxStorageBufferRange*: uint32
    maxPushConstantsSize*: uint32
    maxMemoryAllocationCount*: uint32
    maxSamplerAllocationCount*: uint32
    bufferImageGranularity*: VkDeviceSize
    sparseAddressSpaceSize*: VkDeviceSize
    maxBoundDescriptorSets*: uint32
    maxPerStageDescriptorSamplers*: uint32
    maxPerStageDescriptorUniformBuffers*: uint32
    maxPerStageDescriptorStorageBuffers*: uint32
    maxPerStageDescriptorSampledImages*: uint32
    maxPerStageDescriptorStorageImages*: uint32
    maxPerStageDescriptorInputAttachments*: uint32
    maxPerStageResources*: uint32
    maxDescriptorSetSamplers*: uint32
    maxDescriptorSetUniformBuffers*: uint32
    maxDescriptorSetUniformBuffersDynamic*: uint32
    maxDescriptorSetStorageBuffers*: uint32
    maxDescriptorSetStorageBuffersDynamic*: uint32
    maxDescriptorSetSampledImages*: uint32
    maxDescriptorSetStorageImages*: uint32
    maxDescriptorSetInputAttachments*: uint32
    maxVertexInputAttributes*: uint32
    maxVertexInputBindings*: uint32
    maxVertexInputAttributeOffset*: uint32
    maxVertexInputBindingStride*: uint32
    maxVertexOutputComponents*: uint32
    maxTessellationGenerationLevel*: uint32
    maxTessellationPatchSize*: uint32
    maxTessellationControlPerVertexInputComponents*: uint32
    maxTessellationControlPerVertexOutputComponents*: uint32
    maxTessellationControlPerPatchOutputComponents*: uint32
    maxTessellationControlTotalOutputComponents*: uint32
    maxTessellationEvaluationInputComponents*: uint32
    maxTessellationEvaluationOutputComponents*: uint32
    maxGeometryShaderInvocations*: uint32
    maxGeometryInputComponents*: uint32
    maxGeometryOutputComponents*: uint32
    maxGeometryOutputVertices*: uint32
    maxGeometryTotalOutputComponents*: uint32
    maxFragmentInputComponents*: uint32
    maxFragmentOutputAttachments*: uint32
    maxFragmentDualSrcAttachments*: uint32
    maxFragmentCombinedOutputResources*: uint32
    maxComputeSharedMemorySize*: uint32
    maxComputeWorkGroupCount*: array[3,uint32]
    maxComputeWorkGroupInvocations*: uint32
    maxComputeWorkGroupSize*: array[3,uint32]
    subPixelPrecisionBits*: uint32
    subTexelPrecisionBits*: uint32
    mipmapPrecisionBits*: uint32
    maxDrawIndexedIndexValue*: uint32
    maxDrawIndirectCount*: uint32
    maxSamplerLodBias*: float32
    maxSamplerAnisotropy*: float32
    maxViewports*: uint32
    maxViewportDimensions*: array[2,uint32]
    viewportBoundsRange*: array[2,float32]
    viewportSubPixelBits*: uint32
    minMemoryMapAlignment*: uint
    minTexelBufferOffsetAlignment*: VkDeviceSize
    minUniformBufferOffsetAlignment*: VkDeviceSize
    minStorageBufferOffsetAlignment*: VkDeviceSize
    minTexelOffset*: int32
    maxTexelOffset*: uint32
    minTexelGatherOffset*: int32
    maxTexelGatherOffset*: uint32
    minInterpolationOffset*: float32
    maxInterpolationOffset*: float32
    subPixelInterpolationOffsetBits*: uint32
    maxFramebufferWidth*: uint32
    maxFramebufferHeight*: uint32
    maxFramebufferLayers*: uint32
    framebufferColorSampleCounts*: VkSampleCountFlags
    framebufferDepthSampleCounts*: VkSampleCountFlags
    framebufferStencilSampleCounts*: VkSampleCountFlags
    framebufferNoAttachmentsSampleCounts*: VkSampleCountFlags
    maxColorAttachments*: uint32
    sampledImageColorSampleCounts*: VkSampleCountFlags
    sampledImageIntegerSampleCounts*: VkSampleCountFlags
    sampledImageDepthSampleCounts*: VkSampleCountFlags
    sampledImageStencilSampleCounts*: VkSampleCountFlags
    storageImageSampleCounts*: VkSampleCountFlags
    maxSampleMaskWords*: uint32
    timestampComputeAndGraphics*: VkBool32
    timestampPeriod*: float32
    maxClipDistances*: uint32
    maxCullDistances*: uint32
    maxCombinedClipAndCullDistances*: uint32
    discreteQueuePriorities*: uint32
    pointSizeRange*: array[2,float32]
    lineWidthRange*: array[2,float32]
    pointSizeGranularity*: float32
    lineWidthGranularity*: float32
    strictLines*: VkBool32
    standardSampleLocations*: VkBool32
    optimalBufferCopyOffsetAlignment*: VkDeviceSize
    optimalBufferCopyRowPitchAlignment*: VkDeviceSize
    nonCoherentAtomSize*: VkDeviceSize

  VkSemaphoreCreateInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkSemaphoreCreateFlags

  VkQueryPoolCreateInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkQueryPoolCreateFlags
    queryType*: VkQueryType
    queryCount*: uint32
    pipelineStatistics*: VkQueryPipelineStatisticFlags

  VkFramebufferCreateInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkFramebufferCreateFlags
    renderPass*: VkRenderPass
    attachmentCount*: uint32
    pAttachments*: ptr VkImageView
    width*: uint32
    height*: uint32
    layers*: uint32

  VkSubmitInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    waitSemaphoreCount*: uint32
    pWaitSemaphores*: ptr VkSemaphore
    pWaitDstStageMask*: ptr VkPipelineStageFlags
    commandBufferCount*: uint32
    pCommandBuffers*: ptr VkCommandBuffer
    signalSemaphoreCount*: uint32
    pSignalSemaphores*: ptr VkSemaphore

  VkDisplayPropertiesKHR*  = object
    display*: VkDisplayKHR
    displayName*: cstring
    physicalDimensions*: VkExtent2D
    physicalResolution*: VkExtent2D
    supportedTransforms*: VkSurfaceTransformFlagsKHR
    planeReorderPossible*: VkBool32
    persistentContent*: VkBool32

  VkDisplayModeCreateInfoKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkDisplayModeCreateFlagsKHR
    parameters*: VkDisplayModeParametersKHR

  VkDisplayPlaneCapabilitiesKHR*  = object
    supportedAlpha*: VkDisplayPlaneAlphaFlagsKHR
    minSrcPosition*: VkOffset2D
    maxSrcPosition*: VkOffset2D
    minSrcExtent*: VkExtent2D
    maxSrcExtent*: VkExtent2D
    minDstPosition*: VkOffset2D
    maxDstPosition*: VkOffset2D
    minDstExtent*: VkExtent2D
    maxDstExtent*: VkExtent2D

  VkDisplaySurfaceCreateInfoKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkDisplaySurfaceCreateFlagsKHR
    displayMode*: VkDisplayModeKHR
    planeIndex*: uint32
    planeStackIndex*: uint32
    transform*: VkSurfaceTransformFlagBitsKHR
    globalAlpha*: float32
    alphaMode*: VkDisplayPlaneAlphaFlagBitsKHR
    imageExtent*: VkExtent2D

  VkDisplayPresentInfoKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    srcRect*: VkRect2D
    dstRect*: VkRect2D
    persistent*: VkBool32

  VkSurfaceCapabilitiesKHR*  = object
    minImageCount*: uint32
    maxImageCount*: uint32
    currentExtent*: VkExtent2D
    minImageExtent*: VkExtent2D
    maxImageExtent*: VkExtent2D
    maxImageArrayLayers*: uint32
    supportedTransforms*: VkSurfaceTransformFlagsKHR
    currentTransform*: VkSurfaceTransformFlagBitsKHR
    supportedCompositeAlpha*: VkCompositeAlphaFlagsKHR
    supportedUsageFlags*: VkImageUsageFlags

  VkAndroidSurfaceCreateInfoKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkAndroidSurfaceCreateFlagsKHR
    window*: ptr ANativeWindow

  VkViSurfaceCreateInfoNN*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkViSurfaceCreateFlagsNN
    window*: pointer

  VkWaylandSurfaceCreateInfoKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkWaylandSurfaceCreateFlagsKHR
    display*: ptr wl_display
    surface*: ptr wl_surface

  VkWin32SurfaceCreateInfoKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkWin32SurfaceCreateFlagsKHR
    hinstance*: HINSTANCE
    hwnd*: HWND

  VkXlibSurfaceCreateInfoKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkXlibSurfaceCreateFlagsKHR
    dpy*: ptr Display
    window*: Window

  VkXcbSurfaceCreateInfoKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkXcbSurfaceCreateFlagsKHR
    connection*: ptr xcb_connection_t
    window*: xcb_window_t

  VkDirectFBSurfaceCreateInfoEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkDirectFBSurfaceCreateFlagsEXT
    dfb*: ptr IDirectFB
    surface*: ptr IDirectFBSurface

  VkImagePipeSurfaceCreateInfoFUCHSIA*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkImagePipeSurfaceCreateFlagsFUCHSIA
    imagePipeHandle*: zx_handle_t

  VkStreamDescriptorSurfaceCreateInfoGGP*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkStreamDescriptorSurfaceCreateFlagsGGP
    streamDescriptor*: GgpStreamDescriptor

  VkSwapchainCreateInfoKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkSwapchainCreateFlagsKHR
    surface*: VkSurfaceKHR
    minImageCount*: uint32
    imageFormat*: VkFormat
    imageColorSpace*: VkColorSpaceKHR
    imageExtent*: VkExtent2D
    imageArrayLayers*: uint32
    imageUsage*: VkImageUsageFlags
    imageSharingMode*: VkSharingMode
    queueFamilyIndexCount*: uint32
    pQueueFamilyIndices*: ptr uint32
    preTransform*: VkSurfaceTransformFlagBitsKHR
    compositeAlpha*: VkCompositeAlphaFlagBitsKHR
    presentMode*: VkPresentModeKHR
    clipped*: VkBool32
    oldSwapchain*: VkSwapchainKHR

  VkDebugReportCallbackCreateInfoEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkDebugReportFlagsEXT
    pfnCallback*: PFN_vkDebugReportCallbackEXT
    pUserData*: pointer

  VkDedicatedAllocationImageCreateInfoNV*  = object
    sType*: VkStructureType
    pNext*: pointer
    dedicatedAllocation*: VkBool32

  VkDedicatedAllocationBufferCreateInfoNV*  = object
    sType*: VkStructureType
    pNext*: pointer
    dedicatedAllocation*: VkBool32

  VkExternalImageFormatPropertiesNV*  = object
    imageFormatProperties*: VkImageFormatProperties
    externalMemoryFeatures*: VkExternalMemoryFeatureFlagsNV
    exportFromImportedHandleTypes*: VkExternalMemoryHandleTypeFlagsNV
    compatibleHandleTypes*: VkExternalMemoryHandleTypeFlagsNV

  VkExternalMemoryImageCreateInfoNV*  = object
    sType*: VkStructureType
    pNext*: pointer
    handleTypes*: VkExternalMemoryHandleTypeFlagsNV

  VkExportMemoryAllocateInfoNV*  = object
    sType*: VkStructureType
    pNext*: pointer
    handleTypes*: VkExternalMemoryHandleTypeFlagsNV

  VkImportMemoryWin32HandleInfoNV*  = object
    sType*: VkStructureType
    pNext*: pointer
    handleType*: VkExternalMemoryHandleTypeFlagsNV
    handle*: HANDLE

  VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV*  = object
    sType*: VkStructureType
    pNext*: pointer
    deviceGeneratedCommands*: VkBool32

  VkPrivateDataSlotCreateInfoEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkPrivateDataSlotCreateFlagsEXT

  VkPhysicalDevicePrivateDataFeaturesEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    privateData*: VkBool32

  VkGraphicsShaderGroupCreateInfoNV*  = object
    sType*: VkStructureType
    pNext*: pointer
    stageCount*: uint32
    pStages*: ptr VkPipelineShaderStageCreateInfo
    pVertexInputState*: ptr VkPipelineVertexInputStateCreateInfo
    pTessellationState*: ptr VkPipelineTessellationStateCreateInfo

  VkGraphicsPipelineShaderGroupsCreateInfoNV*  = object
    sType*: VkStructureType
    pNext*: pointer
    groupCount*: uint32
    pGroups*: ptr VkGraphicsShaderGroupCreateInfoNV
    pipelineCount*: uint32
    pPipelines*: ptr VkPipeline

  VkBindIndexBufferIndirectCommandNV*  = object
    bufferAddress*: VkDeviceAddress
    size*: uint32
    indexType*: VkIndexType

  VkBindVertexBufferIndirectCommandNV*  = object
    bufferAddress*: VkDeviceAddress
    size*: uint32
    stride*: uint32

  VkIndirectCommandsStreamNV*  = object
    buffer*: VkBuffer
    offset*: VkDeviceSize

  VkIndirectCommandsLayoutTokenNV*  = object
    sType*: VkStructureType
    pNext*: pointer
    tokenType*: VkIndirectCommandsTokenTypeNV
    stream*: uint32
    offset*: uint32
    vertexBindingUnit*: uint32
    vertexDynamicStride*: VkBool32
    pushconstantPipelineLayout*: VkPipelineLayout
    pushconstantShaderStageFlags*: VkShaderStageFlags
    pushconstantOffset*: uint32
    pushconstantSize*: uint32
    indirectStateFlags*: VkIndirectStateFlagsNV
    indexTypeCount*: uint32
    pIndexTypes*: ptr VkIndexType
    pIndexTypeValues*: ptr uint32

  VkIndirectCommandsLayoutCreateInfoNV*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkIndirectCommandsLayoutUsageFlagsNV
    pipelineBindPoint*: VkPipelineBindPoint
    tokenCount*: uint32
    pTokens*: ptr VkIndirectCommandsLayoutTokenNV
    streamCount*: uint32
    pStreamStrides*: ptr uint32

  VkGeneratedCommandsInfoNV*  = object
    sType*: VkStructureType
    pNext*: pointer
    pipelineBindPoint*: VkPipelineBindPoint
    pipeline*: VkPipeline
    indirectCommandsLayout*: VkIndirectCommandsLayoutNV
    streamCount*: uint32
    pStreams*: ptr VkIndirectCommandsStreamNV
    sequencesCount*: uint32
    preprocessBuffer*: VkBuffer
    preprocessOffset*: VkDeviceSize
    preprocessSize*: VkDeviceSize
    sequencesCountBuffer*: VkBuffer
    sequencesCountOffset*: VkDeviceSize
    sequencesIndexBuffer*: VkBuffer
    sequencesIndexOffset*: VkDeviceSize

  VkPhysicalDeviceFeatures2*  = object
    sType*: VkStructureType
    pNext*: pointer
    features*: VkPhysicalDeviceFeatures

  VkPhysicalDeviceFeatures2KHR* = VkPhysicalDeviceFeatures2

  VkFormatProperties2*  = object
    sType*: VkStructureType
    pNext*: pointer
    formatProperties*: VkFormatProperties

  VkFormatProperties2KHR* = VkFormatProperties2

  VkImageFormatProperties2*  = object
    sType*: VkStructureType
    pNext*: pointer
    imageFormatProperties*: VkImageFormatProperties

  VkImageFormatProperties2KHR* = VkImageFormatProperties2

  VkPhysicalDeviceImageFormatInfo2*  = object
    sType*: VkStructureType
    pNext*: pointer
    format*: VkFormat
    `type`*: VkImageType
    tiling*: VkImageTiling
    usage*: VkImageUsageFlags
    flags*: VkImageCreateFlags

  VkPhysicalDeviceImageFormatInfo2KHR* = VkPhysicalDeviceImageFormatInfo2

  VkQueueFamilyProperties2*  = object
    sType*: VkStructureType
    pNext*: pointer
    queueFamilyProperties*: VkQueueFamilyProperties

  VkQueueFamilyProperties2KHR* = VkQueueFamilyProperties2

  VkSparseImageFormatProperties2*  = object
    sType*: VkStructureType
    pNext*: pointer
    properties*: VkSparseImageFormatProperties

  VkSparseImageFormatProperties2KHR* = VkSparseImageFormatProperties2

  VkPhysicalDeviceSparseImageFormatInfo2*  = object
    sType*: VkStructureType
    pNext*: pointer
    format*: VkFormat
    `type`*: VkImageType
    samples*: VkSampleCountFlagBits
    usage*: VkImageUsageFlags
    tiling*: VkImageTiling

  VkPhysicalDeviceSparseImageFormatInfo2KHR* = VkPhysicalDeviceSparseImageFormatInfo2

  VkPresentRegionKHR*  = object
    rectangleCount*: uint32
    pRectangles*: ptr VkRectLayerKHR

  VkPhysicalDeviceVariablePointersFeatures*  = object
    sType*: VkStructureType
    pNext*: pointer
    variablePointersStorageBuffer*: VkBool32
    variablePointers*: VkBool32

  VkPhysicalDeviceVariablePointersFeaturesKHR* = VkPhysicalDeviceVariablePointersFeatures

  VkPhysicalDeviceVariablePointerFeaturesKHR* = VkPhysicalDeviceVariablePointersFeatures

  VkPhysicalDeviceVariablePointerFeatures* = VkPhysicalDeviceVariablePointersFeatures

  VkExternalMemoryProperties*  = object
    externalMemoryFeatures*: VkExternalMemoryFeatureFlags
    exportFromImportedHandleTypes*: VkExternalMemoryHandleTypeFlags
    compatibleHandleTypes*: VkExternalMemoryHandleTypeFlags

  VkExternalMemoryPropertiesKHR* = VkExternalMemoryProperties

  VkExternalImageFormatProperties*  = object
    sType*: VkStructureType
    pNext*: pointer
    externalMemoryProperties*: VkExternalMemoryProperties

  VkExternalImageFormatPropertiesKHR* = VkExternalImageFormatProperties

  VkPhysicalDeviceExternalBufferInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkBufferCreateFlags
    usage*: VkBufferUsageFlags
    handleType*: VkExternalMemoryHandleTypeFlagBits

  VkPhysicalDeviceExternalBufferInfoKHR* = VkPhysicalDeviceExternalBufferInfo

  VkExternalBufferProperties*  = object
    sType*: VkStructureType
    pNext*: pointer
    externalMemoryProperties*: VkExternalMemoryProperties

  VkExternalBufferPropertiesKHR* = VkExternalBufferProperties

  VkPhysicalDeviceIDProperties*  = object
    sType*: VkStructureType
    pNext*: pointer
    deviceUUID*: array[VK_UUID_SIZE,uint8]
    driverUUID*: array[VK_UUID_SIZE,uint8]
    deviceLUID*: array[VK_LUID_SIZE,uint8]
    deviceNodeMask*: uint32
    deviceLUIDValid*: VkBool32

  VkPhysicalDeviceIDPropertiesKHR* = VkPhysicalDeviceIDProperties

  VkExternalMemoryImageCreateInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    handleTypes*: VkExternalMemoryHandleTypeFlags

  VkExternalMemoryImageCreateInfoKHR* = VkExternalMemoryImageCreateInfo

  VkExternalMemoryBufferCreateInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    handleTypes*: VkExternalMemoryHandleTypeFlags

  VkExternalMemoryBufferCreateInfoKHR* = VkExternalMemoryBufferCreateInfo

  VkExportMemoryAllocateInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    handleTypes*: VkExternalMemoryHandleTypeFlags

  VkExportMemoryAllocateInfoKHR* = VkExportMemoryAllocateInfo

  VkExternalSemaphoreProperties*  = object
    sType*: VkStructureType
    pNext*: pointer
    exportFromImportedHandleTypes*: VkExternalSemaphoreHandleTypeFlags
    compatibleHandleTypes*: VkExternalSemaphoreHandleTypeFlags
    externalSemaphoreFeatures*: VkExternalSemaphoreFeatureFlags

  VkExternalSemaphorePropertiesKHR* = VkExternalSemaphoreProperties

  VkExportSemaphoreCreateInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    handleTypes*: VkExternalSemaphoreHandleTypeFlags

  VkExportSemaphoreCreateInfoKHR* = VkExportSemaphoreCreateInfo

  VkImportSemaphoreWin32HandleInfoKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    semaphore*: VkSemaphore
    flags*: VkSemaphoreImportFlags
    handleType*: VkExternalSemaphoreHandleTypeFlagBits
    handle*: HANDLE
    name*: LPCWSTR

  VkImportSemaphoreFdInfoKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    semaphore*: VkSemaphore
    flags*: VkSemaphoreImportFlags
    handleType*: VkExternalSemaphoreHandleTypeFlagBits
    fd*: cint

  VkExternalFenceProperties*  = object
    sType*: VkStructureType
    pNext*: pointer
    exportFromImportedHandleTypes*: VkExternalFenceHandleTypeFlags
    compatibleHandleTypes*: VkExternalFenceHandleTypeFlags
    externalFenceFeatures*: VkExternalFenceFeatureFlags

  VkExternalFencePropertiesKHR* = VkExternalFenceProperties

  VkExportFenceCreateInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    handleTypes*: VkExternalFenceHandleTypeFlags

  VkExportFenceCreateInfoKHR* = VkExportFenceCreateInfo

  VkImportFenceWin32HandleInfoKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    fence*: VkFence
    flags*: VkFenceImportFlags
    handleType*: VkExternalFenceHandleTypeFlagBits
    handle*: HANDLE
    name*: LPCWSTR

  VkImportFenceFdInfoKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    fence*: VkFence
    flags*: VkFenceImportFlags
    handleType*: VkExternalFenceHandleTypeFlagBits
    fd*: cint

  VkPhysicalDeviceMultiviewFeatures*  = object
    sType*: VkStructureType
    pNext*: pointer
    multiview*: VkBool32
    multiviewGeometryShader*: VkBool32
    multiviewTessellationShader*: VkBool32

  VkPhysicalDeviceMultiviewFeaturesKHR* = VkPhysicalDeviceMultiviewFeatures

  VkSurfaceCapabilities2EXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    minImageCount*: uint32
    maxImageCount*: uint32
    currentExtent*: VkExtent2D
    minImageExtent*: VkExtent2D
    maxImageExtent*: VkExtent2D
    maxImageArrayLayers*: uint32
    supportedTransforms*: VkSurfaceTransformFlagsKHR
    currentTransform*: VkSurfaceTransformFlagBitsKHR
    supportedCompositeAlpha*: VkCompositeAlphaFlagsKHR
    supportedUsageFlags*: VkImageUsageFlags
    supportedSurfaceCounters*: VkSurfaceCounterFlagsEXT

  VkSwapchainCounterCreateInfoEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    surfaceCounters*: VkSurfaceCounterFlagsEXT

  VkPhysicalDeviceGroupProperties*  = object
    sType*: VkStructureType
    pNext*: pointer
    physicalDeviceCount*: uint32
    physicalDevices*: array[VK_MAX_DEVICE_GROUP_SIZE,VkPhysicalDevice]
    subsetAllocation*: VkBool32

  VkPhysicalDeviceGroupPropertiesKHR* = VkPhysicalDeviceGroupProperties

  VkMemoryAllocateFlagsInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkMemoryAllocateFlags
    deviceMask*: uint32

  VkMemoryAllocateFlagsInfoKHR* = VkMemoryAllocateFlagsInfo

  VkBindBufferMemoryInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    buffer*: VkBuffer
    memory*: VkDeviceMemory
    memoryOffset*: VkDeviceSize

  VkBindBufferMemoryInfoKHR* = VkBindBufferMemoryInfo

  VkBindImageMemoryInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    image*: VkImage
    memory*: VkDeviceMemory
    memoryOffset*: VkDeviceSize

  VkBindImageMemoryInfoKHR* = VkBindImageMemoryInfo

  VkDeviceGroupPresentCapabilitiesKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    presentMask*: array[VK_MAX_DEVICE_GROUP_SIZE,uint32]
    modes*: VkDeviceGroupPresentModeFlagsKHR

  VkDeviceGroupSwapchainCreateInfoKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    modes*: VkDeviceGroupPresentModeFlagsKHR

  VkDescriptorUpdateTemplateCreateInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkDescriptorUpdateTemplateCreateFlags
    descriptorUpdateEntryCount*: uint32
    pDescriptorUpdateEntries*: ptr VkDescriptorUpdateTemplateEntry
    templateType*: VkDescriptorUpdateTemplateType
    descriptorSetLayout*: VkDescriptorSetLayout
    pipelineBindPoint*: VkPipelineBindPoint
    pipelineLayout*: VkPipelineLayout
    set*: uint32

  VkDescriptorUpdateTemplateCreateInfoKHR* = VkDescriptorUpdateTemplateCreateInfo

  VkDisplayNativeHdrSurfaceCapabilitiesAMD*  = object
    sType*: VkStructureType
    pNext*: pointer
    localDimmingSupport*: VkBool32

  VkSwapchainDisplayNativeHdrCreateInfoAMD*  = object
    sType*: VkStructureType
    pNext*: pointer
    localDimmingEnable*: VkBool32

  VkPresentTimesInfoGOOGLE*  = object
    sType*: VkStructureType
    pNext*: pointer
    swapchainCount*: uint32
    pTimes*: ptr VkPresentTimeGOOGLE

  VkIOSSurfaceCreateInfoMVK*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkIOSSurfaceCreateFlagsMVK
    pView*: pointer

  VkMacOSSurfaceCreateInfoMVK*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkMacOSSurfaceCreateFlagsMVK
    pView*: pointer

  VkMetalSurfaceCreateInfoEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkMetalSurfaceCreateFlagsEXT
    pLayer*: ptr CAMetalLayer

  VkPipelineViewportWScalingStateCreateInfoNV*  = object
    sType*: VkStructureType
    pNext*: pointer
    viewportWScalingEnable*: VkBool32
    viewportCount*: uint32
    pViewportWScalings*: ptr VkViewportWScalingNV

  VkPipelineViewportSwizzleStateCreateInfoNV*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkPipelineViewportSwizzleStateCreateFlagsNV
    viewportCount*: uint32
    pViewportSwizzles*: ptr VkViewportSwizzleNV

  VkPipelineDiscardRectangleStateCreateInfoEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkPipelineDiscardRectangleStateCreateFlagsEXT
    discardRectangleMode*: VkDiscardRectangleModeEXT
    discardRectangleCount*: uint32
    pDiscardRectangles*: ptr VkRect2D

  VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX*  = object
    sType*: VkStructureType
    pNext*: pointer
    perViewPositionAllComponents*: VkBool32

  VkInputAttachmentAspectReference*  = object
    subpass*: uint32
    inputAttachmentIndex*: uint32
    aspectMask*: VkImageAspectFlags

  VkInputAttachmentAspectReferenceKHR* = VkInputAttachmentAspectReference

  VkRenderPassInputAttachmentAspectCreateInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    aspectReferenceCount*: uint32
    pAspectReferences*: ptr VkInputAttachmentAspectReference

  VkRenderPassInputAttachmentAspectCreateInfoKHR* = VkRenderPassInputAttachmentAspectCreateInfo

  VkSurfaceCapabilities2KHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    surfaceCapabilities*: VkSurfaceCapabilitiesKHR

  VkDisplayProperties2KHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    displayProperties*: VkDisplayPropertiesKHR

  VkDisplayPlaneCapabilities2KHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    capabilities*: VkDisplayPlaneCapabilitiesKHR

  VkSharedPresentSurfaceCapabilitiesKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    sharedPresentSupportedUsageFlags*: VkImageUsageFlags

  VkPhysicalDevice16BitStorageFeatures*  = object
    sType*: VkStructureType
    pNext*: pointer
    storageBuffer16BitAccess*: VkBool32
    uniformAndStorageBuffer16BitAccess*: VkBool32
    storagePushConstant16*: VkBool32
    storageInputOutput16*: VkBool32

  VkPhysicalDevice16BitStorageFeaturesKHR* = VkPhysicalDevice16BitStorageFeatures

  VkPhysicalDeviceSubgroupProperties*  = object
    sType*: VkStructureType
    pNext*: pointer
    subgroupSize*: uint32
    supportedStages*: VkShaderStageFlags
    supportedOperations*: VkSubgroupFeatureFlags
    quadOperationsInAllStages*: VkBool32

  VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures*  = object
    sType*: VkStructureType
    pNext*: pointer
    shaderSubgroupExtendedTypes*: VkBool32

  VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR* = VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures

  VkMemoryRequirements2*  = object
    sType*: VkStructureType
    pNext*: pointer
    memoryRequirements*: VkMemoryRequirements

  VkMemoryRequirements2KHR* = VkMemoryRequirements2

  VkSparseImageMemoryRequirements2*  = object
    sType*: VkStructureType
    pNext*: pointer
    memoryRequirements*: VkSparseImageMemoryRequirements

  VkSparseImageMemoryRequirements2KHR* = VkSparseImageMemoryRequirements2

  VkMemoryDedicatedRequirements*  = object
    sType*: VkStructureType
    pNext*: pointer
    prefersDedicatedAllocation*: VkBool32
    requiresDedicatedAllocation*: VkBool32

  VkMemoryDedicatedRequirementsKHR* = VkMemoryDedicatedRequirements

  VkImageViewUsageCreateInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    usage*: VkImageUsageFlags

  VkImageViewUsageCreateInfoKHR* = VkImageViewUsageCreateInfo

  VkSamplerYcbcrConversionCreateInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    format*: VkFormat
    ycbcrModel*: VkSamplerYcbcrModelConversion
    ycbcrRange*: VkSamplerYcbcrRange
    components*: VkComponentMapping
    xChromaOffset*: VkChromaLocation
    yChromaOffset*: VkChromaLocation
    chromaFilter*: VkFilter
    forceExplicitReconstruction*: VkBool32

  VkSamplerYcbcrConversionCreateInfoKHR* = VkSamplerYcbcrConversionCreateInfo

  VkPhysicalDeviceSamplerYcbcrConversionFeatures*  = object
    sType*: VkStructureType
    pNext*: pointer
    samplerYcbcrConversion*: VkBool32

  VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR* = VkPhysicalDeviceSamplerYcbcrConversionFeatures

  VkTextureLODGatherFormatPropertiesAMD*  = object
    sType*: VkStructureType
    pNext*: pointer
    supportsTextureGatherLODBiasAMD*: VkBool32

  VkConditionalRenderingBeginInfoEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    buffer*: VkBuffer
    offset*: VkDeviceSize
    flags*: VkConditionalRenderingFlagsEXT

  VkProtectedSubmitInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    protectedSubmit*: VkBool32

  VkPhysicalDeviceProtectedMemoryFeatures*  = object
    sType*: VkStructureType
    pNext*: pointer
    protectedMemory*: VkBool32

  VkPhysicalDeviceProtectedMemoryProperties*  = object
    sType*: VkStructureType
    pNext*: pointer
    protectedNoFault*: VkBool32

  VkDeviceQueueInfo2*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkDeviceQueueCreateFlags
    queueFamilyIndex*: uint32
    queueIndex*: uint32

  VkPipelineCoverageToColorStateCreateInfoNV*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkPipelineCoverageToColorStateCreateFlagsNV
    coverageToColorEnable*: VkBool32
    coverageToColorLocation*: uint32

  VkPhysicalDeviceSamplerFilterMinmaxProperties*  = object
    sType*: VkStructureType
    pNext*: pointer
    filterMinmaxSingleComponentFormats*: VkBool32
    filterMinmaxImageComponentMapping*: VkBool32

  VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT* = VkPhysicalDeviceSamplerFilterMinmaxProperties

  VkPipelineSampleLocationsStateCreateInfoEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    sampleLocationsEnable*: VkBool32
    sampleLocationsInfo*: VkSampleLocationsInfoEXT

  VkPhysicalDeviceSampleLocationsPropertiesEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    sampleLocationSampleCounts*: VkSampleCountFlags
    maxSampleLocationGridSize*: VkExtent2D
    sampleLocationCoordinateRange*: array[2,float32]
    sampleLocationSubPixelBits*: uint32
    variableSampleLocations*: VkBool32

  VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    advancedBlendCoherentOperations*: VkBool32

  VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    advancedBlendMaxColorAttachments*: uint32
    advancedBlendIndependentBlend*: VkBool32
    advancedBlendNonPremultipliedSrcColor*: VkBool32
    advancedBlendNonPremultipliedDstColor*: VkBool32
    advancedBlendCorrelatedOverlap*: VkBool32
    advancedBlendAllOperations*: VkBool32

  VkPipelineColorBlendAdvancedStateCreateInfoEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    srcPremultiplied*: VkBool32
    dstPremultiplied*: VkBool32
    blendOverlap*: VkBlendOverlapEXT

  VkPhysicalDeviceInlineUniformBlockFeaturesEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    inlineUniformBlock*: VkBool32
    descriptorBindingInlineUniformBlockUpdateAfterBind*: VkBool32

  VkPipelineCoverageModulationStateCreateInfoNV*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkPipelineCoverageModulationStateCreateFlagsNV
    coverageModulationMode*: VkCoverageModulationModeNV
    coverageModulationTableEnable*: VkBool32
    coverageModulationTableCount*: uint32
    pCoverageModulationTable*: ptr float32

  VkValidationCacheCreateInfoEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkValidationCacheCreateFlagsEXT
    initialDataSize*: uint
    pInitialData*: pointer

  VkPhysicalDeviceMaintenance3Properties*  = object
    sType*: VkStructureType
    pNext*: pointer
    maxPerSetDescriptors*: uint32
    maxMemoryAllocationSize*: VkDeviceSize

  VkPhysicalDeviceMaintenance3PropertiesKHR* = VkPhysicalDeviceMaintenance3Properties

  VkDescriptorSetLayoutSupport*  = object
    sType*: VkStructureType
    pNext*: pointer
    supported*: VkBool32

  VkDescriptorSetLayoutSupportKHR* = VkDescriptorSetLayoutSupport

  VkPhysicalDeviceShaderDrawParametersFeatures*  = object
    sType*: VkStructureType
    pNext*: pointer
    shaderDrawParameters*: VkBool32

  VkPhysicalDeviceShaderDrawParameterFeatures* = VkPhysicalDeviceShaderDrawParametersFeatures

  VkPhysicalDeviceShaderFloat16Int8Features*  = object
    sType*: VkStructureType
    pNext*: pointer
    shaderFloat16*: VkBool32
    shaderInt8*: VkBool32

  VkPhysicalDeviceShaderFloat16Int8FeaturesKHR* = VkPhysicalDeviceShaderFloat16Int8Features

  VkPhysicalDeviceFloat16Int8FeaturesKHR* = VkPhysicalDeviceShaderFloat16Int8Features

  VkPhysicalDeviceFloatControlsProperties*  = object
    sType*: VkStructureType
    pNext*: pointer
    denormBehaviorIndependence*: VkShaderFloatControlsIndependence
    roundingModeIndependence*: VkShaderFloatControlsIndependence
    shaderSignedZeroInfNanPreserveFloat16*: VkBool32
    shaderSignedZeroInfNanPreserveFloat32*: VkBool32
    shaderSignedZeroInfNanPreserveFloat64*: VkBool32
    shaderDenormPreserveFloat16*: VkBool32
    shaderDenormPreserveFloat32*: VkBool32
    shaderDenormPreserveFloat64*: VkBool32
    shaderDenormFlushToZeroFloat16*: VkBool32
    shaderDenormFlushToZeroFloat32*: VkBool32
    shaderDenormFlushToZeroFloat64*: VkBool32
    shaderRoundingModeRTEFloat16*: VkBool32
    shaderRoundingModeRTEFloat32*: VkBool32
    shaderRoundingModeRTEFloat64*: VkBool32
    shaderRoundingModeRTZFloat16*: VkBool32
    shaderRoundingModeRTZFloat32*: VkBool32
    shaderRoundingModeRTZFloat64*: VkBool32

  VkPhysicalDeviceFloatControlsPropertiesKHR* = VkPhysicalDeviceFloatControlsProperties

  VkPhysicalDeviceHostQueryResetFeatures*  = object
    sType*: VkStructureType
    pNext*: pointer
    hostQueryReset*: VkBool32

  VkPhysicalDeviceHostQueryResetFeaturesEXT* = VkPhysicalDeviceHostQueryResetFeatures

  VkShaderStatisticsInfoAMD*  = object
    shaderStageMask*: VkShaderStageFlags
    resourceUsage*: VkShaderResourceUsageAMD
    numPhysicalVgprs*: uint32
    numPhysicalSgprs*: uint32
    numAvailableVgprs*: uint32
    numAvailableSgprs*: uint32
    computeWorkGroupSize*: array[3,uint32]

  VkDebugUtilsMessengerCallbackDataEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkDebugUtilsMessengerCallbackDataFlagsEXT
    pMessageIdName*: cstring
    messageIdNumber*: int32
    pMessage*: cstring
    queueLabelCount*: uint32
    pQueueLabels*: ptr VkDebugUtilsLabelEXT
    cmdBufLabelCount*: uint32
    pCmdBufLabels*: ptr VkDebugUtilsLabelEXT
    objectCount*: uint32
    pObjects*: ptr VkDebugUtilsObjectNameInfoEXT

  VkPhysicalDeviceExternalMemoryHostPropertiesEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    minImportedHostPointerAlignment*: VkDeviceSize

  VkPhysicalDeviceConservativeRasterizationPropertiesEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    primitiveOverestimationSize*: float32
    maxExtraPrimitiveOverestimationSize*: float32
    extraPrimitiveOverestimationSizeGranularity*: float32
    primitiveUnderestimation*: VkBool32
    conservativePointAndLineRasterization*: VkBool32
    degenerateTrianglesRasterized*: VkBool32
    degenerateLinesRasterized*: VkBool32
    fullyCoveredFragmentShaderInputVariable*: VkBool32
    conservativeRasterizationPostDepthCoverage*: VkBool32

  VkPhysicalDeviceShaderCoreProperties2AMD*  = object
    sType*: VkStructureType
    pNext*: pointer
    shaderCoreFeatures*: VkShaderCorePropertiesFlagsAMD
    activeComputeUnitCount*: uint32

  VkPipelineRasterizationConservativeStateCreateInfoEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkPipelineRasterizationConservativeStateCreateFlagsEXT
    conservativeRasterizationMode*: VkConservativeRasterizationModeEXT
    extraPrimitiveOverestimationSize*: float32

  VkPhysicalDeviceDescriptorIndexingFeatures*  = object
    sType*: VkStructureType
    pNext*: pointer
    shaderInputAttachmentArrayDynamicIndexing*: VkBool32
    shaderUniformTexelBufferArrayDynamicIndexing*: VkBool32
    shaderStorageTexelBufferArrayDynamicIndexing*: VkBool32
    shaderUniformBufferArrayNonUniformIndexing*: VkBool32
    shaderSampledImageArrayNonUniformIndexing*: VkBool32
    shaderStorageBufferArrayNonUniformIndexing*: VkBool32
    shaderStorageImageArrayNonUniformIndexing*: VkBool32
    shaderInputAttachmentArrayNonUniformIndexing*: VkBool32
    shaderUniformTexelBufferArrayNonUniformIndexing*: VkBool32
    shaderStorageTexelBufferArrayNonUniformIndexing*: VkBool32
    descriptorBindingUniformBufferUpdateAfterBind*: VkBool32
    descriptorBindingSampledImageUpdateAfterBind*: VkBool32
    descriptorBindingStorageImageUpdateAfterBind*: VkBool32
    descriptorBindingStorageBufferUpdateAfterBind*: VkBool32
    descriptorBindingUniformTexelBufferUpdateAfterBind*: VkBool32
    descriptorBindingStorageTexelBufferUpdateAfterBind*: VkBool32
    descriptorBindingUpdateUnusedWhilePending*: VkBool32
    descriptorBindingPartiallyBound*: VkBool32
    descriptorBindingVariableDescriptorCount*: VkBool32
    runtimeDescriptorArray*: VkBool32

  VkPhysicalDeviceDescriptorIndexingFeaturesEXT* = VkPhysicalDeviceDescriptorIndexingFeatures

  VkPhysicalDeviceDescriptorIndexingProperties*  = object
    sType*: VkStructureType
    pNext*: pointer
    maxUpdateAfterBindDescriptorsInAllPools*: uint32
    shaderUniformBufferArrayNonUniformIndexingNative*: VkBool32
    shaderSampledImageArrayNonUniformIndexingNative*: VkBool32
    shaderStorageBufferArrayNonUniformIndexingNative*: VkBool32
    shaderStorageImageArrayNonUniformIndexingNative*: VkBool32
    shaderInputAttachmentArrayNonUniformIndexingNative*: VkBool32
    robustBufferAccessUpdateAfterBind*: VkBool32
    quadDivergentImplicitLod*: VkBool32
    maxPerStageDescriptorUpdateAfterBindSamplers*: uint32
    maxPerStageDescriptorUpdateAfterBindUniformBuffers*: uint32
    maxPerStageDescriptorUpdateAfterBindStorageBuffers*: uint32
    maxPerStageDescriptorUpdateAfterBindSampledImages*: uint32
    maxPerStageDescriptorUpdateAfterBindStorageImages*: uint32
    maxPerStageDescriptorUpdateAfterBindInputAttachments*: uint32
    maxPerStageUpdateAfterBindResources*: uint32
    maxDescriptorSetUpdateAfterBindSamplers*: uint32
    maxDescriptorSetUpdateAfterBindUniformBuffers*: uint32
    maxDescriptorSetUpdateAfterBindUniformBuffersDynamic*: uint32
    maxDescriptorSetUpdateAfterBindStorageBuffers*: uint32
    maxDescriptorSetUpdateAfterBindStorageBuffersDynamic*: uint32
    maxDescriptorSetUpdateAfterBindSampledImages*: uint32
    maxDescriptorSetUpdateAfterBindStorageImages*: uint32
    maxDescriptorSetUpdateAfterBindInputAttachments*: uint32

  VkPhysicalDeviceDescriptorIndexingPropertiesEXT* = VkPhysicalDeviceDescriptorIndexingProperties

  VkDescriptorSetLayoutBindingFlagsCreateInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    bindingCount*: uint32
    pBindingFlags*: ptr VkDescriptorBindingFlags

  VkDescriptorSetLayoutBindingFlagsCreateInfoEXT* = VkDescriptorSetLayoutBindingFlagsCreateInfo

  VkAttachmentDescription2*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkAttachmentDescriptionFlags
    format*: VkFormat
    samples*: VkSampleCountFlagBits
    loadOp*: VkAttachmentLoadOp
    storeOp*: VkAttachmentStoreOp
    stencilLoadOp*: VkAttachmentLoadOp
    stencilStoreOp*: VkAttachmentStoreOp
    initialLayout*: VkImageLayout
    finalLayout*: VkImageLayout

  VkAttachmentDescription2KHR* = VkAttachmentDescription2

  VkAttachmentReference2*  = object
    sType*: VkStructureType
    pNext*: pointer
    attachment*: uint32
    layout*: VkImageLayout
    aspectMask*: VkImageAspectFlags

  VkAttachmentReference2KHR* = VkAttachmentReference2

  VkSubpassDescription2*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkSubpassDescriptionFlags
    pipelineBindPoint*: VkPipelineBindPoint
    viewMask*: uint32
    inputAttachmentCount*: uint32
    pInputAttachments*: ptr VkAttachmentReference2
    colorAttachmentCount*: uint32
    pColorAttachments*: ptr VkAttachmentReference2
    pResolveAttachments*: ptr VkAttachmentReference2
    pDepthStencilAttachment*: ptr VkAttachmentReference2
    preserveAttachmentCount*: uint32
    pPreserveAttachments*: ptr uint32

  VkSubpassDescription2KHR* = VkSubpassDescription2

  VkSubpassDependency2*  = object
    sType*: VkStructureType
    pNext*: pointer
    srcSubpass*: uint32
    dstSubpass*: uint32
    srcStageMask*: VkPipelineStageFlags
    dstStageMask*: VkPipelineStageFlags
    srcAccessMask*: VkAccessFlags
    dstAccessMask*: VkAccessFlags
    dependencyFlags*: VkDependencyFlags
    viewOffset*: int32

  VkSubpassDependency2KHR* = VkSubpassDependency2

  VkRenderPassCreateInfo2*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkRenderPassCreateFlags
    attachmentCount*: uint32
    pAttachments*: ptr VkAttachmentDescription2
    subpassCount*: uint32
    pSubpasses*: ptr VkSubpassDescription2
    dependencyCount*: uint32
    pDependencies*: ptr VkSubpassDependency2
    correlatedViewMaskCount*: uint32
    pCorrelatedViewMasks*: ptr uint32

  VkRenderPassCreateInfo2KHR* = VkRenderPassCreateInfo2

  VkPhysicalDeviceTimelineSemaphoreFeatures*  = object
    sType*: VkStructureType
    pNext*: pointer
    timelineSemaphore*: VkBool32

  VkPhysicalDeviceTimelineSemaphoreFeaturesKHR* = VkPhysicalDeviceTimelineSemaphoreFeatures

  VkSemaphoreWaitInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkSemaphoreWaitFlags
    semaphoreCount*: uint32
    pSemaphores*: ptr VkSemaphore
    pValues*: ptr uint64

  VkSemaphoreWaitInfoKHR* = VkSemaphoreWaitInfo

  VkAndroidHardwareBufferPropertiesANDROID*  = object
    sType*: VkStructureType
    pNext*: pointer
    allocationSize*: VkDeviceSize
    memoryTypeBits*: uint32

  VkAndroidHardwareBufferFormatPropertiesANDROID*  = object
    sType*: VkStructureType
    pNext*: pointer
    format*: VkFormat
    externalFormat*: uint64
    formatFeatures*: VkFormatFeatureFlags
    samplerYcbcrConversionComponents*: VkComponentMapping
    suggestedYcbcrModel*: VkSamplerYcbcrModelConversion
    suggestedYcbcrRange*: VkSamplerYcbcrRange
    suggestedXChromaOffset*: VkChromaLocation
    suggestedYChromaOffset*: VkChromaLocation

  VkCommandBufferInheritanceConditionalRenderingInfoEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    conditionalRenderingEnable*: VkBool32

  VkPhysicalDevice8BitStorageFeatures*  = object
    sType*: VkStructureType
    pNext*: pointer
    storageBuffer8BitAccess*: VkBool32
    uniformAndStorageBuffer8BitAccess*: VkBool32
    storagePushConstant8*: VkBool32

  VkPhysicalDevice8BitStorageFeaturesKHR* = VkPhysicalDevice8BitStorageFeatures

  VkPhysicalDeviceConditionalRenderingFeaturesEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    conditionalRendering*: VkBool32
    inheritedConditionalRendering*: VkBool32

  VkPhysicalDeviceVulkanMemoryModelFeatures*  = object
    sType*: VkStructureType
    pNext*: pointer
    vulkanMemoryModel*: VkBool32
    vulkanMemoryModelDeviceScope*: VkBool32
    vulkanMemoryModelAvailabilityVisibilityChains*: VkBool32

  VkPhysicalDeviceVulkanMemoryModelFeaturesKHR* = VkPhysicalDeviceVulkanMemoryModelFeatures

  VkPhysicalDeviceShaderAtomicInt64Features*  = object
    sType*: VkStructureType
    pNext*: pointer
    shaderBufferInt64Atomics*: VkBool32
    shaderSharedInt64Atomics*: VkBool32

  VkPhysicalDeviceShaderAtomicInt64FeaturesKHR* = VkPhysicalDeviceShaderAtomicInt64Features

  VkPhysicalDeviceShaderAtomicFloatFeaturesEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    shaderBufferFloat32Atomics*: VkBool32
    shaderBufferFloat32AtomicAdd*: VkBool32
    shaderBufferFloat64Atomics*: VkBool32
    shaderBufferFloat64AtomicAdd*: VkBool32
    shaderSharedFloat32Atomics*: VkBool32
    shaderSharedFloat32AtomicAdd*: VkBool32
    shaderSharedFloat64Atomics*: VkBool32
    shaderSharedFloat64AtomicAdd*: VkBool32
    shaderImageFloat32Atomics*: VkBool32
    shaderImageFloat32AtomicAdd*: VkBool32
    sparseImageFloat32Atomics*: VkBool32
    sparseImageFloat32AtomicAdd*: VkBool32

  VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    vertexAttributeInstanceRateDivisor*: VkBool32
    vertexAttributeInstanceRateZeroDivisor*: VkBool32

  VkQueueFamilyCheckpointPropertiesNV*  = object
    sType*: VkStructureType
    pNext*: pointer
    checkpointExecutionStageMask*: VkPipelineStageFlags

  VkPhysicalDeviceDepthStencilResolveProperties*  = object
    sType*: VkStructureType
    pNext*: pointer
    supportedDepthResolveModes*: VkResolveModeFlags
    supportedStencilResolveModes*: VkResolveModeFlags
    independentResolveNone*: VkBool32
    independentResolve*: VkBool32

  VkPhysicalDeviceDepthStencilResolvePropertiesKHR* = VkPhysicalDeviceDepthStencilResolveProperties

  VkSubpassDescriptionDepthStencilResolve*  = object
    sType*: VkStructureType
    pNext*: pointer
    depthResolveMode*: VkResolveModeFlagBits
    stencilResolveMode*: VkResolveModeFlagBits
    pDepthStencilResolveAttachment*: ptr VkAttachmentReference2

  VkSubpassDescriptionDepthStencilResolveKHR* = VkSubpassDescriptionDepthStencilResolve

  VkPhysicalDeviceASTCDecodeFeaturesEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    decodeModeSharedExponent*: VkBool32

  VkPhysicalDeviceTransformFeedbackFeaturesEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    transformFeedback*: VkBool32
    geometryStreams*: VkBool32

  VkPhysicalDeviceTransformFeedbackPropertiesEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    maxTransformFeedbackStreams*: uint32
    maxTransformFeedbackBuffers*: uint32
    maxTransformFeedbackBufferSize*: VkDeviceSize
    maxTransformFeedbackStreamDataSize*: uint32
    maxTransformFeedbackBufferDataSize*: uint32
    maxTransformFeedbackBufferDataStride*: uint32
    transformFeedbackQueries*: VkBool32
    transformFeedbackStreamsLinesTriangles*: VkBool32
    transformFeedbackRasterizationStreamSelect*: VkBool32
    transformFeedbackDraw*: VkBool32

  VkPipelineRasterizationStateStreamCreateInfoEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkPipelineRasterizationStateStreamCreateFlagsEXT
    rasterizationStream*: uint32

  VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV*  = object
    sType*: VkStructureType
    pNext*: pointer
    representativeFragmentTest*: VkBool32

  VkPipelineRepresentativeFragmentTestStateCreateInfoNV*  = object
    sType*: VkStructureType
    pNext*: pointer
    representativeFragmentTestEnable*: VkBool32

  VkPhysicalDeviceExclusiveScissorFeaturesNV*  = object
    sType*: VkStructureType
    pNext*: pointer
    exclusiveScissor*: VkBool32

  VkPhysicalDeviceCornerSampledImageFeaturesNV*  = object
    sType*: VkStructureType
    pNext*: pointer
    cornerSampledImage*: VkBool32

  VkPhysicalDeviceComputeShaderDerivativesFeaturesNV*  = object
    sType*: VkStructureType
    pNext*: pointer
    computeDerivativeGroupQuads*: VkBool32
    computeDerivativeGroupLinear*: VkBool32

  VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV*  = object
    sType*: VkStructureType
    pNext*: pointer
    fragmentShaderBarycentric*: VkBool32

  VkPhysicalDeviceShaderImageFootprintFeaturesNV*  = object
    sType*: VkStructureType
    pNext*: pointer
    imageFootprint*: VkBool32

  VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV*  = object
    sType*: VkStructureType
    pNext*: pointer
    dedicatedAllocationImageAliasing*: VkBool32

  VkPipelineViewportShadingRateImageStateCreateInfoNV*  = object
    sType*: VkStructureType
    pNext*: pointer
    shadingRateImageEnable*: VkBool32
    viewportCount*: uint32
    pShadingRatePalettes*: ptr VkShadingRatePaletteNV

  VkPhysicalDeviceShadingRateImageFeaturesNV*  = object
    sType*: VkStructureType
    pNext*: pointer
    shadingRateImage*: VkBool32
    shadingRateCoarseSampleOrder*: VkBool32

  VkPhysicalDeviceMeshShaderFeaturesNV*  = object
    sType*: VkStructureType
    pNext*: pointer
    taskShader*: VkBool32
    meshShader*: VkBool32

  VkRayTracingPipelineCreateInfoNV*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkPipelineCreateFlags
    stageCount*: uint32
    pStages*: ptr VkPipelineShaderStageCreateInfo
    groupCount*: uint32
    pGroups*: ptr VkRayTracingShaderGroupCreateInfoNV
    maxRecursionDepth*: uint32
    layout*: VkPipelineLayout
    basePipelineHandle*: VkPipeline
    basePipelineIndex*: int32

  VkRayTracingPipelineCreateInfoKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkPipelineCreateFlags
    stageCount*: uint32
    pStages*: ptr VkPipelineShaderStageCreateInfo
    groupCount*: uint32
    pGroups*: ptr VkRayTracingShaderGroupCreateInfoKHR
    maxRecursionDepth*: uint32
    libraries*: VkPipelineLibraryCreateInfoKHR
    pLibraryInterface*: ptr VkRayTracingPipelineInterfaceCreateInfoKHR
    layout*: VkPipelineLayout
    basePipelineHandle*: VkPipeline
    basePipelineIndex*: int32

  VkGeometryTrianglesNV*  = object
    sType*: VkStructureType
    pNext*: pointer
    vertexData*: VkBuffer
    vertexOffset*: VkDeviceSize
    vertexCount*: uint32
    vertexStride*: VkDeviceSize
    vertexFormat*: VkFormat
    indexData*: VkBuffer
    indexOffset*: VkDeviceSize
    indexCount*: uint32
    indexType*: VkIndexType
    transformData*: VkBuffer
    transformOffset*: VkDeviceSize

  VkGeometryAABBNV*  = object
    sType*: VkStructureType
    pNext*: pointer
    aabbData*: VkBuffer
    numAABBs*: uint32
    stride*: uint32
    offset*: VkDeviceSize

  VkGeometryDataNV*  = object
    triangles*: VkGeometryTrianglesNV
    aabbs*: VkGeometryAABBNV

  VkGeometryNV*  = object
    sType*: VkStructureType
    pNext*: pointer
    geometryType*: VkGeometryTypeKHR
    geometry*: VkGeometryDataNV
    flags*: VkGeometryFlagsKHR

  VkAccelerationStructureInfoNV*  = object
    sType*: VkStructureType
    pNext*: pointer
    `type`*: VkAccelerationStructureTypeNV
    flags*: VkBuildAccelerationStructureFlagsNV
    instanceCount*: uint32
    geometryCount*: uint32
    pGeometries*: ptr VkGeometryNV

  VkAccelerationStructureCreateInfoNV*  = object
    sType*: VkStructureType
    pNext*: pointer
    compactedSize*: VkDeviceSize
    info*: VkAccelerationStructureInfoNV

  VkBindAccelerationStructureMemoryInfoKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    accelerationStructure*: VkAccelerationStructureKHR
    memory*: VkDeviceMemory
    memoryOffset*: VkDeviceSize
    deviceIndexCount*: uint32
    pDeviceIndices*: ptr uint32

  VkBindAccelerationStructureMemoryInfoNV* = VkBindAccelerationStructureMemoryInfoKHR

  VkPhysicalDeviceRayTracingFeaturesKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    rayTracing*: VkBool32
    rayTracingShaderGroupHandleCaptureReplay*: VkBool32
    rayTracingShaderGroupHandleCaptureReplayMixed*: VkBool32
    rayTracingAccelerationStructureCaptureReplay*: VkBool32
    rayTracingIndirectTraceRays*: VkBool32
    rayTracingIndirectAccelerationStructureBuild*: VkBool32
    rayTracingHostAccelerationStructureCommands*: VkBool32
    rayQuery*: VkBool32
    rayTracingPrimitiveCulling*: VkBool32

  VkStridedBufferRegionKHR*  = object
    buffer*: VkBuffer
    offset*: VkDeviceSize
    stride*: VkDeviceSize
    size*: VkDeviceSize

  VkDrmFormatModifierPropertiesEXT*  = object
    drmFormatModifier*: uint64
    drmFormatModifierPlaneCount*: uint32
    drmFormatModifierTilingFeatures*: VkFormatFeatureFlags

  VkImageDrmFormatModifierExplicitCreateInfoEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    drmFormatModifier*: uint64
    drmFormatModifierPlaneCount*: uint32
    pPlaneLayouts*: ptr VkSubresourceLayout

  VkImageStencilUsageCreateInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    stencilUsage*: VkImageUsageFlags

  VkImageStencilUsageCreateInfoEXT* = VkImageStencilUsageCreateInfo

  VkPhysicalDeviceFragmentDensityMapFeaturesEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    fragmentDensityMap*: VkBool32
    fragmentDensityMapDynamic*: VkBool32
    fragmentDensityMapNonSubsampledImages*: VkBool32

  VkPhysicalDeviceFragmentDensityMap2FeaturesEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    fragmentDensityMapDeferred*: VkBool32

  VkPhysicalDeviceFragmentDensityMapPropertiesEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    minFragmentDensityTexelSize*: VkExtent2D
    maxFragmentDensityTexelSize*: VkExtent2D
    fragmentDensityInvocations*: VkBool32

  VkPhysicalDeviceFragmentDensityMap2PropertiesEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    subsampledLoads*: VkBool32
    subsampledCoarseReconstructionEarlyAccess*: VkBool32
    maxSubsampledArrayLayers*: uint32
    maxDescriptorSetSubsampledSamplers*: uint32

  VkPhysicalDeviceScalarBlockLayoutFeatures*  = object
    sType*: VkStructureType
    pNext*: pointer
    scalarBlockLayout*: VkBool32

  VkPhysicalDeviceScalarBlockLayoutFeaturesEXT* = VkPhysicalDeviceScalarBlockLayoutFeatures

  VkSurfaceProtectedCapabilitiesKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    supportsProtected*: VkBool32

  VkPhysicalDeviceUniformBufferStandardLayoutFeatures*  = object
    sType*: VkStructureType
    pNext*: pointer
    uniformBufferStandardLayout*: VkBool32

  VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR* = VkPhysicalDeviceUniformBufferStandardLayoutFeatures

  VkPhysicalDeviceDepthClipEnableFeaturesEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    depthClipEnable*: VkBool32

  VkPipelineRasterizationDepthClipStateCreateInfoEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkPipelineRasterizationDepthClipStateCreateFlagsEXT
    depthClipEnable*: VkBool32

  VkPhysicalDeviceMemoryBudgetPropertiesEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    heapBudget*: array[VK_MAX_MEMORY_HEAPS,VkDeviceSize]
    heapUsage*: array[VK_MAX_MEMORY_HEAPS,VkDeviceSize]

  VkPhysicalDeviceMemoryPriorityFeaturesEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    memoryPriority*: VkBool32

  VkPhysicalDeviceBufferDeviceAddressFeatures*  = object
    sType*: VkStructureType
    pNext*: pointer
    bufferDeviceAddress*: VkBool32
    bufferDeviceAddressCaptureReplay*: VkBool32
    bufferDeviceAddressMultiDevice*: VkBool32

  VkPhysicalDeviceBufferDeviceAddressFeaturesKHR* = VkPhysicalDeviceBufferDeviceAddressFeatures

  VkPhysicalDeviceBufferDeviceAddressFeaturesEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    bufferDeviceAddress*: VkBool32
    bufferDeviceAddressCaptureReplay*: VkBool32
    bufferDeviceAddressMultiDevice*: VkBool32

  VkPhysicalDeviceBufferAddressFeaturesEXT* = VkPhysicalDeviceBufferDeviceAddressFeaturesEXT

  VkBufferDeviceAddressCreateInfoEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    deviceAddress*: VkDeviceAddress

  VkFilterCubicImageViewImageFormatPropertiesEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    filterCubic*: VkBool32
    filterCubicMinmax*: VkBool32

  VkPhysicalDeviceImagelessFramebufferFeatures*  = object
    sType*: VkStructureType
    pNext*: pointer
    imagelessFramebuffer*: VkBool32

  VkPhysicalDeviceImagelessFramebufferFeaturesKHR* = VkPhysicalDeviceImagelessFramebufferFeatures

  VkFramebufferAttachmentImageInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkImageCreateFlags
    usage*: VkImageUsageFlags
    width*: uint32
    height*: uint32
    layerCount*: uint32
    viewFormatCount*: uint32
    pViewFormats*: ptr VkFormat

  VkFramebufferAttachmentImageInfoKHR* = VkFramebufferAttachmentImageInfo

  VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    textureCompressionASTC_HDR*: VkBool32

  VkPhysicalDeviceCooperativeMatrixFeaturesNV*  = object
    sType*: VkStructureType
    pNext*: pointer
    cooperativeMatrix*: VkBool32
    cooperativeMatrixRobustBufferAccess*: VkBool32

  VkPhysicalDeviceCooperativeMatrixPropertiesNV*  = object
    sType*: VkStructureType
    pNext*: pointer
    cooperativeMatrixSupportedStages*: VkShaderStageFlags

  VkPhysicalDeviceYcbcrImageArraysFeaturesEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    ycbcrImageArrays*: VkBool32

  VkImageViewAddressPropertiesNVX*  = object
    sType*: VkStructureType
    pNext*: pointer
    deviceAddress*: VkDeviceAddress
    size*: VkDeviceSize

  VkPipelineCreationFeedbackEXT*  = object
    flags*: VkPipelineCreationFeedbackFlagsEXT
    duration*: uint64

  VkPipelineCreationFeedbackCreateInfoEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    pPipelineCreationFeedback*: ptr VkPipelineCreationFeedbackEXT
    pipelineStageCreationFeedbackCount*: uint32
    pPipelineStageCreationFeedbacks*: ptr VkPipelineCreationFeedbackEXT

  VkSurfaceCapabilitiesFullScreenExclusiveEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    fullScreenExclusiveSupported*: VkBool32

  VkPhysicalDevicePerformanceQueryFeaturesKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    performanceCounterQueryPools*: VkBool32
    performanceCounterMultipleQueryPools*: VkBool32

  VkPhysicalDevicePerformanceQueryPropertiesKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    allowCommandBufferQueryCopies*: VkBool32

  VkPerformanceCounterDescriptionKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkPerformanceCounterDescriptionFlagsKHR
    name*: array[VK_MAX_DESCRIPTION_SIZE,char]
    category*: array[VK_MAX_DESCRIPTION_SIZE,char]
    description*: array[VK_MAX_DESCRIPTION_SIZE,char]

  VkAcquireProfilingLockInfoKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkAcquireProfilingLockFlagsKHR
    timeout*: uint64

  VkHeadlessSurfaceCreateInfoEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkHeadlessSurfaceCreateFlagsEXT

  VkPhysicalDeviceCoverageReductionModeFeaturesNV*  = object
    sType*: VkStructureType
    pNext*: pointer
    coverageReductionMode*: VkBool32

  VkPipelineCoverageReductionStateCreateInfoNV*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkPipelineCoverageReductionStateCreateFlagsNV
    coverageReductionMode*: VkCoverageReductionModeNV

  VkFramebufferMixedSamplesCombinationNV*  = object
    sType*: VkStructureType
    pNext*: pointer
    coverageReductionMode*: VkCoverageReductionModeNV
    rasterizationSamples*: VkSampleCountFlagBits
    depthStencilSamples*: VkSampleCountFlags
    colorSamples*: VkSampleCountFlags

  VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL*  = object
    sType*: VkStructureType
    pNext*: pointer
    shaderIntegerFunctions2*: VkBool32

  VkPerformanceValueDataINTEL* {.union.} = object
    value32*: uint32
    value64*: uint64
    valueFloat*: float32
    valueBool*: VkBool32
    valueString*: cstring

  VkPerformanceValueINTEL*  = object
    `type`*: VkPerformanceValueTypeINTEL
    data*: VkPerformanceValueDataINTEL

  VkPerformanceOverrideInfoINTEL*  = object
    sType*: VkStructureType
    pNext*: pointer
    `type`*: VkPerformanceOverrideTypeINTEL
    enable*: VkBool32
    parameter*: uint64

  VkPhysicalDeviceShaderClockFeaturesKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    shaderSubgroupClock*: VkBool32
    shaderDeviceClock*: VkBool32

  VkPhysicalDeviceIndexTypeUint8FeaturesEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    indexTypeUint8*: VkBool32

  VkPhysicalDeviceShaderSMBuiltinsFeaturesNV*  = object
    sType*: VkStructureType
    pNext*: pointer
    shaderSMBuiltins*: VkBool32

  VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    fragmentShaderSampleInterlock*: VkBool32
    fragmentShaderPixelInterlock*: VkBool32
    fragmentShaderShadingRateInterlock*: VkBool32

  VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures*  = object
    sType*: VkStructureType
    pNext*: pointer
    separateDepthStencilLayouts*: VkBool32

  VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR* = VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures

  VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    pipelineExecutableInfo*: VkBool32

  VkPipelineExecutablePropertiesKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    stages*: VkShaderStageFlags
    name*: array[VK_MAX_DESCRIPTION_SIZE,char]
    description*: array[VK_MAX_DESCRIPTION_SIZE,char]
    subgroupSize*: uint32

  VkPipelineExecutableStatisticValueKHR* {.union.} = object
    b32*: VkBool32
    i64*: int64
    u64*: uint64
    f64*: float64

  VkPipelineExecutableStatisticKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    name*: array[VK_MAX_DESCRIPTION_SIZE,char]
    description*: array[VK_MAX_DESCRIPTION_SIZE,char]
    format*: VkPipelineExecutableStatisticFormatKHR
    value*: VkPipelineExecutableStatisticValueKHR

  VkPipelineExecutableInternalRepresentationKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    name*: array[VK_MAX_DESCRIPTION_SIZE,char]
    description*: array[VK_MAX_DESCRIPTION_SIZE,char]
    isText*: VkBool32
    dataSize*: uint
    pData*: pointer

  VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    shaderDemoteToHelperInvocation*: VkBool32

  VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    texelBufferAlignment*: VkBool32

  VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    storageTexelBufferOffsetAlignmentBytes*: VkDeviceSize
    storageTexelBufferOffsetSingleTexelAlignment*: VkBool32
    uniformTexelBufferOffsetAlignmentBytes*: VkDeviceSize
    uniformTexelBufferOffsetSingleTexelAlignment*: VkBool32

  VkPhysicalDeviceSubgroupSizeControlFeaturesEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    subgroupSizeControl*: VkBool32
    computeFullSubgroups*: VkBool32

  VkPhysicalDeviceSubgroupSizeControlPropertiesEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    minSubgroupSize*: uint32
    maxSubgroupSize*: uint32
    maxComputeWorkgroupSubgroups*: uint32
    requiredSubgroupSizeStages*: VkShaderStageFlags

  VkPhysicalDeviceLineRasterizationFeaturesEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    rectangularLines*: VkBool32
    bresenhamLines*: VkBool32
    smoothLines*: VkBool32
    stippledRectangularLines*: VkBool32
    stippledBresenhamLines*: VkBool32
    stippledSmoothLines*: VkBool32

  VkPipelineRasterizationLineStateCreateInfoEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    lineRasterizationMode*: VkLineRasterizationModeEXT
    stippledLineEnable*: VkBool32
    lineStippleFactor*: uint32
    lineStipplePattern*: uint16

  VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    pipelineCreationCacheControl*: VkBool32

  VkPhysicalDeviceVulkan11Features*  = object
    sType*: VkStructureType
    pNext*: pointer
    storageBuffer16BitAccess*: VkBool32
    uniformAndStorageBuffer16BitAccess*: VkBool32
    storagePushConstant16*: VkBool32
    storageInputOutput16*: VkBool32
    multiview*: VkBool32
    multiviewGeometryShader*: VkBool32
    multiviewTessellationShader*: VkBool32
    variablePointersStorageBuffer*: VkBool32
    variablePointers*: VkBool32
    protectedMemory*: VkBool32
    samplerYcbcrConversion*: VkBool32
    shaderDrawParameters*: VkBool32

  VkPhysicalDeviceVulkan11Properties*  = object
    sType*: VkStructureType
    pNext*: pointer
    deviceUUID*: array[VK_UUID_SIZE,uint8]
    driverUUID*: array[VK_UUID_SIZE,uint8]
    deviceLUID*: array[VK_LUID_SIZE,uint8]
    deviceNodeMask*: uint32
    deviceLUIDValid*: VkBool32
    subgroupSize*: uint32
    subgroupSupportedStages*: VkShaderStageFlags
    subgroupSupportedOperations*: VkSubgroupFeatureFlags
    subgroupQuadOperationsInAllStages*: VkBool32
    pointClippingBehavior*: VkPointClippingBehavior
    maxMultiviewViewCount*: uint32
    maxMultiviewInstanceIndex*: uint32
    protectedNoFault*: VkBool32
    maxPerSetDescriptors*: uint32
    maxMemoryAllocationSize*: VkDeviceSize

  VkPhysicalDeviceVulkan12Features*  = object
    sType*: VkStructureType
    pNext*: pointer
    samplerMirrorClampToEdge*: VkBool32
    drawIndirectCount*: VkBool32
    storageBuffer8BitAccess*: VkBool32
    uniformAndStorageBuffer8BitAccess*: VkBool32
    storagePushConstant8*: VkBool32
    shaderBufferInt64Atomics*: VkBool32
    shaderSharedInt64Atomics*: VkBool32
    shaderFloat16*: VkBool32
    shaderInt8*: VkBool32
    descriptorIndexing*: VkBool32
    shaderInputAttachmentArrayDynamicIndexing*: VkBool32
    shaderUniformTexelBufferArrayDynamicIndexing*: VkBool32
    shaderStorageTexelBufferArrayDynamicIndexing*: VkBool32
    shaderUniformBufferArrayNonUniformIndexing*: VkBool32
    shaderSampledImageArrayNonUniformIndexing*: VkBool32
    shaderStorageBufferArrayNonUniformIndexing*: VkBool32
    shaderStorageImageArrayNonUniformIndexing*: VkBool32
    shaderInputAttachmentArrayNonUniformIndexing*: VkBool32
    shaderUniformTexelBufferArrayNonUniformIndexing*: VkBool32
    shaderStorageTexelBufferArrayNonUniformIndexing*: VkBool32
    descriptorBindingUniformBufferUpdateAfterBind*: VkBool32
    descriptorBindingSampledImageUpdateAfterBind*: VkBool32
    descriptorBindingStorageImageUpdateAfterBind*: VkBool32
    descriptorBindingStorageBufferUpdateAfterBind*: VkBool32
    descriptorBindingUniformTexelBufferUpdateAfterBind*: VkBool32
    descriptorBindingStorageTexelBufferUpdateAfterBind*: VkBool32
    descriptorBindingUpdateUnusedWhilePending*: VkBool32
    descriptorBindingPartiallyBound*: VkBool32
    descriptorBindingVariableDescriptorCount*: VkBool32
    runtimeDescriptorArray*: VkBool32
    samplerFilterMinmax*: VkBool32
    scalarBlockLayout*: VkBool32
    imagelessFramebuffer*: VkBool32
    uniformBufferStandardLayout*: VkBool32
    shaderSubgroupExtendedTypes*: VkBool32
    separateDepthStencilLayouts*: VkBool32
    hostQueryReset*: VkBool32
    timelineSemaphore*: VkBool32
    bufferDeviceAddress*: VkBool32
    bufferDeviceAddressCaptureReplay*: VkBool32
    bufferDeviceAddressMultiDevice*: VkBool32
    vulkanMemoryModel*: VkBool32
    vulkanMemoryModelDeviceScope*: VkBool32
    vulkanMemoryModelAvailabilityVisibilityChains*: VkBool32
    shaderOutputViewportIndex*: VkBool32
    shaderOutputLayer*: VkBool32
    subgroupBroadcastDynamicId*: VkBool32

  VkPhysicalDeviceVulkan12Properties*  = object
    sType*: VkStructureType
    pNext*: pointer
    driverID*: VkDriverId
    driverName*: array[VK_MAX_DRIVER_NAME_SIZE,char]
    driverInfo*: array[VK_MAX_DRIVER_INFO_SIZE,char]
    conformanceVersion*: VkConformanceVersion
    denormBehaviorIndependence*: VkShaderFloatControlsIndependence
    roundingModeIndependence*: VkShaderFloatControlsIndependence
    shaderSignedZeroInfNanPreserveFloat16*: VkBool32
    shaderSignedZeroInfNanPreserveFloat32*: VkBool32
    shaderSignedZeroInfNanPreserveFloat64*: VkBool32
    shaderDenormPreserveFloat16*: VkBool32
    shaderDenormPreserveFloat32*: VkBool32
    shaderDenormPreserveFloat64*: VkBool32
    shaderDenormFlushToZeroFloat16*: VkBool32
    shaderDenormFlushToZeroFloat32*: VkBool32
    shaderDenormFlushToZeroFloat64*: VkBool32
    shaderRoundingModeRTEFloat16*: VkBool32
    shaderRoundingModeRTEFloat32*: VkBool32
    shaderRoundingModeRTEFloat64*: VkBool32
    shaderRoundingModeRTZFloat16*: VkBool32
    shaderRoundingModeRTZFloat32*: VkBool32
    shaderRoundingModeRTZFloat64*: VkBool32
    maxUpdateAfterBindDescriptorsInAllPools*: uint32
    shaderUniformBufferArrayNonUniformIndexingNative*: VkBool32
    shaderSampledImageArrayNonUniformIndexingNative*: VkBool32
    shaderStorageBufferArrayNonUniformIndexingNative*: VkBool32
    shaderStorageImageArrayNonUniformIndexingNative*: VkBool32
    shaderInputAttachmentArrayNonUniformIndexingNative*: VkBool32
    robustBufferAccessUpdateAfterBind*: VkBool32
    quadDivergentImplicitLod*: VkBool32
    maxPerStageDescriptorUpdateAfterBindSamplers*: uint32
    maxPerStageDescriptorUpdateAfterBindUniformBuffers*: uint32
    maxPerStageDescriptorUpdateAfterBindStorageBuffers*: uint32
    maxPerStageDescriptorUpdateAfterBindSampledImages*: uint32
    maxPerStageDescriptorUpdateAfterBindStorageImages*: uint32
    maxPerStageDescriptorUpdateAfterBindInputAttachments*: uint32
    maxPerStageUpdateAfterBindResources*: uint32
    maxDescriptorSetUpdateAfterBindSamplers*: uint32
    maxDescriptorSetUpdateAfterBindUniformBuffers*: uint32
    maxDescriptorSetUpdateAfterBindUniformBuffersDynamic*: uint32
    maxDescriptorSetUpdateAfterBindStorageBuffers*: uint32
    maxDescriptorSetUpdateAfterBindStorageBuffersDynamic*: uint32
    maxDescriptorSetUpdateAfterBindSampledImages*: uint32
    maxDescriptorSetUpdateAfterBindStorageImages*: uint32
    maxDescriptorSetUpdateAfterBindInputAttachments*: uint32
    supportedDepthResolveModes*: VkResolveModeFlags
    supportedStencilResolveModes*: VkResolveModeFlags
    independentResolveNone*: VkBool32
    independentResolve*: VkBool32
    filterMinmaxSingleComponentFormats*: VkBool32
    filterMinmaxImageComponentMapping*: VkBool32
    maxTimelineSemaphoreValueDifference*: uint64
    framebufferIntegerColorSampleCounts*: VkSampleCountFlags

  VkPipelineCompilerControlCreateInfoAMD*  = object
    sType*: VkStructureType
    pNext*: pointer
    compilerControlFlags*: VkPipelineCompilerControlFlagsAMD

  VkPhysicalDeviceCoherentMemoryFeaturesAMD*  = object
    sType*: VkStructureType
    pNext*: pointer
    deviceCoherentMemory*: VkBool32

  VkPhysicalDeviceToolPropertiesEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    name*: array[VK_MAX_EXTENSION_NAME_SIZE,char]
    version*: array[VK_MAX_EXTENSION_NAME_SIZE,char]
    purposes*: VkToolPurposeFlagsEXT
    description*: array[VK_MAX_DESCRIPTION_SIZE,char]
    layer*: array[VK_MAX_EXTENSION_NAME_SIZE,char]

  VkPhysicalDeviceCustomBorderColorFeaturesEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    customBorderColors*: VkBool32
    customBorderColorWithoutFormat*: VkBool32

  VkDeviceOrHostAddressKHR* {.union.} = object
    deviceAddress*: VkDeviceAddress
    hostAddress*: pointer

  VkDeviceOrHostAddressConstKHR* {.union.} = object
    deviceAddress*: VkDeviceAddress
    hostAddress*: pointer

  VkAccelerationStructureGeometryTrianglesDataKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    vertexFormat*: VkFormat
    vertexData*: VkDeviceOrHostAddressConstKHR
    vertexStride*: VkDeviceSize
    indexType*: VkIndexType
    indexData*: VkDeviceOrHostAddressConstKHR
    transformData*: VkDeviceOrHostAddressConstKHR

  VkAccelerationStructureGeometryAabbsDataKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    data*: VkDeviceOrHostAddressConstKHR
    stride*: VkDeviceSize

  VkAccelerationStructureGeometryInstancesDataKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    arrayOfPointers*: VkBool32
    data*: VkDeviceOrHostAddressConstKHR

  VkAccelerationStructureGeometryDataKHR* {.union.} = object
    triangles*: VkAccelerationStructureGeometryTrianglesDataKHR
    aabbs*: VkAccelerationStructureGeometryAabbsDataKHR
    instances*: VkAccelerationStructureGeometryInstancesDataKHR

  VkAccelerationStructureGeometryKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    geometryType*: VkGeometryTypeKHR
    geometry*: VkAccelerationStructureGeometryDataKHR
    flags*: VkGeometryFlagsKHR

  VkAccelerationStructureBuildGeometryInfoKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    `type`*: VkAccelerationStructureTypeKHR
    flags*: VkBuildAccelerationStructureFlagsKHR
    update*: VkBool32
    srcAccelerationStructure*: VkAccelerationStructureKHR
    dstAccelerationStructure*: VkAccelerationStructureKHR
    geometryArrayOfPointers*: VkBool32
    geometryCount*: uint32
    ppGeometries*: ptr ptr VkAccelerationStructureGeometryKHR
    scratchData*: VkDeviceOrHostAddressKHR

  VkAccelerationStructureCreateGeometryTypeInfoKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    geometryType*: VkGeometryTypeKHR
    maxPrimitiveCount*: uint32
    indexType*: VkIndexType
    maxVertexCount*: uint32
    vertexFormat*: VkFormat
    allowsTransforms*: VkBool32

  VkAccelerationStructureCreateInfoKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    compactedSize*: VkDeviceSize
    `type`*: VkAccelerationStructureTypeKHR
    flags*: VkBuildAccelerationStructureFlagsKHR
    maxGeometryCount*: uint32
    pGeometryInfos*: ptr VkAccelerationStructureCreateGeometryTypeInfoKHR
    deviceAddress*: VkDeviceAddress

  VkAccelerationStructureInstanceKHR*  = object
    transform*: VkTransformMatrixKHR
    instanceCustomIndex*: uint32
    mask*: uint32
    instanceShaderBindingTableRecordOffset*: uint32
    flags*: VkGeometryInstanceFlagsKHR
    accelerationStructureReference*: uint64

  VkAccelerationStructureInstanceNV* = VkAccelerationStructureInstanceKHR

  VkCopyAccelerationStructureToMemoryInfoKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    src*: VkAccelerationStructureKHR
    dst*: VkDeviceOrHostAddressKHR
    mode*: VkCopyAccelerationStructureModeKHR

  VkCopyMemoryToAccelerationStructureInfoKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    src*: VkDeviceOrHostAddressConstKHR
    dst*: VkAccelerationStructureKHR
    mode*: VkCopyAccelerationStructureModeKHR

  VkPhysicalDeviceExtendedDynamicStateFeaturesEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    extendedDynamicState*: VkBool32

  VkPhysicalDeviceDiagnosticsConfigFeaturesNV*  = object
    sType*: VkStructureType
    pNext*: pointer
    diagnosticsConfig*: VkBool32

  VkDeviceDiagnosticsConfigCreateInfoNV*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkDeviceDiagnosticsConfigFlagsNV

  VkPhysicalDeviceRobustness2FeaturesEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    robustBufferAccess2*: VkBool32
    robustImageAccess2*: VkBool32
    nullDescriptor*: VkBool32

  VkPhysicalDeviceRobustness2PropertiesEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    robustStorageBufferAccessSizeAlignment*: VkDeviceSize
    robustUniformBufferAccessSizeAlignment*: VkDeviceSize

  VkPhysicalDeviceImageRobustnessFeaturesEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    robustImageAccess*: VkBool32

  VkPhysicalDevice4444FormatsFeaturesEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    formatA4R4G4B4*: VkBool32
    formatA4B4G4R4*: VkBool32

  PFN_vkDebugUtilsMessengerCallbackEXT* = proc(
    messageSeverity: VkDebugUtilsMessageSeverityFlagBitsEXT,
    messageTypes: VkDebugUtilsMessageTypeFlagsEXT,
    pCallbackData: ptr VkDebugUtilsMessengerCallbackDataEXT,
    pUserData: pointer,
   ): VkBool32 {.cdecl.}

  VkPhysicalDeviceProperties*  = object
    apiVersion*: uint32
    driverVersion*: uint32
    vendorID*: uint32
    deviceID*: uint32
    deviceType*: VkPhysicalDeviceType
    deviceName*: array[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE,char]
    pipelineCacheUUID*: array[VK_UUID_SIZE,uint8]
    limits*: VkPhysicalDeviceLimits
    sparseProperties*: VkPhysicalDeviceSparseProperties

  VkDeviceCreateInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkDeviceCreateFlags
    queueCreateInfoCount*: uint32
    pQueueCreateInfos*: ptr VkDeviceQueueCreateInfo
    enabledLayerCount*: uint32
    ppEnabledLayerNames*: ptr ptr char
    enabledExtensionCount*: uint32
    ppEnabledExtensionNames*: ptr ptr char
    pEnabledFeatures*: ptr VkPhysicalDeviceFeatures

  VkPhysicalDeviceMemoryProperties*  = object
    memoryTypeCount*: uint32
    memoryTypes*: array[VK_MAX_MEMORY_TYPES,VkMemoryType]
    memoryHeapCount*: uint32
    memoryHeaps*: array[VK_MAX_MEMORY_HEAPS,VkMemoryHeap]

  VkPhysicalDeviceProperties2*  = object
    sType*: VkStructureType
    pNext*: pointer
    properties*: VkPhysicalDeviceProperties

  VkPhysicalDeviceProperties2KHR* = VkPhysicalDeviceProperties2

  VkPhysicalDeviceMemoryProperties2*  = object
    sType*: VkStructureType
    pNext*: pointer
    memoryProperties*: VkPhysicalDeviceMemoryProperties

  VkPhysicalDeviceMemoryProperties2KHR* = VkPhysicalDeviceMemoryProperties2

  VkPresentRegionsKHR*  = object
    sType*: VkStructureType
    pNext*: pointer
    swapchainCount*: uint32
    pRegions*: ptr VkPresentRegionKHR

  VkDebugUtilsMessengerCreateInfoEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkDebugUtilsMessengerCreateFlagsEXT
    messageSeverity*: VkDebugUtilsMessageSeverityFlagsEXT
    messageType*: VkDebugUtilsMessageTypeFlagsEXT
    pfnUserCallback*: PFN_vkDebugUtilsMessengerCallbackEXT
    pUserData*: pointer

  VkDrmFormatModifierPropertiesListEXT*  = object
    sType*: VkStructureType
    pNext*: pointer
    drmFormatModifierCount*: uint32
    pDrmFormatModifierProperties*: ptr VkDrmFormatModifierPropertiesEXT

  VkFramebufferAttachmentsCreateInfo*  = object
    sType*: VkStructureType
    pNext*: pointer
    attachmentImageInfoCount*: uint32
    pAttachmentImageInfos*: ptr VkFramebufferAttachmentImageInfo

  VkFramebufferAttachmentsCreateInfoKHR* = VkFramebufferAttachmentsCreateInfo


proc mkVkBaseOutStructure*(
  sType: VkStructureType ,
  pNext: ptr VkBaseOutStructure = nil,
  ) : VkBaseOutStructure =
  result.sType = sType
  result.pNext = pNext

proc mkVkBaseInStructure*(
  sType: VkStructureType ,
  pNext: ptr VkBaseInStructure = nil,
  ) : VkBaseInStructure =
  result.sType = sType
  result.pNext = pNext

proc mkVkOffset2D*(
  x: int32 ,
  y: int32 ,
  ) : VkOffset2D =
  result.x = x
  result.y = y

proc mkVkOffset3D*(
  x: int32 ,
  y: int32 ,
  z: int32 ,
  ) : VkOffset3D =
  result.x = x
  result.y = y
  result.z = z

proc mkVkExtent2D*(
  width: uint32 ,
  height: uint32 ,
  ) : VkExtent2D =
  result.width = width
  result.height = height

proc mkVkExtent3D*(
  width: uint32 ,
  height: uint32 ,
  depth: uint32 ,
  ) : VkExtent3D =
  result.width = width
  result.height = height
  result.depth = depth

proc mkVkViewport*(
  x: float32 ,
  y: float32 ,
  width: float32 ,
  height: float32 ,
  minDepth: float32 ,
  maxDepth: float32 ,
  ) : VkViewport =
  result.x = x
  result.y = y
  result.width = width
  result.height = height
  result.minDepth = minDepth
  result.maxDepth = maxDepth

proc mkVkRect2D*(
  offset: VkOffset2D ,
  extent: VkExtent2D ,
  ) : VkRect2D =
  result.offset = offset
  result.extent = extent

proc mkVkClearRect*(
  rect: VkRect2D ,
  baseArrayLayer: uint32 ,
  layerCount: uint32 ,
  ) : VkClearRect =
  result.rect = rect
  result.baseArrayLayer = baseArrayLayer
  result.layerCount = layerCount

proc mkVkComponentMapping*(
  r: VkComponentSwizzle ,
  g: VkComponentSwizzle ,
  b: VkComponentSwizzle ,
  a: VkComponentSwizzle ,
  ) : VkComponentMapping =
  result.r = r
  result.g = g
  result.b = b
  result.a = a

proc mkVkExtensionProperties*(
  extensionName: array[VK_MAX_EXTENSION_NAME_SIZE,char] ,
  specVersion: uint32 ,
  ) : VkExtensionProperties =
  result.extensionName = extensionName
  result.specVersion = specVersion

proc mkVkLayerProperties*(
  layerName: array[VK_MAX_EXTENSION_NAME_SIZE,char] ,
  specVersion: uint32 ,
  implementationVersion: uint32 ,
  description: array[VK_MAX_DESCRIPTION_SIZE,char] ,
  ) : VkLayerProperties =
  result.layerName = layerName
  result.specVersion = specVersion
  result.implementationVersion = implementationVersion
  result.description = description

proc mkVkApplicationInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_APPLICATION_INFO,
  pNext: pointer = nil,
  pApplicationName: cstring = nil,
  applicationVersion: uint32 ,
  pEngineName: cstring = nil,
  engineVersion: uint32 ,
  apiVersion: uint32 ,
  ) : VkApplicationInfo =
  result.sType = sType
  result.pNext = pNext
  result.pApplicationName = pApplicationName
  result.applicationVersion = applicationVersion
  result.pEngineName = pEngineName
  result.engineVersion = engineVersion
  result.apiVersion = apiVersion

proc mkVkAllocationCallbacks*(
  pUserData: pointer = nil,
  pfnAllocation: PFN_vkAllocationFunction ,
  pfnReallocation: PFN_vkReallocationFunction ,
  pfnFree: PFN_vkFreeFunction ,
  pfnInternalAllocation: PFN_vkInternalAllocationNotification = nil,
  pfnInternalFree: PFN_vkInternalFreeNotification = nil,
  ) : VkAllocationCallbacks =
  result.pUserData = pUserData
  result.pfnAllocation = pfnAllocation
  result.pfnReallocation = pfnReallocation
  result.pfnFree = pfnFree
  result.pfnInternalAllocation = pfnInternalAllocation
  result.pfnInternalFree = pfnInternalFree

proc mkVkDescriptorImageInfo*(
  sampler: VkSampler ,
  imageView: VkImageView ,
  imageLayout: VkImageLayout ,
  ) : VkDescriptorImageInfo =
  result.sampler = sampler
  result.imageView = imageView
  result.imageLayout = imageLayout

proc mkVkCopyDescriptorSet*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET,
  pNext: pointer = nil,
  srcSet: VkDescriptorSet ,
  srcBinding: uint32 ,
  srcArrayElement: uint32 ,
  dstSet: VkDescriptorSet ,
  dstBinding: uint32 ,
  dstArrayElement: uint32 ,
  descriptorCount: uint32 ,
  ) : VkCopyDescriptorSet =
  result.sType = sType
  result.pNext = pNext
  result.srcSet = srcSet
  result.srcBinding = srcBinding
  result.srcArrayElement = srcArrayElement
  result.dstSet = dstSet
  result.dstBinding = dstBinding
  result.dstArrayElement = dstArrayElement
  result.descriptorCount = descriptorCount

proc mkVkDescriptorPoolSize*(
  `type`: VkDescriptorType ,
  descriptorCount: uint32 ,
  ) : VkDescriptorPoolSize =
  result.`type` = `type`
  result.descriptorCount = descriptorCount

proc mkVkDescriptorSetAllocateInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO,
  pNext: pointer = nil,
  descriptorPool: VkDescriptorPool ,
  descriptorSetCount: uint32 ,
  pSetLayouts: ptr VkDescriptorSetLayout ,
  ) : VkDescriptorSetAllocateInfo =
  result.sType = sType
  result.pNext = pNext
  result.descriptorPool = descriptorPool
  result.descriptorSetCount = descriptorSetCount
  result.pSetLayouts = pSetLayouts

proc mkVkSpecializationMapEntry*(
  constantID: uint32 ,
  offset: uint32 ,
  size: uint ,
  ) : VkSpecializationMapEntry =
  result.constantID = constantID
  result.offset = offset
  result.size = size

proc mkVkSpecializationInfo*(
  mapEntryCount: uint32 = 0.uint32,
  pMapEntries: ptr VkSpecializationMapEntry ,
  dataSize: uint = 0.uint,
  pData: pointer ,
  ) : VkSpecializationInfo =
  result.mapEntryCount = mapEntryCount
  result.pMapEntries = pMapEntries
  result.dataSize = dataSize
  result.pData = pData

proc mkVkVertexInputBindingDescription*(
  binding: uint32 ,
  stride: uint32 ,
  inputRate: VkVertexInputRate ,
  ) : VkVertexInputBindingDescription =
  result.binding = binding
  result.stride = stride
  result.inputRate = inputRate

proc mkVkVertexInputAttributeDescription*(
  location: uint32 ,
  binding: uint32 ,
  format: VkFormat ,
  offset: uint32 ,
  ) : VkVertexInputAttributeDescription =
  result.location = location
  result.binding = binding
  result.format = format
  result.offset = offset

proc mkVkStencilOpState*(
  failOp: VkStencilOp ,
  passOp: VkStencilOp ,
  depthFailOp: VkStencilOp ,
  compareOp: VkCompareOp ,
  compareMask: uint32 ,
  writeMask: uint32 ,
  reference: uint32 ,
  ) : VkStencilOpState =
  result.failOp = failOp
  result.passOp = passOp
  result.depthFailOp = depthFailOp
  result.compareOp = compareOp
  result.compareMask = compareMask
  result.writeMask = writeMask
  result.reference = reference

proc mkVkCommandBufferAllocateInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO,
  pNext: pointer = nil,
  commandPool: VkCommandPool ,
  level: VkCommandBufferLevel ,
  commandBufferCount: uint32 ,
  ) : VkCommandBufferAllocateInfo =
  result.sType = sType
  result.pNext = pNext
  result.commandPool = commandPool
  result.level = level
  result.commandBufferCount = commandBufferCount

proc mkVkClearDepthStencilValue*(
  depth: float32 ,
  stencil: uint32 ,
  ) : VkClearDepthStencilValue =
  result.depth = depth
  result.stencil = stencil

proc mkVkAttachmentReference*(
  attachment: uint32 ,
  layout: VkImageLayout ,
  ) : VkAttachmentReference =
  result.attachment = attachment
  result.layout = layout

proc mkVkDrawIndirectCommand*(
  vertexCount: uint32 ,
  instanceCount: uint32 ,
  firstVertex: uint32 ,
  firstInstance: uint32 ,
  ) : VkDrawIndirectCommand =
  result.vertexCount = vertexCount
  result.instanceCount = instanceCount
  result.firstVertex = firstVertex
  result.firstInstance = firstInstance

proc mkVkDrawIndexedIndirectCommand*(
  indexCount: uint32 ,
  instanceCount: uint32 ,
  firstIndex: uint32 ,
  vertexOffset: int32 ,
  firstInstance: uint32 ,
  ) : VkDrawIndexedIndirectCommand =
  result.indexCount = indexCount
  result.instanceCount = instanceCount
  result.firstIndex = firstIndex
  result.vertexOffset = vertexOffset
  result.firstInstance = firstInstance

proc mkVkDispatchIndirectCommand*(
  x: uint32 ,
  y: uint32 ,
  z: uint32 ,
  ) : VkDispatchIndirectCommand =
  result.x = x
  result.y = y
  result.z = z

proc mkVkDisplayPlanePropertiesKHR*(
  currentDisplay: VkDisplayKHR ,
  currentStackIndex: uint32 ,
  ) : VkDisplayPlanePropertiesKHR =
  result.currentDisplay = currentDisplay
  result.currentStackIndex = currentStackIndex

proc mkVkDisplayModeParametersKHR*(
  visibleRegion: VkExtent2D ,
  refreshRate: uint32 ,
  ) : VkDisplayModeParametersKHR =
  result.visibleRegion = visibleRegion
  result.refreshRate = refreshRate

proc mkVkDisplayModePropertiesKHR*(
  displayMode: VkDisplayModeKHR ,
  parameters: VkDisplayModeParametersKHR ,
  ) : VkDisplayModePropertiesKHR =
  result.displayMode = displayMode
  result.parameters = parameters

proc mkVkSurfaceFormatKHR*(
  format: VkFormat ,
  colorSpace: VkColorSpaceKHR ,
  ) : VkSurfaceFormatKHR =
  result.format = format
  result.colorSpace = colorSpace

proc mkVkPresentInfoKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR,
  pNext: pointer = nil,
  waitSemaphoreCount: uint32 = 0.uint32,
  pWaitSemaphores: ptr VkSemaphore ,
  swapchainCount: uint32 ,
  pSwapchains: ptr VkSwapchainKHR ,
  pImageIndices: ptr uint32 ,
  pResults: ptr VkResult = nil,
  ) : VkPresentInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.waitSemaphoreCount = waitSemaphoreCount
  result.pWaitSemaphores = pWaitSemaphores
  result.swapchainCount = swapchainCount
  result.pSwapchains = pSwapchains
  result.pImageIndices = pImageIndices
  result.pResults = pResults

proc mkVkValidationFlagsEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT,
  pNext: pointer = nil,
  disabledValidationCheckCount: uint32 ,
  pDisabledValidationChecks: ptr VkValidationCheckEXT ,
  ) : VkValidationFlagsEXT =
  result.sType = sType
  result.pNext = pNext
  result.disabledValidationCheckCount = disabledValidationCheckCount
  result.pDisabledValidationChecks = pDisabledValidationChecks

proc mkVkValidationFeaturesEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT,
  pNext: pointer = nil,
  enabledValidationFeatureCount: uint32 = 0.uint32,
  pEnabledValidationFeatures: ptr VkValidationFeatureEnableEXT ,
  disabledValidationFeatureCount: uint32 = 0.uint32,
  pDisabledValidationFeatures: ptr VkValidationFeatureDisableEXT ,
  ) : VkValidationFeaturesEXT =
  result.sType = sType
  result.pNext = pNext
  result.enabledValidationFeatureCount = enabledValidationFeatureCount
  result.pEnabledValidationFeatures = pEnabledValidationFeatures
  result.disabledValidationFeatureCount = disabledValidationFeatureCount
  result.pDisabledValidationFeatures = pDisabledValidationFeatures

proc mkVkPipelineRasterizationStateRasterizationOrderAMD*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD,
  pNext: pointer = nil,
  rasterizationOrder: VkRasterizationOrderAMD ,
  ) : VkPipelineRasterizationStateRasterizationOrderAMD =
  result.sType = sType
  result.pNext = pNext
  result.rasterizationOrder = rasterizationOrder

proc mkVkDebugMarkerObjectNameInfoEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT,
  pNext: pointer = nil,
  objectType: VkDebugReportObjectTypeEXT ,
  `object`: uint64 ,
  pObjectName: cstring ,
  ) : VkDebugMarkerObjectNameInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.objectType = objectType
  result.`object` = `object`
  result.pObjectName = pObjectName

proc mkVkDebugMarkerObjectTagInfoEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT,
  pNext: pointer = nil,
  objectType: VkDebugReportObjectTypeEXT ,
  `object`: uint64 ,
  tagName: uint64 ,
  tagSize: uint ,
  pTag: pointer ,
  ) : VkDebugMarkerObjectTagInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.objectType = objectType
  result.`object` = `object`
  result.tagName = tagName
  result.tagSize = tagSize
  result.pTag = pTag

proc mkVkDebugMarkerMarkerInfoEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT,
  pNext: pointer = nil,
  pMarkerName: cstring ,
  color: array[4,float32] = [0.float32,0.float32,0.float32,0.float32,],
  ) : VkDebugMarkerMarkerInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.pMarkerName = pMarkerName
  result.color = color

proc mkVkDedicatedAllocationMemoryAllocateInfoNV*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV,
  pNext: pointer = nil,
  image: VkImage = nil,
  buffer: VkBuffer = nil,
  ) : VkDedicatedAllocationMemoryAllocateInfoNV =
  result.sType = sType
  result.pNext = pNext
  result.image = image
  result.buffer = buffer

proc mkVkExportMemoryWin32HandleInfoNV*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV,
  pNext: pointer = nil,
  pAttributes: ptr SECURITY_ATTRIBUTES = nil,
  dwAccess: DWORD = 0.DWORD,
  ) : VkExportMemoryWin32HandleInfoNV =
  result.sType = sType
  result.pNext = pNext
  result.pAttributes = pAttributes
  result.dwAccess = dwAccess

proc mkVkWin32KeyedMutexAcquireReleaseInfoNV*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV,
  pNext: pointer = nil,
  acquireCount: uint32 = 0.uint32,
  pAcquireSyncs: ptr VkDeviceMemory ,
  pAcquireKeys: ptr uint64 ,
  pAcquireTimeoutMilliseconds: ptr uint32 ,
  releaseCount: uint32 = 0.uint32,
  pReleaseSyncs: ptr VkDeviceMemory ,
  pReleaseKeys: ptr uint64 ,
  ) : VkWin32KeyedMutexAcquireReleaseInfoNV =
  result.sType = sType
  result.pNext = pNext
  result.acquireCount = acquireCount
  result.pAcquireSyncs = pAcquireSyncs
  result.pAcquireKeys = pAcquireKeys
  result.pAcquireTimeoutMilliseconds = pAcquireTimeoutMilliseconds
  result.releaseCount = releaseCount
  result.pReleaseSyncs = pReleaseSyncs
  result.pReleaseKeys = pReleaseKeys

proc mkVkDevicePrivateDataCreateInfoEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT,
  pNext: pointer = nil,
  privateDataSlotRequestCount: uint32 ,
  ) : VkDevicePrivateDataCreateInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.privateDataSlotRequestCount = privateDataSlotRequestCount

proc mkVkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV,
  pNext: pointer = nil,
  maxGraphicsShaderGroupCount: uint32 ,
  maxIndirectSequenceCount: uint32 ,
  maxIndirectCommandsTokenCount: uint32 ,
  maxIndirectCommandsStreamCount: uint32 ,
  maxIndirectCommandsTokenOffset: uint32 ,
  maxIndirectCommandsStreamStride: uint32 ,
  minSequencesCountBufferOffsetAlignment: uint32 ,
  minSequencesIndexBufferOffsetAlignment: uint32 ,
  minIndirectCommandsBufferOffsetAlignment: uint32 ,
  ) : VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV =
  result.sType = sType
  result.pNext = pNext
  result.maxGraphicsShaderGroupCount = maxGraphicsShaderGroupCount
  result.maxIndirectSequenceCount = maxIndirectSequenceCount
  result.maxIndirectCommandsTokenCount = maxIndirectCommandsTokenCount
  result.maxIndirectCommandsStreamCount = maxIndirectCommandsStreamCount
  result.maxIndirectCommandsTokenOffset = maxIndirectCommandsTokenOffset
  result.maxIndirectCommandsStreamStride = maxIndirectCommandsStreamStride
  result.minSequencesCountBufferOffsetAlignment = minSequencesCountBufferOffsetAlignment
  result.minSequencesIndexBufferOffsetAlignment = minSequencesIndexBufferOffsetAlignment
  result.minIndirectCommandsBufferOffsetAlignment = minIndirectCommandsBufferOffsetAlignment

proc mkVkBindShaderGroupIndirectCommandNV*(
  groupIndex: uint32 ,
  ) : VkBindShaderGroupIndirectCommandNV =
  result.groupIndex = groupIndex

proc mkVkSetStateFlagsIndirectCommandNV*(
  data: uint32 ,
  ) : VkSetStateFlagsIndirectCommandNV =
  result.data = data

proc mkVkGeneratedCommandsMemoryRequirementsInfoNV*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV,
  pNext: pointer = nil,
  pipelineBindPoint: VkPipelineBindPoint ,
  pipeline: VkPipeline ,
  indirectCommandsLayout: VkIndirectCommandsLayoutNV ,
  maxSequencesCount: uint32 ,
  ) : VkGeneratedCommandsMemoryRequirementsInfoNV =
  result.sType = sType
  result.pNext = pNext
  result.pipelineBindPoint = pipelineBindPoint
  result.pipeline = pipeline
  result.indirectCommandsLayout = indirectCommandsLayout
  result.maxSequencesCount = maxSequencesCount

proc mkVkPhysicalDevicePushDescriptorPropertiesKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR,
  pNext: pointer = nil,
  maxPushDescriptors: uint32 ,
  ) : VkPhysicalDevicePushDescriptorPropertiesKHR =
  result.sType = sType
  result.pNext = pNext
  result.maxPushDescriptors = maxPushDescriptors

proc mkVkConformanceVersion*(
  major: uint8 ,
  minor: uint8 ,
  subminor: uint8 ,
  patch: uint8 ,
  ) : VkConformanceVersion =
  result.major = major
  result.minor = minor
  result.subminor = subminor
  result.patch = patch

proc mkVkPhysicalDeviceDriverProperties*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES,
  pNext: pointer = nil,
  driverID: VkDriverId ,
  driverName: array[VK_MAX_DRIVER_NAME_SIZE,char] ,
  driverInfo: array[VK_MAX_DRIVER_INFO_SIZE,char] ,
  conformanceVersion: VkConformanceVersion ,
  ) : VkPhysicalDeviceDriverProperties =
  result.sType = sType
  result.pNext = pNext
  result.driverID = driverID
  result.driverName = driverName
  result.driverInfo = driverInfo
  result.conformanceVersion = conformanceVersion

proc mkVkRectLayerKHR*(
  offset: VkOffset2D ,
  extent: VkExtent2D ,
  layer: uint32 ,
  ) : VkRectLayerKHR =
  result.offset = offset
  result.extent = extent
  result.layer = layer

proc mkVkPhysicalDeviceExternalImageFormatInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO,
  pNext: pointer = nil,
  handleType: VkExternalMemoryHandleTypeFlagBits = 0.VkExternalMemoryHandleTypeFlagBits,
  ) : VkPhysicalDeviceExternalImageFormatInfo =
  result.sType = sType
  result.pNext = pNext
  result.handleType = handleType

proc mkVkImportMemoryWin32HandleInfoKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR,
  pNext: pointer = nil,
  handleType: VkExternalMemoryHandleTypeFlagBits = 0.VkExternalMemoryHandleTypeFlagBits,
  handle: HANDLE = nil,
  name: LPCWSTR = nil,
  ) : VkImportMemoryWin32HandleInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.handleType = handleType
  result.handle = handle
  result.name = name

proc mkVkExportMemoryWin32HandleInfoKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR,
  pNext: pointer = nil,
  pAttributes: ptr SECURITY_ATTRIBUTES = nil,
  dwAccess: DWORD ,
  name: LPCWSTR ,
  ) : VkExportMemoryWin32HandleInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.pAttributes = pAttributes
  result.dwAccess = dwAccess
  result.name = name

proc mkVkMemoryWin32HandlePropertiesKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR,
  pNext: pointer = nil,
  memoryTypeBits: uint32 ,
  ) : VkMemoryWin32HandlePropertiesKHR =
  result.sType = sType
  result.pNext = pNext
  result.memoryTypeBits = memoryTypeBits

proc mkVkMemoryGetWin32HandleInfoKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR,
  pNext: pointer = nil,
  memory: VkDeviceMemory ,
  handleType: VkExternalMemoryHandleTypeFlagBits ,
  ) : VkMemoryGetWin32HandleInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.memory = memory
  result.handleType = handleType

proc mkVkImportMemoryFdInfoKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR,
  pNext: pointer = nil,
  handleType: VkExternalMemoryHandleTypeFlagBits = 0.VkExternalMemoryHandleTypeFlagBits,
  fd: cint ,
  ) : VkImportMemoryFdInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.handleType = handleType
  result.fd = fd

proc mkVkMemoryFdPropertiesKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR,
  pNext: pointer = nil,
  memoryTypeBits: uint32 ,
  ) : VkMemoryFdPropertiesKHR =
  result.sType = sType
  result.pNext = pNext
  result.memoryTypeBits = memoryTypeBits

proc mkVkMemoryGetFdInfoKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR,
  pNext: pointer = nil,
  memory: VkDeviceMemory ,
  handleType: VkExternalMemoryHandleTypeFlagBits ,
  ) : VkMemoryGetFdInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.memory = memory
  result.handleType = handleType

proc mkVkWin32KeyedMutexAcquireReleaseInfoKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR,
  pNext: pointer = nil,
  acquireCount: uint32 = 0.uint32,
  pAcquireSyncs: ptr VkDeviceMemory ,
  pAcquireKeys: ptr uint64 ,
  pAcquireTimeouts: ptr uint32 ,
  releaseCount: uint32 = 0.uint32,
  pReleaseSyncs: ptr VkDeviceMemory ,
  pReleaseKeys: ptr uint64 ,
  ) : VkWin32KeyedMutexAcquireReleaseInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.acquireCount = acquireCount
  result.pAcquireSyncs = pAcquireSyncs
  result.pAcquireKeys = pAcquireKeys
  result.pAcquireTimeouts = pAcquireTimeouts
  result.releaseCount = releaseCount
  result.pReleaseSyncs = pReleaseSyncs
  result.pReleaseKeys = pReleaseKeys

proc mkVkPhysicalDeviceExternalSemaphoreInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO,
  pNext: pointer = nil,
  handleType: VkExternalSemaphoreHandleTypeFlagBits ,
  ) : VkPhysicalDeviceExternalSemaphoreInfo =
  result.sType = sType
  result.pNext = pNext
  result.handleType = handleType

proc mkVkExportSemaphoreWin32HandleInfoKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR,
  pNext: pointer = nil,
  pAttributes: ptr SECURITY_ATTRIBUTES = nil,
  dwAccess: DWORD ,
  name: LPCWSTR ,
  ) : VkExportSemaphoreWin32HandleInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.pAttributes = pAttributes
  result.dwAccess = dwAccess
  result.name = name

proc mkVkD3D12FenceSubmitInfoKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR,
  pNext: pointer = nil,
  waitSemaphoreValuesCount: uint32 = 0.uint32,
  pWaitSemaphoreValues: ptr uint64 = nil,
  signalSemaphoreValuesCount: uint32 = 0.uint32,
  pSignalSemaphoreValues: ptr uint64 = nil,
  ) : VkD3D12FenceSubmitInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.waitSemaphoreValuesCount = waitSemaphoreValuesCount
  result.pWaitSemaphoreValues = pWaitSemaphoreValues
  result.signalSemaphoreValuesCount = signalSemaphoreValuesCount
  result.pSignalSemaphoreValues = pSignalSemaphoreValues

proc mkVkSemaphoreGetWin32HandleInfoKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR,
  pNext: pointer = nil,
  semaphore: VkSemaphore ,
  handleType: VkExternalSemaphoreHandleTypeFlagBits ,
  ) : VkSemaphoreGetWin32HandleInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.semaphore = semaphore
  result.handleType = handleType

proc mkVkSemaphoreGetFdInfoKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR,
  pNext: pointer = nil,
  semaphore: VkSemaphore ,
  handleType: VkExternalSemaphoreHandleTypeFlagBits ,
  ) : VkSemaphoreGetFdInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.semaphore = semaphore
  result.handleType = handleType

proc mkVkPhysicalDeviceExternalFenceInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO,
  pNext: pointer = nil,
  handleType: VkExternalFenceHandleTypeFlagBits ,
  ) : VkPhysicalDeviceExternalFenceInfo =
  result.sType = sType
  result.pNext = pNext
  result.handleType = handleType

proc mkVkExportFenceWin32HandleInfoKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR,
  pNext: pointer = nil,
  pAttributes: ptr SECURITY_ATTRIBUTES = nil,
  dwAccess: DWORD ,
  name: LPCWSTR ,
  ) : VkExportFenceWin32HandleInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.pAttributes = pAttributes
  result.dwAccess = dwAccess
  result.name = name

proc mkVkFenceGetWin32HandleInfoKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR,
  pNext: pointer = nil,
  fence: VkFence ,
  handleType: VkExternalFenceHandleTypeFlagBits ,
  ) : VkFenceGetWin32HandleInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.fence = fence
  result.handleType = handleType

proc mkVkFenceGetFdInfoKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR,
  pNext: pointer = nil,
  fence: VkFence ,
  handleType: VkExternalFenceHandleTypeFlagBits ,
  ) : VkFenceGetFdInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.fence = fence
  result.handleType = handleType

proc mkVkPhysicalDeviceMultiviewProperties*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES,
  pNext: pointer = nil,
  maxMultiviewViewCount: uint32 ,
  maxMultiviewInstanceIndex: uint32 ,
  ) : VkPhysicalDeviceMultiviewProperties =
  result.sType = sType
  result.pNext = pNext
  result.maxMultiviewViewCount = maxMultiviewViewCount
  result.maxMultiviewInstanceIndex = maxMultiviewInstanceIndex

proc mkVkRenderPassMultiviewCreateInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO,
  pNext: pointer = nil,
  subpassCount: uint32 = 0.uint32,
  pViewMasks: ptr uint32 ,
  dependencyCount: uint32 = 0.uint32,
  pViewOffsets: ptr int32 ,
  correlationMaskCount: uint32 = 0.uint32,
  pCorrelationMasks: ptr uint32 ,
  ) : VkRenderPassMultiviewCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.subpassCount = subpassCount
  result.pViewMasks = pViewMasks
  result.dependencyCount = dependencyCount
  result.pViewOffsets = pViewOffsets
  result.correlationMaskCount = correlationMaskCount
  result.pCorrelationMasks = pCorrelationMasks

proc mkVkDisplayPowerInfoEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT,
  pNext: pointer = nil,
  powerState: VkDisplayPowerStateEXT ,
  ) : VkDisplayPowerInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.powerState = powerState

proc mkVkDeviceEventInfoEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT,
  pNext: pointer = nil,
  deviceEvent: VkDeviceEventTypeEXT ,
  ) : VkDeviceEventInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.deviceEvent = deviceEvent

proc mkVkDisplayEventInfoEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT,
  pNext: pointer = nil,
  displayEvent: VkDisplayEventTypeEXT ,
  ) : VkDisplayEventInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.displayEvent = displayEvent

proc mkVkBindBufferMemoryDeviceGroupInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO,
  pNext: pointer = nil,
  deviceIndexCount: uint32 = 0.uint32,
  pDeviceIndices: ptr uint32 ,
  ) : VkBindBufferMemoryDeviceGroupInfo =
  result.sType = sType
  result.pNext = pNext
  result.deviceIndexCount = deviceIndexCount
  result.pDeviceIndices = pDeviceIndices

proc mkVkBindImageMemoryDeviceGroupInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO,
  pNext: pointer = nil,
  deviceIndexCount: uint32 = 0.uint32,
  pDeviceIndices: ptr uint32 ,
  splitInstanceBindRegionCount: uint32 = 0.uint32,
  pSplitInstanceBindRegions: ptr VkRect2D ,
  ) : VkBindImageMemoryDeviceGroupInfo =
  result.sType = sType
  result.pNext = pNext
  result.deviceIndexCount = deviceIndexCount
  result.pDeviceIndices = pDeviceIndices
  result.splitInstanceBindRegionCount = splitInstanceBindRegionCount
  result.pSplitInstanceBindRegions = pSplitInstanceBindRegions

proc mkVkDeviceGroupRenderPassBeginInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO,
  pNext: pointer = nil,
  deviceMask: uint32 ,
  deviceRenderAreaCount: uint32 = 0.uint32,
  pDeviceRenderAreas: ptr VkRect2D ,
  ) : VkDeviceGroupRenderPassBeginInfo =
  result.sType = sType
  result.pNext = pNext
  result.deviceMask = deviceMask
  result.deviceRenderAreaCount = deviceRenderAreaCount
  result.pDeviceRenderAreas = pDeviceRenderAreas

proc mkVkDeviceGroupCommandBufferBeginInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO,
  pNext: pointer = nil,
  deviceMask: uint32 ,
  ) : VkDeviceGroupCommandBufferBeginInfo =
  result.sType = sType
  result.pNext = pNext
  result.deviceMask = deviceMask

proc mkVkDeviceGroupSubmitInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO,
  pNext: pointer = nil,
  waitSemaphoreCount: uint32 = 0.uint32,
  pWaitSemaphoreDeviceIndices: ptr uint32 ,
  commandBufferCount: uint32 = 0.uint32,
  pCommandBufferDeviceMasks: ptr uint32 ,
  signalSemaphoreCount: uint32 = 0.uint32,
  pSignalSemaphoreDeviceIndices: ptr uint32 ,
  ) : VkDeviceGroupSubmitInfo =
  result.sType = sType
  result.pNext = pNext
  result.waitSemaphoreCount = waitSemaphoreCount
  result.pWaitSemaphoreDeviceIndices = pWaitSemaphoreDeviceIndices
  result.commandBufferCount = commandBufferCount
  result.pCommandBufferDeviceMasks = pCommandBufferDeviceMasks
  result.signalSemaphoreCount = signalSemaphoreCount
  result.pSignalSemaphoreDeviceIndices = pSignalSemaphoreDeviceIndices

proc mkVkDeviceGroupBindSparseInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO,
  pNext: pointer = nil,
  resourceDeviceIndex: uint32 ,
  memoryDeviceIndex: uint32 ,
  ) : VkDeviceGroupBindSparseInfo =
  result.sType = sType
  result.pNext = pNext
  result.resourceDeviceIndex = resourceDeviceIndex
  result.memoryDeviceIndex = memoryDeviceIndex

proc mkVkImageSwapchainCreateInfoKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR,
  pNext: pointer = nil,
  swapchain: VkSwapchainKHR = nil,
  ) : VkImageSwapchainCreateInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.swapchain = swapchain

proc mkVkBindImageMemorySwapchainInfoKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR,
  pNext: pointer = nil,
  swapchain: VkSwapchainKHR ,
  imageIndex: uint32 ,
  ) : VkBindImageMemorySwapchainInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.swapchain = swapchain
  result.imageIndex = imageIndex

proc mkVkAcquireNextImageInfoKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR,
  pNext: pointer = nil,
  swapchain: VkSwapchainKHR ,
  timeout: uint64 ,
  semaphore: VkSemaphore = nil,
  fence: VkFence = nil,
  deviceMask: uint32 ,
  ) : VkAcquireNextImageInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.swapchain = swapchain
  result.timeout = timeout
  result.semaphore = semaphore
  result.fence = fence
  result.deviceMask = deviceMask

proc mkVkDeviceGroupPresentInfoKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR,
  pNext: pointer = nil,
  swapchainCount: uint32 = 0.uint32,
  pDeviceMasks: ptr uint32 ,
  mode: VkDeviceGroupPresentModeFlagBitsKHR ,
  ) : VkDeviceGroupPresentInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.swapchainCount = swapchainCount
  result.pDeviceMasks = pDeviceMasks
  result.mode = mode

proc mkVkDeviceGroupDeviceCreateInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO,
  pNext: pointer = nil,
  physicalDeviceCount: uint32 = 0.uint32,
  pPhysicalDevices: ptr VkPhysicalDevice ,
  ) : VkDeviceGroupDeviceCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.physicalDeviceCount = physicalDeviceCount
  result.pPhysicalDevices = pPhysicalDevices

proc mkVkDescriptorUpdateTemplateEntry*(
  dstBinding: uint32 ,
  dstArrayElement: uint32 ,
  descriptorCount: uint32 ,
  descriptorType: VkDescriptorType ,
  offset: uint ,
  stride: uint ,
  ) : VkDescriptorUpdateTemplateEntry =
  result.dstBinding = dstBinding
  result.dstArrayElement = dstArrayElement
  result.descriptorCount = descriptorCount
  result.descriptorType = descriptorType
  result.offset = offset
  result.stride = stride

proc mkVkXYColorEXT*(
  x: float32 ,
  y: float32 ,
  ) : VkXYColorEXT =
  result.x = x
  result.y = y

proc mkVkHdrMetadataEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_HDR_METADATA_EXT,
  pNext: pointer = nil,
  displayPrimaryRed: VkXYColorEXT ,
  displayPrimaryGreen: VkXYColorEXT ,
  displayPrimaryBlue: VkXYColorEXT ,
  whitePoint: VkXYColorEXT ,
  maxLuminance: float32 ,
  minLuminance: float32 ,
  maxContentLightLevel: float32 ,
  maxFrameAverageLightLevel: float32 ,
  ) : VkHdrMetadataEXT =
  result.sType = sType
  result.pNext = pNext
  result.displayPrimaryRed = displayPrimaryRed
  result.displayPrimaryGreen = displayPrimaryGreen
  result.displayPrimaryBlue = displayPrimaryBlue
  result.whitePoint = whitePoint
  result.maxLuminance = maxLuminance
  result.minLuminance = minLuminance
  result.maxContentLightLevel = maxContentLightLevel
  result.maxFrameAverageLightLevel = maxFrameAverageLightLevel

proc mkVkRefreshCycleDurationGOOGLE*(
  refreshDuration: uint64 ,
  ) : VkRefreshCycleDurationGOOGLE =
  result.refreshDuration = refreshDuration

proc mkVkPastPresentationTimingGOOGLE*(
  presentID: uint32 ,
  desiredPresentTime: uint64 ,
  actualPresentTime: uint64 ,
  earliestPresentTime: uint64 ,
  presentMargin: uint64 ,
  ) : VkPastPresentationTimingGOOGLE =
  result.presentID = presentID
  result.desiredPresentTime = desiredPresentTime
  result.actualPresentTime = actualPresentTime
  result.earliestPresentTime = earliestPresentTime
  result.presentMargin = presentMargin

proc mkVkPresentTimeGOOGLE*(
  presentID: uint32 ,
  desiredPresentTime: uint64 ,
  ) : VkPresentTimeGOOGLE =
  result.presentID = presentID
  result.desiredPresentTime = desiredPresentTime

proc mkVkViewportWScalingNV*(
  xcoeff: float32 ,
  ycoeff: float32 ,
  ) : VkViewportWScalingNV =
  result.xcoeff = xcoeff
  result.ycoeff = ycoeff

proc mkVkViewportSwizzleNV*(
  x: VkViewportCoordinateSwizzleNV ,
  y: VkViewportCoordinateSwizzleNV ,
  z: VkViewportCoordinateSwizzleNV ,
  w: VkViewportCoordinateSwizzleNV ,
  ) : VkViewportSwizzleNV =
  result.x = x
  result.y = y
  result.z = z
  result.w = w

proc mkVkPhysicalDeviceDiscardRectanglePropertiesEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT,
  pNext: pointer = nil,
  maxDiscardRectangles: uint32 ,
  ) : VkPhysicalDeviceDiscardRectanglePropertiesEXT =
  result.sType = sType
  result.pNext = pNext
  result.maxDiscardRectangles = maxDiscardRectangles

proc mkVkPhysicalDeviceSurfaceInfo2KHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR,
  pNext: pointer = nil,
  surface: VkSurfaceKHR ,
  ) : VkPhysicalDeviceSurfaceInfo2KHR =
  result.sType = sType
  result.pNext = pNext
  result.surface = surface

proc mkVkSurfaceFormat2KHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR,
  pNext: pointer = nil,
  surfaceFormat: VkSurfaceFormatKHR ,
  ) : VkSurfaceFormat2KHR =
  result.sType = sType
  result.pNext = pNext
  result.surfaceFormat = surfaceFormat

proc mkVkDisplayPlaneProperties2KHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR,
  pNext: pointer = nil,
  displayPlaneProperties: VkDisplayPlanePropertiesKHR ,
  ) : VkDisplayPlaneProperties2KHR =
  result.sType = sType
  result.pNext = pNext
  result.displayPlaneProperties = displayPlaneProperties

proc mkVkDisplayModeProperties2KHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR,
  pNext: pointer = nil,
  displayModeProperties: VkDisplayModePropertiesKHR ,
  ) : VkDisplayModeProperties2KHR =
  result.sType = sType
  result.pNext = pNext
  result.displayModeProperties = displayModeProperties

proc mkVkDisplayPlaneInfo2KHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR,
  pNext: pointer = nil,
  mode: VkDisplayModeKHR ,
  planeIndex: uint32 ,
  ) : VkDisplayPlaneInfo2KHR =
  result.sType = sType
  result.pNext = pNext
  result.mode = mode
  result.planeIndex = planeIndex

proc mkVkBufferMemoryRequirementsInfo2*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2,
  pNext: pointer = nil,
  buffer: VkBuffer ,
  ) : VkBufferMemoryRequirementsInfo2 =
  result.sType = sType
  result.pNext = pNext
  result.buffer = buffer

proc mkVkImageMemoryRequirementsInfo2*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2,
  pNext: pointer = nil,
  image: VkImage ,
  ) : VkImageMemoryRequirementsInfo2 =
  result.sType = sType
  result.pNext = pNext
  result.image = image

proc mkVkImageSparseMemoryRequirementsInfo2*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2,
  pNext: pointer = nil,
  image: VkImage ,
  ) : VkImageSparseMemoryRequirementsInfo2 =
  result.sType = sType
  result.pNext = pNext
  result.image = image

proc mkVkPhysicalDevicePointClippingProperties*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES,
  pNext: pointer = nil,
  pointClippingBehavior: VkPointClippingBehavior ,
  ) : VkPhysicalDevicePointClippingProperties =
  result.sType = sType
  result.pNext = pNext
  result.pointClippingBehavior = pointClippingBehavior

proc mkVkMemoryDedicatedAllocateInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO,
  pNext: pointer = nil,
  image: VkImage = nil,
  buffer: VkBuffer = nil,
  ) : VkMemoryDedicatedAllocateInfo =
  result.sType = sType
  result.pNext = pNext
  result.image = image
  result.buffer = buffer

proc mkVkPipelineTessellationDomainOriginStateCreateInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO,
  pNext: pointer = nil,
  domainOrigin: VkTessellationDomainOrigin ,
  ) : VkPipelineTessellationDomainOriginStateCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.domainOrigin = domainOrigin

proc mkVkSamplerYcbcrConversionInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO,
  pNext: pointer = nil,
  conversion: VkSamplerYcbcrConversion ,
  ) : VkSamplerYcbcrConversionInfo =
  result.sType = sType
  result.pNext = pNext
  result.conversion = conversion

proc mkVkBindImagePlaneMemoryInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO,
  pNext: pointer = nil,
  planeAspect: VkImageAspectFlagBits ,
  ) : VkBindImagePlaneMemoryInfo =
  result.sType = sType
  result.pNext = pNext
  result.planeAspect = planeAspect

proc mkVkImagePlaneMemoryRequirementsInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO,
  pNext: pointer = nil,
  planeAspect: VkImageAspectFlagBits ,
  ) : VkImagePlaneMemoryRequirementsInfo =
  result.sType = sType
  result.pNext = pNext
  result.planeAspect = planeAspect

proc mkVkSamplerYcbcrConversionImageFormatProperties*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES,
  pNext: pointer = nil,
  combinedImageSamplerDescriptorCount: uint32 ,
  ) : VkSamplerYcbcrConversionImageFormatProperties =
  result.sType = sType
  result.pNext = pNext
  result.combinedImageSamplerDescriptorCount = combinedImageSamplerDescriptorCount

proc mkVkSampleLocationEXT*(
  x: float32 ,
  y: float32 ,
  ) : VkSampleLocationEXT =
  result.x = x
  result.y = y

proc mkVkSampleLocationsInfoEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT,
  pNext: pointer = nil,
  sampleLocationsPerPixel: VkSampleCountFlagBits = 0.VkSampleCountFlagBits,
  sampleLocationGridSize: VkExtent2D ,
  sampleLocationsCount: uint32 = 0.uint32,
  pSampleLocations: ptr VkSampleLocationEXT ,
  ) : VkSampleLocationsInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.sampleLocationsPerPixel = sampleLocationsPerPixel
  result.sampleLocationGridSize = sampleLocationGridSize
  result.sampleLocationsCount = sampleLocationsCount
  result.pSampleLocations = pSampleLocations

proc mkVkAttachmentSampleLocationsEXT*(
  attachmentIndex: uint32 ,
  sampleLocationsInfo: VkSampleLocationsInfoEXT ,
  ) : VkAttachmentSampleLocationsEXT =
  result.attachmentIndex = attachmentIndex
  result.sampleLocationsInfo = sampleLocationsInfo

proc mkVkSubpassSampleLocationsEXT*(
  subpassIndex: uint32 ,
  sampleLocationsInfo: VkSampleLocationsInfoEXT ,
  ) : VkSubpassSampleLocationsEXT =
  result.subpassIndex = subpassIndex
  result.sampleLocationsInfo = sampleLocationsInfo

proc mkVkRenderPassSampleLocationsBeginInfoEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT,
  pNext: pointer = nil,
  attachmentInitialSampleLocationsCount: uint32 = 0.uint32,
  pAttachmentInitialSampleLocations: ptr VkAttachmentSampleLocationsEXT ,
  postSubpassSampleLocationsCount: uint32 = 0.uint32,
  pPostSubpassSampleLocations: ptr VkSubpassSampleLocationsEXT ,
  ) : VkRenderPassSampleLocationsBeginInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.attachmentInitialSampleLocationsCount = attachmentInitialSampleLocationsCount
  result.pAttachmentInitialSampleLocations = pAttachmentInitialSampleLocations
  result.postSubpassSampleLocationsCount = postSubpassSampleLocationsCount
  result.pPostSubpassSampleLocations = pPostSubpassSampleLocations

proc mkVkMultisamplePropertiesEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT,
  pNext: pointer = nil,
  maxSampleLocationGridSize: VkExtent2D ,
  ) : VkMultisamplePropertiesEXT =
  result.sType = sType
  result.pNext = pNext
  result.maxSampleLocationGridSize = maxSampleLocationGridSize

proc mkVkSamplerReductionModeCreateInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO,
  pNext: pointer = nil,
  reductionMode: VkSamplerReductionMode ,
  ) : VkSamplerReductionModeCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.reductionMode = reductionMode

proc mkVkPhysicalDeviceInlineUniformBlockPropertiesEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT,
  pNext: pointer = nil,
  maxInlineUniformBlockSize: uint32 ,
  maxPerStageDescriptorInlineUniformBlocks: uint32 ,
  maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks: uint32 ,
  maxDescriptorSetInlineUniformBlocks: uint32 ,
  maxDescriptorSetUpdateAfterBindInlineUniformBlocks: uint32 ,
  ) : VkPhysicalDeviceInlineUniformBlockPropertiesEXT =
  result.sType = sType
  result.pNext = pNext
  result.maxInlineUniformBlockSize = maxInlineUniformBlockSize
  result.maxPerStageDescriptorInlineUniformBlocks = maxPerStageDescriptorInlineUniformBlocks
  result.maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks = maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks
  result.maxDescriptorSetInlineUniformBlocks = maxDescriptorSetInlineUniformBlocks
  result.maxDescriptorSetUpdateAfterBindInlineUniformBlocks = maxDescriptorSetUpdateAfterBindInlineUniformBlocks

proc mkVkWriteDescriptorSetInlineUniformBlockEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT,
  pNext: pointer = nil,
  dataSize: uint32 ,
  pData: pointer ,
  ) : VkWriteDescriptorSetInlineUniformBlockEXT =
  result.sType = sType
  result.pNext = pNext
  result.dataSize = dataSize
  result.pData = pData

proc mkVkDescriptorPoolInlineUniformBlockCreateInfoEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT,
  pNext: pointer = nil,
  maxInlineUniformBlockBindings: uint32 ,
  ) : VkDescriptorPoolInlineUniformBlockCreateInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.maxInlineUniformBlockBindings = maxInlineUniformBlockBindings

proc mkVkImageFormatListCreateInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO,
  pNext: pointer = nil,
  viewFormatCount: uint32 = 0.uint32,
  pViewFormats: ptr VkFormat ,
  ) : VkImageFormatListCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.viewFormatCount = viewFormatCount
  result.pViewFormats = pViewFormats

proc mkVkShaderModuleValidationCacheCreateInfoEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT,
  pNext: pointer = nil,
  validationCache: VkValidationCacheEXT ,
  ) : VkShaderModuleValidationCacheCreateInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.validationCache = validationCache

proc mkVkShaderResourceUsageAMD*(
  numUsedVgprs: uint32 ,
  numUsedSgprs: uint32 ,
  ldsSizePerLocalWorkGroup: uint32 ,
  ldsUsageSizeInBytes: uint ,
  scratchMemUsageInBytes: uint ,
  ) : VkShaderResourceUsageAMD =
  result.numUsedVgprs = numUsedVgprs
  result.numUsedSgprs = numUsedSgprs
  result.ldsSizePerLocalWorkGroup = ldsSizePerLocalWorkGroup
  result.ldsUsageSizeInBytes = ldsUsageSizeInBytes
  result.scratchMemUsageInBytes = scratchMemUsageInBytes

proc mkVkDeviceQueueGlobalPriorityCreateInfoEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT,
  pNext: pointer = nil,
  globalPriority: VkQueueGlobalPriorityEXT ,
  ) : VkDeviceQueueGlobalPriorityCreateInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.globalPriority = globalPriority

proc mkVkDebugUtilsObjectNameInfoEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT,
  pNext: pointer = nil,
  objectType: VkObjectType ,
  objectHandle: uint64 ,
  pObjectName: cstring = nil,
  ) : VkDebugUtilsObjectNameInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.objectType = objectType
  result.objectHandle = objectHandle
  result.pObjectName = pObjectName

proc mkVkDebugUtilsObjectTagInfoEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT,
  pNext: pointer = nil,
  objectType: VkObjectType ,
  objectHandle: uint64 ,
  tagName: uint64 ,
  tagSize: uint ,
  pTag: pointer ,
  ) : VkDebugUtilsObjectTagInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.objectType = objectType
  result.objectHandle = objectHandle
  result.tagName = tagName
  result.tagSize = tagSize
  result.pTag = pTag

proc mkVkDebugUtilsLabelEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT,
  pNext: pointer = nil,
  pLabelName: cstring ,
  color: array[4,float32] = [0.float32,0.float32,0.float32,0.float32,],
  ) : VkDebugUtilsLabelEXT =
  result.sType = sType
  result.pNext = pNext
  result.pLabelName = pLabelName
  result.color = color

proc mkVkImportMemoryHostPointerInfoEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT,
  pNext: pointer = nil,
  handleType: VkExternalMemoryHandleTypeFlagBits ,
  pHostPointer: pointer ,
  ) : VkImportMemoryHostPointerInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.handleType = handleType
  result.pHostPointer = pHostPointer

proc mkVkMemoryHostPointerPropertiesEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT,
  pNext: pointer = nil,
  memoryTypeBits: uint32 ,
  ) : VkMemoryHostPointerPropertiesEXT =
  result.sType = sType
  result.pNext = pNext
  result.memoryTypeBits = memoryTypeBits

proc mkVkCalibratedTimestampInfoEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT,
  pNext: pointer = nil,
  timeDomain: VkTimeDomainEXT ,
  ) : VkCalibratedTimestampInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.timeDomain = timeDomain

proc mkVkPhysicalDeviceShaderCorePropertiesAMD*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD,
  pNext: pointer = nil,
  shaderEngineCount: uint32 ,
  shaderArraysPerEngineCount: uint32 ,
  computeUnitsPerShaderArray: uint32 ,
  simdPerComputeUnit: uint32 ,
  wavefrontsPerSimd: uint32 ,
  wavefrontSize: uint32 ,
  sgprsPerSimd: uint32 ,
  minSgprAllocation: uint32 ,
  maxSgprAllocation: uint32 ,
  sgprAllocationGranularity: uint32 ,
  vgprsPerSimd: uint32 ,
  minVgprAllocation: uint32 ,
  maxVgprAllocation: uint32 ,
  vgprAllocationGranularity: uint32 ,
  ) : VkPhysicalDeviceShaderCorePropertiesAMD =
  result.sType = sType
  result.pNext = pNext
  result.shaderEngineCount = shaderEngineCount
  result.shaderArraysPerEngineCount = shaderArraysPerEngineCount
  result.computeUnitsPerShaderArray = computeUnitsPerShaderArray
  result.simdPerComputeUnit = simdPerComputeUnit
  result.wavefrontsPerSimd = wavefrontsPerSimd
  result.wavefrontSize = wavefrontSize
  result.sgprsPerSimd = sgprsPerSimd
  result.minSgprAllocation = minSgprAllocation
  result.maxSgprAllocation = maxSgprAllocation
  result.sgprAllocationGranularity = sgprAllocationGranularity
  result.vgprsPerSimd = vgprsPerSimd
  result.minVgprAllocation = minVgprAllocation
  result.maxVgprAllocation = maxVgprAllocation
  result.vgprAllocationGranularity = vgprAllocationGranularity

proc mkVkDescriptorSetVariableDescriptorCountAllocateInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO,
  pNext: pointer = nil,
  descriptorSetCount: uint32 = 0.uint32,
  pDescriptorCounts: ptr uint32 ,
  ) : VkDescriptorSetVariableDescriptorCountAllocateInfo =
  result.sType = sType
  result.pNext = pNext
  result.descriptorSetCount = descriptorSetCount
  result.pDescriptorCounts = pDescriptorCounts

proc mkVkDescriptorSetVariableDescriptorCountLayoutSupport*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT,
  pNext: pointer = nil,
  maxVariableDescriptorCount: uint32 ,
  ) : VkDescriptorSetVariableDescriptorCountLayoutSupport =
  result.sType = sType
  result.pNext = pNext
  result.maxVariableDescriptorCount = maxVariableDescriptorCount

proc mkVkSubpassBeginInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO,
  pNext: pointer = nil,
  contents: VkSubpassContents ,
  ) : VkSubpassBeginInfo =
  result.sType = sType
  result.pNext = pNext
  result.contents = contents

proc mkVkSubpassEndInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_SUBPASS_END_INFO,
  pNext: pointer = nil,
  ) : VkSubpassEndInfo =
  result.sType = sType
  result.pNext = pNext

proc mkVkPhysicalDeviceTimelineSemaphoreProperties*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES,
  pNext: pointer = nil,
  maxTimelineSemaphoreValueDifference: uint64 ,
  ) : VkPhysicalDeviceTimelineSemaphoreProperties =
  result.sType = sType
  result.pNext = pNext
  result.maxTimelineSemaphoreValueDifference = maxTimelineSemaphoreValueDifference

proc mkVkSemaphoreTypeCreateInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO,
  pNext: pointer = nil,
  semaphoreType: VkSemaphoreType ,
  initialValue: uint64 ,
  ) : VkSemaphoreTypeCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.semaphoreType = semaphoreType
  result.initialValue = initialValue

proc mkVkTimelineSemaphoreSubmitInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO,
  pNext: pointer = nil,
  waitSemaphoreValueCount: uint32 = 0.uint32,
  pWaitSemaphoreValues: ptr uint64 = nil,
  signalSemaphoreValueCount: uint32 = 0.uint32,
  pSignalSemaphoreValues: ptr uint64 = nil,
  ) : VkTimelineSemaphoreSubmitInfo =
  result.sType = sType
  result.pNext = pNext
  result.waitSemaphoreValueCount = waitSemaphoreValueCount
  result.pWaitSemaphoreValues = pWaitSemaphoreValues
  result.signalSemaphoreValueCount = signalSemaphoreValueCount
  result.pSignalSemaphoreValues = pSignalSemaphoreValues

proc mkVkSemaphoreSignalInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO,
  pNext: pointer = nil,
  semaphore: VkSemaphore ,
  value: uint64 ,
  ) : VkSemaphoreSignalInfo =
  result.sType = sType
  result.pNext = pNext
  result.semaphore = semaphore
  result.value = value

proc mkVkVertexInputBindingDivisorDescriptionEXT*(
  binding: uint32 ,
  divisor: uint32 ,
  ) : VkVertexInputBindingDivisorDescriptionEXT =
  result.binding = binding
  result.divisor = divisor

proc mkVkPipelineVertexInputDivisorStateCreateInfoEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT,
  pNext: pointer = nil,
  vertexBindingDivisorCount: uint32 ,
  pVertexBindingDivisors: ptr VkVertexInputBindingDivisorDescriptionEXT ,
  ) : VkPipelineVertexInputDivisorStateCreateInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.vertexBindingDivisorCount = vertexBindingDivisorCount
  result.pVertexBindingDivisors = pVertexBindingDivisors

proc mkVkPhysicalDeviceVertexAttributeDivisorPropertiesEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT,
  pNext: pointer = nil,
  maxVertexAttribDivisor: uint32 ,
  ) : VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT =
  result.sType = sType
  result.pNext = pNext
  result.maxVertexAttribDivisor = maxVertexAttribDivisor

proc mkVkPhysicalDevicePCIBusInfoPropertiesEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT,
  pNext: pointer = nil,
  pciDomain: uint32 ,
  pciBus: uint32 ,
  pciDevice: uint32 ,
  pciFunction: uint32 ,
  ) : VkPhysicalDevicePCIBusInfoPropertiesEXT =
  result.sType = sType
  result.pNext = pNext
  result.pciDomain = pciDomain
  result.pciBus = pciBus
  result.pciDevice = pciDevice
  result.pciFunction = pciFunction

proc mkVkImportAndroidHardwareBufferInfoANDROID*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID,
  pNext: pointer = nil,
  buffer: ptr AHardwareBuffer ,
  ) : VkImportAndroidHardwareBufferInfoANDROID =
  result.sType = sType
  result.pNext = pNext
  result.buffer = buffer

proc mkVkAndroidHardwareBufferUsageANDROID*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID,
  pNext: pointer = nil,
  androidHardwareBufferUsage: uint64 ,
  ) : VkAndroidHardwareBufferUsageANDROID =
  result.sType = sType
  result.pNext = pNext
  result.androidHardwareBufferUsage = androidHardwareBufferUsage

proc mkVkMemoryGetAndroidHardwareBufferInfoANDROID*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID,
  pNext: pointer = nil,
  memory: VkDeviceMemory ,
  ) : VkMemoryGetAndroidHardwareBufferInfoANDROID =
  result.sType = sType
  result.pNext = pNext
  result.memory = memory

proc mkVkExternalFormatANDROID*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID,
  pNext: pointer = nil,
  externalFormat: uint64 ,
  ) : VkExternalFormatANDROID =
  result.sType = sType
  result.pNext = pNext
  result.externalFormat = externalFormat

proc mkVkCheckpointDataNV*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV,
  pNext: pointer = nil,
  stage: VkPipelineStageFlagBits ,
  pCheckpointMarker: pointer ,
  ) : VkCheckpointDataNV =
  result.sType = sType
  result.pNext = pNext
  result.stage = stage
  result.pCheckpointMarker = pCheckpointMarker

proc mkVkImageViewASTCDecodeModeEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT,
  pNext: pointer = nil,
  decodeMode: VkFormat ,
  ) : VkImageViewASTCDecodeModeEXT =
  result.sType = sType
  result.pNext = pNext
  result.decodeMode = decodeMode

proc mkVkPipelineViewportExclusiveScissorStateCreateInfoNV*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV,
  pNext: pointer = nil,
  exclusiveScissorCount: uint32 = 0.uint32,
  pExclusiveScissors: ptr VkRect2D ,
  ) : VkPipelineViewportExclusiveScissorStateCreateInfoNV =
  result.sType = sType
  result.pNext = pNext
  result.exclusiveScissorCount = exclusiveScissorCount
  result.pExclusiveScissors = pExclusiveScissors

proc mkVkShadingRatePaletteNV*(
  shadingRatePaletteEntryCount: uint32 ,
  pShadingRatePaletteEntries: ptr VkShadingRatePaletteEntryNV ,
  ) : VkShadingRatePaletteNV =
  result.shadingRatePaletteEntryCount = shadingRatePaletteEntryCount
  result.pShadingRatePaletteEntries = pShadingRatePaletteEntries

proc mkVkPhysicalDeviceShadingRateImagePropertiesNV*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV,
  pNext: pointer = nil,
  shadingRateTexelSize: VkExtent2D ,
  shadingRatePaletteSize: uint32 ,
  shadingRateMaxCoarseSamples: uint32 ,
  ) : VkPhysicalDeviceShadingRateImagePropertiesNV =
  result.sType = sType
  result.pNext = pNext
  result.shadingRateTexelSize = shadingRateTexelSize
  result.shadingRatePaletteSize = shadingRatePaletteSize
  result.shadingRateMaxCoarseSamples = shadingRateMaxCoarseSamples

proc mkVkCoarseSampleLocationNV*(
  pixelX: uint32 ,
  pixelY: uint32 ,
  sample: uint32 ,
  ) : VkCoarseSampleLocationNV =
  result.pixelX = pixelX
  result.pixelY = pixelY
  result.sample = sample

proc mkVkCoarseSampleOrderCustomNV*(
  shadingRate: VkShadingRatePaletteEntryNV ,
  sampleCount: uint32 ,
  sampleLocationCount: uint32 ,
  pSampleLocations: ptr VkCoarseSampleLocationNV ,
  ) : VkCoarseSampleOrderCustomNV =
  result.shadingRate = shadingRate
  result.sampleCount = sampleCount
  result.sampleLocationCount = sampleLocationCount
  result.pSampleLocations = pSampleLocations

proc mkVkPipelineViewportCoarseSampleOrderStateCreateInfoNV*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV,
  pNext: pointer = nil,
  sampleOrderType: VkCoarseSampleOrderTypeNV ,
  customSampleOrderCount: uint32 = 0.uint32,
  pCustomSampleOrders: ptr VkCoarseSampleOrderCustomNV ,
  ) : VkPipelineViewportCoarseSampleOrderStateCreateInfoNV =
  result.sType = sType
  result.pNext = pNext
  result.sampleOrderType = sampleOrderType
  result.customSampleOrderCount = customSampleOrderCount
  result.pCustomSampleOrders = pCustomSampleOrders

proc mkVkPhysicalDeviceMeshShaderPropertiesNV*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV,
  pNext: pointer = nil,
  maxDrawMeshTasksCount: uint32 ,
  maxTaskWorkGroupInvocations: uint32 ,
  maxTaskWorkGroupSize: array[3,uint32] ,
  maxTaskTotalMemorySize: uint32 ,
  maxTaskOutputCount: uint32 ,
  maxMeshWorkGroupInvocations: uint32 ,
  maxMeshWorkGroupSize: array[3,uint32] ,
  maxMeshTotalMemorySize: uint32 ,
  maxMeshOutputVertices: uint32 ,
  maxMeshOutputPrimitives: uint32 ,
  maxMeshMultiviewViewCount: uint32 ,
  meshOutputPerVertexGranularity: uint32 ,
  meshOutputPerPrimitiveGranularity: uint32 ,
  ) : VkPhysicalDeviceMeshShaderPropertiesNV =
  result.sType = sType
  result.pNext = pNext
  result.maxDrawMeshTasksCount = maxDrawMeshTasksCount
  result.maxTaskWorkGroupInvocations = maxTaskWorkGroupInvocations
  result.maxTaskWorkGroupSize = maxTaskWorkGroupSize
  result.maxTaskTotalMemorySize = maxTaskTotalMemorySize
  result.maxTaskOutputCount = maxTaskOutputCount
  result.maxMeshWorkGroupInvocations = maxMeshWorkGroupInvocations
  result.maxMeshWorkGroupSize = maxMeshWorkGroupSize
  result.maxMeshTotalMemorySize = maxMeshTotalMemorySize
  result.maxMeshOutputVertices = maxMeshOutputVertices
  result.maxMeshOutputPrimitives = maxMeshOutputPrimitives
  result.maxMeshMultiviewViewCount = maxMeshMultiviewViewCount
  result.meshOutputPerVertexGranularity = meshOutputPerVertexGranularity
  result.meshOutputPerPrimitiveGranularity = meshOutputPerPrimitiveGranularity

proc mkVkDrawMeshTasksIndirectCommandNV*(
  taskCount: uint32 ,
  firstTask: uint32 ,
  ) : VkDrawMeshTasksIndirectCommandNV =
  result.taskCount = taskCount
  result.firstTask = firstTask

proc mkVkRayTracingShaderGroupCreateInfoNV*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV,
  pNext: pointer = nil,
  `type`: VkRayTracingShaderGroupTypeKHR ,
  generalShader: uint32 ,
  closestHitShader: uint32 ,
  anyHitShader: uint32 ,
  intersectionShader: uint32 ,
  ) : VkRayTracingShaderGroupCreateInfoNV =
  result.sType = sType
  result.pNext = pNext
  result.`type` = `type`
  result.generalShader = generalShader
  result.closestHitShader = closestHitShader
  result.anyHitShader = anyHitShader
  result.intersectionShader = intersectionShader

proc mkVkRayTracingShaderGroupCreateInfoKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR,
  pNext: pointer = nil,
  `type`: VkRayTracingShaderGroupTypeKHR ,
  generalShader: uint32 ,
  closestHitShader: uint32 ,
  anyHitShader: uint32 ,
  intersectionShader: uint32 ,
  pShaderGroupCaptureReplayHandle: pointer = nil,
  ) : VkRayTracingShaderGroupCreateInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.`type` = `type`
  result.generalShader = generalShader
  result.closestHitShader = closestHitShader
  result.anyHitShader = anyHitShader
  result.intersectionShader = intersectionShader
  result.pShaderGroupCaptureReplayHandle = pShaderGroupCaptureReplayHandle

proc mkVkWriteDescriptorSetAccelerationStructureKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR,
  pNext: pointer = nil,
  accelerationStructureCount: uint32 ,
  pAccelerationStructures: ptr VkAccelerationStructureKHR ,
  ) : VkWriteDescriptorSetAccelerationStructureKHR =
  result.sType = sType
  result.pNext = pNext
  result.accelerationStructureCount = accelerationStructureCount
  result.pAccelerationStructures = pAccelerationStructures

proc mkVkAccelerationStructureMemoryRequirementsInfoKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_KHR,
  pNext: pointer = nil,
  `type`: VkAccelerationStructureMemoryRequirementsTypeKHR ,
  buildType: VkAccelerationStructureBuildTypeKHR ,
  accelerationStructure: VkAccelerationStructureKHR ,
  ) : VkAccelerationStructureMemoryRequirementsInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.`type` = `type`
  result.buildType = buildType
  result.accelerationStructure = accelerationStructure

proc mkVkAccelerationStructureMemoryRequirementsInfoNV*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV,
  pNext: pointer = nil,
  `type`: VkAccelerationStructureMemoryRequirementsTypeNV ,
  accelerationStructure: VkAccelerationStructureNV ,
  ) : VkAccelerationStructureMemoryRequirementsInfoNV =
  result.sType = sType
  result.pNext = pNext
  result.`type` = `type`
  result.accelerationStructure = accelerationStructure

proc mkVkPhysicalDeviceRayTracingPropertiesKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_KHR,
  pNext: pointer = nil,
  shaderGroupHandleSize: uint32 ,
  maxRecursionDepth: uint32 ,
  maxShaderGroupStride: uint32 ,
  shaderGroupBaseAlignment: uint32 ,
  maxGeometryCount: uint64 ,
  maxInstanceCount: uint64 ,
  maxPrimitiveCount: uint64 ,
  maxDescriptorSetAccelerationStructures: uint32 ,
  shaderGroupHandleCaptureReplaySize: uint32 ,
  ) : VkPhysicalDeviceRayTracingPropertiesKHR =
  result.sType = sType
  result.pNext = pNext
  result.shaderGroupHandleSize = shaderGroupHandleSize
  result.maxRecursionDepth = maxRecursionDepth
  result.maxShaderGroupStride = maxShaderGroupStride
  result.shaderGroupBaseAlignment = shaderGroupBaseAlignment
  result.maxGeometryCount = maxGeometryCount
  result.maxInstanceCount = maxInstanceCount
  result.maxPrimitiveCount = maxPrimitiveCount
  result.maxDescriptorSetAccelerationStructures = maxDescriptorSetAccelerationStructures
  result.shaderGroupHandleCaptureReplaySize = shaderGroupHandleCaptureReplaySize

proc mkVkPhysicalDeviceRayTracingPropertiesNV*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV,
  pNext: pointer = nil,
  shaderGroupHandleSize: uint32 ,
  maxRecursionDepth: uint32 ,
  maxShaderGroupStride: uint32 ,
  shaderGroupBaseAlignment: uint32 ,
  maxGeometryCount: uint64 ,
  maxInstanceCount: uint64 ,
  maxTriangleCount: uint64 ,
  maxDescriptorSetAccelerationStructures: uint32 ,
  ) : VkPhysicalDeviceRayTracingPropertiesNV =
  result.sType = sType
  result.pNext = pNext
  result.shaderGroupHandleSize = shaderGroupHandleSize
  result.maxRecursionDepth = maxRecursionDepth
  result.maxShaderGroupStride = maxShaderGroupStride
  result.shaderGroupBaseAlignment = shaderGroupBaseAlignment
  result.maxGeometryCount = maxGeometryCount
  result.maxInstanceCount = maxInstanceCount
  result.maxTriangleCount = maxTriangleCount
  result.maxDescriptorSetAccelerationStructures = maxDescriptorSetAccelerationStructures

proc mkVkTraceRaysIndirectCommandKHR*(
  width: uint32 ,
  height: uint32 ,
  depth: uint32 ,
  ) : VkTraceRaysIndirectCommandKHR =
  result.width = width
  result.height = height
  result.depth = depth

proc mkVkPhysicalDeviceImageDrmFormatModifierInfoEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT,
  pNext: pointer = nil,
  drmFormatModifier: uint64 ,
  sharingMode: VkSharingMode ,
  queueFamilyIndexCount: uint32 = 0.uint32,
  pQueueFamilyIndices: ptr uint32 ,
  ) : VkPhysicalDeviceImageDrmFormatModifierInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.drmFormatModifier = drmFormatModifier
  result.sharingMode = sharingMode
  result.queueFamilyIndexCount = queueFamilyIndexCount
  result.pQueueFamilyIndices = pQueueFamilyIndices

proc mkVkImageDrmFormatModifierListCreateInfoEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT,
  pNext: pointer = nil,
  drmFormatModifierCount: uint32 ,
  pDrmFormatModifiers: ptr uint64 ,
  ) : VkImageDrmFormatModifierListCreateInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.drmFormatModifierCount = drmFormatModifierCount
  result.pDrmFormatModifiers = pDrmFormatModifiers

proc mkVkImageDrmFormatModifierPropertiesEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT,
  pNext: pointer = nil,
  drmFormatModifier: uint64 ,
  ) : VkImageDrmFormatModifierPropertiesEXT =
  result.sType = sType
  result.pNext = pNext
  result.drmFormatModifier = drmFormatModifier

proc mkVkDeviceMemoryOverallocationCreateInfoAMD*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD,
  pNext: pointer = nil,
  overallocationBehavior: VkMemoryOverallocationBehaviorAMD ,
  ) : VkDeviceMemoryOverallocationCreateInfoAMD =
  result.sType = sType
  result.pNext = pNext
  result.overallocationBehavior = overallocationBehavior

proc mkVkRenderPassFragmentDensityMapCreateInfoEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT,
  pNext: pointer = nil,
  fragmentDensityMapAttachment: VkAttachmentReference ,
  ) : VkRenderPassFragmentDensityMapCreateInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.fragmentDensityMapAttachment = fragmentDensityMapAttachment

proc mkVkMemoryPriorityAllocateInfoEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT,
  pNext: pointer = nil,
  priority: float32 ,
  ) : VkMemoryPriorityAllocateInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.priority = priority

proc mkVkBufferDeviceAddressInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO,
  pNext: pointer = nil,
  buffer: VkBuffer ,
  ) : VkBufferDeviceAddressInfo =
  result.sType = sType
  result.pNext = pNext
  result.buffer = buffer

proc mkVkBufferOpaqueCaptureAddressCreateInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO,
  pNext: pointer = nil,
  opaqueCaptureAddress: uint64 ,
  ) : VkBufferOpaqueCaptureAddressCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.opaqueCaptureAddress = opaqueCaptureAddress

proc mkVkPhysicalDeviceImageViewImageFormatInfoEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT,
  pNext: pointer = nil,
  imageViewType: VkImageViewType ,
  ) : VkPhysicalDeviceImageViewImageFormatInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.imageViewType = imageViewType

proc mkVkRenderPassAttachmentBeginInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO,
  pNext: pointer = nil,
  attachmentCount: uint32 = 0.uint32,
  pAttachments: ptr VkImageView ,
  ) : VkRenderPassAttachmentBeginInfo =
  result.sType = sType
  result.pNext = pNext
  result.attachmentCount = attachmentCount
  result.pAttachments = pAttachments

proc mkVkCooperativeMatrixPropertiesNV*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV,
  pNext: pointer = nil,
  MSize: uint32 ,
  NSize: uint32 ,
  KSize: uint32 ,
  AType: VkComponentTypeNV ,
  BType: VkComponentTypeNV ,
  CType: VkComponentTypeNV ,
  DType: VkComponentTypeNV ,
  scope: VkScopeNV ,
  ) : VkCooperativeMatrixPropertiesNV =
  result.sType = sType
  result.pNext = pNext
  result.MSize = MSize
  result.NSize = NSize
  result.KSize = KSize
  result.AType = AType
  result.BType = BType
  result.CType = CType
  result.DType = DType
  result.scope = scope

proc mkVkImageViewHandleInfoNVX*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX,
  pNext: pointer = nil,
  imageView: VkImageView ,
  descriptorType: VkDescriptorType ,
  sampler: VkSampler = nil,
  ) : VkImageViewHandleInfoNVX =
  result.sType = sType
  result.pNext = pNext
  result.imageView = imageView
  result.descriptorType = descriptorType
  result.sampler = sampler

proc mkVkPresentFrameTokenGGP*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP,
  pNext: pointer = nil,
  frameToken: GgpFrameToken ,
  ) : VkPresentFrameTokenGGP =
  result.sType = sType
  result.pNext = pNext
  result.frameToken = frameToken

proc mkVkSurfaceFullScreenExclusiveInfoEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT,
  pNext: pointer = nil,
  fullScreenExclusive: VkFullScreenExclusiveEXT ,
  ) : VkSurfaceFullScreenExclusiveInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.fullScreenExclusive = fullScreenExclusive

proc mkVkSurfaceFullScreenExclusiveWin32InfoEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT,
  pNext: pointer = nil,
  hmonitor: HMONITOR ,
  ) : VkSurfaceFullScreenExclusiveWin32InfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.hmonitor = hmonitor

proc mkVkPerformanceCounterKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR,
  pNext: pointer = nil,
  unit: VkPerformanceCounterUnitKHR ,
  scope: VkPerformanceCounterScopeKHR ,
  storage: VkPerformanceCounterStorageKHR ,
  uuid: array[VK_UUID_SIZE,uint8] ,
  ) : VkPerformanceCounterKHR =
  result.sType = sType
  result.pNext = pNext
  result.unit = unit
  result.scope = scope
  result.storage = storage
  result.uuid = uuid

proc mkVkQueryPoolPerformanceCreateInfoKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR,
  pNext: pointer = nil,
  queueFamilyIndex: uint32 ,
  counterIndexCount: uint32 ,
  pCounterIndices: ptr uint32 ,
  ) : VkQueryPoolPerformanceCreateInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.queueFamilyIndex = queueFamilyIndex
  result.counterIndexCount = counterIndexCount
  result.pCounterIndices = pCounterIndices

proc mkVkPerformanceQuerySubmitInfoKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR,
  pNext: pointer = nil,
  counterPassIndex: uint32 ,
  ) : VkPerformanceQuerySubmitInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.counterPassIndex = counterPassIndex

proc mkVkInitializePerformanceApiInfoINTEL*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL,
  pNext: pointer = nil,
  pUserData: pointer = nil,
  ) : VkInitializePerformanceApiInfoINTEL =
  result.sType = sType
  result.pNext = pNext
  result.pUserData = pUserData

proc mkVkQueryPoolPerformanceQueryCreateInfoINTEL*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL,
  pNext: pointer = nil,
  performanceCountersSampling: VkQueryPoolSamplingModeINTEL ,
  ) : VkQueryPoolPerformanceQueryCreateInfoINTEL =
  result.sType = sType
  result.pNext = pNext
  result.performanceCountersSampling = performanceCountersSampling

proc mkVkPerformanceMarkerInfoINTEL*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL,
  pNext: pointer = nil,
  marker: uint64 ,
  ) : VkPerformanceMarkerInfoINTEL =
  result.sType = sType
  result.pNext = pNext
  result.marker = marker

proc mkVkPerformanceStreamMarkerInfoINTEL*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL,
  pNext: pointer = nil,
  marker: uint32 ,
  ) : VkPerformanceStreamMarkerInfoINTEL =
  result.sType = sType
  result.pNext = pNext
  result.marker = marker

proc mkVkPerformanceConfigurationAcquireInfoINTEL*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL,
  pNext: pointer = nil,
  `type`: VkPerformanceConfigurationTypeINTEL ,
  ) : VkPerformanceConfigurationAcquireInfoINTEL =
  result.sType = sType
  result.pNext = pNext
  result.`type` = `type`

proc mkVkPhysicalDeviceShaderSMBuiltinsPropertiesNV*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV,
  pNext: pointer = nil,
  shaderSMCount: uint32 ,
  shaderWarpsPerSM: uint32 ,
  ) : VkPhysicalDeviceShaderSMBuiltinsPropertiesNV =
  result.sType = sType
  result.pNext = pNext
  result.shaderSMCount = shaderSMCount
  result.shaderWarpsPerSM = shaderWarpsPerSM

proc mkVkAttachmentReferenceStencilLayout*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT,
  pNext: pointer = nil,
  stencilLayout: VkImageLayout ,
  ) : VkAttachmentReferenceStencilLayout =
  result.sType = sType
  result.pNext = pNext
  result.stencilLayout = stencilLayout

proc mkVkAttachmentDescriptionStencilLayout*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT,
  pNext: pointer = nil,
  stencilInitialLayout: VkImageLayout ,
  stencilFinalLayout: VkImageLayout ,
  ) : VkAttachmentDescriptionStencilLayout =
  result.sType = sType
  result.pNext = pNext
  result.stencilInitialLayout = stencilInitialLayout
  result.stencilFinalLayout = stencilFinalLayout

proc mkVkPipelineInfoKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR,
  pNext: pointer = nil,
  pipeline: VkPipeline ,
  ) : VkPipelineInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.pipeline = pipeline

proc mkVkPipelineExecutableInfoKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR,
  pNext: pointer = nil,
  pipeline: VkPipeline ,
  executableIndex: uint32 ,
  ) : VkPipelineExecutableInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.pipeline = pipeline
  result.executableIndex = executableIndex

proc mkVkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT,
  pNext: pointer = nil,
  requiredSubgroupSize: uint32 ,
  ) : VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.requiredSubgroupSize = requiredSubgroupSize

proc mkVkMemoryOpaqueCaptureAddressAllocateInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO,
  pNext: pointer = nil,
  opaqueCaptureAddress: uint64 ,
  ) : VkMemoryOpaqueCaptureAddressAllocateInfo =
  result.sType = sType
  result.pNext = pNext
  result.opaqueCaptureAddress = opaqueCaptureAddress

proc mkVkDeviceMemoryOpaqueCaptureAddressInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO,
  pNext: pointer = nil,
  memory: VkDeviceMemory ,
  ) : VkDeviceMemoryOpaqueCaptureAddressInfo =
  result.sType = sType
  result.pNext = pNext
  result.memory = memory

proc mkVkPhysicalDeviceLineRasterizationPropertiesEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT,
  pNext: pointer = nil,
  lineSubPixelPrecisionBits: uint32 ,
  ) : VkPhysicalDeviceLineRasterizationPropertiesEXT =
  result.sType = sType
  result.pNext = pNext
  result.lineSubPixelPrecisionBits = lineSubPixelPrecisionBits

proc mkVkSamplerCustomBorderColorCreateInfoEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT,
  pNext: pointer = nil,
  customBorderColor: VkClearColorValue ,
  format: VkFormat ,
  ) : VkSamplerCustomBorderColorCreateInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.customBorderColor = customBorderColor
  result.format = format

proc mkVkPhysicalDeviceCustomBorderColorPropertiesEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT,
  pNext: pointer = nil,
  maxCustomBorderColorSamplers: uint32 ,
  ) : VkPhysicalDeviceCustomBorderColorPropertiesEXT =
  result.sType = sType
  result.pNext = pNext
  result.maxCustomBorderColorSamplers = maxCustomBorderColorSamplers

proc mkVkAccelerationStructureBuildOffsetInfoKHR*(
  primitiveCount: uint32 ,
  primitiveOffset: uint32 ,
  firstVertex: uint32 = 0.uint32,
  transformOffset: uint32 = 0.uint32,
  ) : VkAccelerationStructureBuildOffsetInfoKHR =
  result.primitiveCount = primitiveCount
  result.primitiveOffset = primitiveOffset
  result.firstVertex = firstVertex
  result.transformOffset = transformOffset

proc mkVkAabbPositionsKHR*(
  minX: float32 ,
  minY: float32 ,
  minZ: float32 ,
  maxX: float32 ,
  maxY: float32 ,
  maxZ: float32 ,
  ) : VkAabbPositionsKHR =
  result.minX = minX
  result.minY = minY
  result.minZ = minZ
  result.maxX = maxX
  result.maxY = maxY
  result.maxZ = maxZ

proc mkVkTransformMatrixKHR*(
  matrix: array[3,array[4, float32]] ,
  ) : VkTransformMatrixKHR =
  result.matrix = matrix

proc mkVkAccelerationStructureDeviceAddressInfoKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR,
  pNext: pointer = nil,
  accelerationStructure: VkAccelerationStructureKHR ,
  ) : VkAccelerationStructureDeviceAddressInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.accelerationStructure = accelerationStructure

proc mkVkAccelerationStructureVersionKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_KHR,
  pNext: pointer = nil,
  versionData: ptr uint8 ,
  ) : VkAccelerationStructureVersionKHR =
  result.sType = sType
  result.pNext = pNext
  result.versionData = versionData

proc mkVkCopyAccelerationStructureInfoKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR,
  pNext: pointer = nil,
  src: VkAccelerationStructureKHR ,
  dst: VkAccelerationStructureKHR ,
  mode: VkCopyAccelerationStructureModeKHR ,
  ) : VkCopyAccelerationStructureInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.src = src
  result.dst = dst
  result.mode = mode

proc mkVkRayTracingPipelineInterfaceCreateInfoKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR,
  pNext: pointer = nil,
  maxPayloadSize: uint32 ,
  maxAttributeSize: uint32 ,
  maxCallableSize: uint32 ,
  ) : VkRayTracingPipelineInterfaceCreateInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.maxPayloadSize = maxPayloadSize
  result.maxAttributeSize = maxAttributeSize
  result.maxCallableSize = maxCallableSize

proc mkVkDeferredOperationInfoKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_DEFERRED_OPERATION_INFO_KHR,
  pNext: pointer = nil,
  operationHandle: VkDeferredOperationKHR ,
  ) : VkDeferredOperationInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.operationHandle = operationHandle

proc mkVkPipelineLibraryCreateInfoKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR,
  pNext: pointer = nil,
  libraryCount: uint32 = 0.uint32,
  pLibraries: ptr VkPipeline ,
  ) : VkPipelineLibraryCreateInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.libraryCount = libraryCount
  result.pLibraries = pLibraries

proc mkVkRenderPassTransformBeginInfoQCOM*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM,
  pNext: pointer = nil,
  transform: VkSurfaceTransformFlagBitsKHR ,
  ) : VkRenderPassTransformBeginInfoQCOM =
  result.sType = sType
  result.pNext = pNext
  result.transform = transform

proc mkVkCommandBufferInheritanceRenderPassTransformInfoQCOM*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM,
  pNext: pointer = nil,
  transform: VkSurfaceTransformFlagBitsKHR ,
  renderArea: VkRect2D ,
  ) : VkCommandBufferInheritanceRenderPassTransformInfoQCOM =
  result.sType = sType
  result.pNext = pNext
  result.transform = transform
  result.renderArea = renderArea

proc mkVkDeviceQueueCreateInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO,
  pNext: pointer = nil,
  flags: VkDeviceQueueCreateFlags = 0.VkDeviceQueueCreateFlags,
  queueFamilyIndex: uint32 ,
  queueCount: uint32 ,
  pQueuePriorities: ptr float32 ,
  ) : VkDeviceQueueCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.queueFamilyIndex = queueFamilyIndex
  result.queueCount = queueCount
  result.pQueuePriorities = pQueuePriorities

proc mkVkInstanceCreateInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO,
  pNext: pointer = nil,
  flags: VkInstanceCreateFlags = 0.VkInstanceCreateFlags,
  pApplicationInfo: ptr VkApplicationInfo = nil,
  enabledLayerCount: uint32 = 0.uint32,
  ppEnabledLayerNames: ptr ptr char ,
  enabledExtensionCount: uint32 = 0.uint32,
  ppEnabledExtensionNames: ptr ptr char ,
  ) : VkInstanceCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.pApplicationInfo = pApplicationInfo
  result.enabledLayerCount = enabledLayerCount
  result.ppEnabledLayerNames = ppEnabledLayerNames
  result.enabledExtensionCount = enabledExtensionCount
  result.ppEnabledExtensionNames = ppEnabledExtensionNames

proc mkVkQueueFamilyProperties*(
  queueFlags: VkQueueFlags = 0.VkQueueFlags,
  queueCount: uint32 ,
  timestampValidBits: uint32 ,
  minImageTransferGranularity: VkExtent3D ,
  ) : VkQueueFamilyProperties =
  result.queueFlags = queueFlags
  result.queueCount = queueCount
  result.timestampValidBits = timestampValidBits
  result.minImageTransferGranularity = minImageTransferGranularity

proc mkVkMemoryAllocateInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO,
  pNext: pointer = nil,
  allocationSize: VkDeviceSize ,
  memoryTypeIndex: uint32 ,
  ) : VkMemoryAllocateInfo =
  result.sType = sType
  result.pNext = pNext
  result.allocationSize = allocationSize
  result.memoryTypeIndex = memoryTypeIndex

proc mkVkMemoryRequirements*(
  size: VkDeviceSize ,
  alignment: VkDeviceSize ,
  memoryTypeBits: uint32 ,
  ) : VkMemoryRequirements =
  result.size = size
  result.alignment = alignment
  result.memoryTypeBits = memoryTypeBits

proc mkVkSparseImageFormatProperties*(
  aspectMask: VkImageAspectFlags = 0.VkImageAspectFlags,
  imageGranularity: VkExtent3D ,
  flags: VkSparseImageFormatFlags = 0.VkSparseImageFormatFlags,
  ) : VkSparseImageFormatProperties =
  result.aspectMask = aspectMask
  result.imageGranularity = imageGranularity
  result.flags = flags

proc mkVkSparseImageMemoryRequirements*(
  formatProperties: VkSparseImageFormatProperties ,
  imageMipTailFirstLod: uint32 ,
  imageMipTailSize: VkDeviceSize ,
  imageMipTailOffset: VkDeviceSize ,
  imageMipTailStride: VkDeviceSize ,
  ) : VkSparseImageMemoryRequirements =
  result.formatProperties = formatProperties
  result.imageMipTailFirstLod = imageMipTailFirstLod
  result.imageMipTailSize = imageMipTailSize
  result.imageMipTailOffset = imageMipTailOffset
  result.imageMipTailStride = imageMipTailStride

proc mkVkMemoryType*(
  propertyFlags: VkMemoryPropertyFlags = 0.VkMemoryPropertyFlags,
  heapIndex: uint32 ,
  ) : VkMemoryType =
  result.propertyFlags = propertyFlags
  result.heapIndex = heapIndex

proc mkVkMemoryHeap*(
  size: VkDeviceSize ,
  flags: VkMemoryHeapFlags = 0.VkMemoryHeapFlags,
  ) : VkMemoryHeap =
  result.size = size
  result.flags = flags

proc mkVkMappedMemoryRange*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE,
  pNext: pointer = nil,
  memory: VkDeviceMemory ,
  offset: VkDeviceSize ,
  size: VkDeviceSize ,
  ) : VkMappedMemoryRange =
  result.sType = sType
  result.pNext = pNext
  result.memory = memory
  result.offset = offset
  result.size = size

proc mkVkFormatProperties*(
  linearTilingFeatures: VkFormatFeatureFlags = 0.VkFormatFeatureFlags,
  optimalTilingFeatures: VkFormatFeatureFlags = 0.VkFormatFeatureFlags,
  bufferFeatures: VkFormatFeatureFlags = 0.VkFormatFeatureFlags,
  ) : VkFormatProperties =
  result.linearTilingFeatures = linearTilingFeatures
  result.optimalTilingFeatures = optimalTilingFeatures
  result.bufferFeatures = bufferFeatures

proc mkVkImageFormatProperties*(
  maxExtent: VkExtent3D ,
  maxMipLevels: uint32 ,
  maxArrayLayers: uint32 ,
  sampleCounts: VkSampleCountFlags = 0.VkSampleCountFlags,
  maxResourceSize: VkDeviceSize ,
  ) : VkImageFormatProperties =
  result.maxExtent = maxExtent
  result.maxMipLevels = maxMipLevels
  result.maxArrayLayers = maxArrayLayers
  result.sampleCounts = sampleCounts
  result.maxResourceSize = maxResourceSize

proc mkVkDescriptorBufferInfo*(
  buffer: VkBuffer = nil,
  offset: VkDeviceSize ,
  range: VkDeviceSize ,
  ) : VkDescriptorBufferInfo =
  result.buffer = buffer
  result.offset = offset
  result.range = range

proc mkVkWriteDescriptorSet*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET,
  pNext: pointer = nil,
  dstSet: VkDescriptorSet ,
  dstBinding: uint32 ,
  dstArrayElement: uint32 ,
  descriptorCount: uint32 ,
  descriptorType: VkDescriptorType ,
  pImageInfo: ptr VkDescriptorImageInfo ,
  pBufferInfo: ptr VkDescriptorBufferInfo ,
  pTexelBufferView: ptr VkBufferView ,
  ) : VkWriteDescriptorSet =
  result.sType = sType
  result.pNext = pNext
  result.dstSet = dstSet
  result.dstBinding = dstBinding
  result.dstArrayElement = dstArrayElement
  result.descriptorCount = descriptorCount
  result.descriptorType = descriptorType
  result.pImageInfo = pImageInfo
  result.pBufferInfo = pBufferInfo
  result.pTexelBufferView = pTexelBufferView

proc mkVkBufferCreateInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO,
  pNext: pointer = nil,
  flags: VkBufferCreateFlags = 0.VkBufferCreateFlags,
  size: VkDeviceSize ,
  usage: VkBufferUsageFlags ,
  sharingMode: VkSharingMode ,
  queueFamilyIndexCount: uint32 = 0.uint32,
  pQueueFamilyIndices: ptr uint32 ,
  ) : VkBufferCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.size = size
  result.usage = usage
  result.sharingMode = sharingMode
  result.queueFamilyIndexCount = queueFamilyIndexCount
  result.pQueueFamilyIndices = pQueueFamilyIndices

proc mkVkBufferViewCreateInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO,
  pNext: pointer = nil,
  flags: VkBufferViewCreateFlags = 0.VkBufferViewCreateFlags,
  buffer: VkBuffer ,
  format: VkFormat ,
  offset: VkDeviceSize ,
  range: VkDeviceSize ,
  ) : VkBufferViewCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.buffer = buffer
  result.format = format
  result.offset = offset
  result.range = range

proc mkVkImageSubresource*(
  aspectMask: VkImageAspectFlags ,
  mipLevel: uint32 ,
  arrayLayer: uint32 ,
  ) : VkImageSubresource =
  result.aspectMask = aspectMask
  result.mipLevel = mipLevel
  result.arrayLayer = arrayLayer

proc mkVkImageSubresourceLayers*(
  aspectMask: VkImageAspectFlags ,
  mipLevel: uint32 ,
  baseArrayLayer: uint32 ,
  layerCount: uint32 ,
  ) : VkImageSubresourceLayers =
  result.aspectMask = aspectMask
  result.mipLevel = mipLevel
  result.baseArrayLayer = baseArrayLayer
  result.layerCount = layerCount

proc mkVkImageSubresourceRange*(
  aspectMask: VkImageAspectFlags ,
  baseMipLevel: uint32 ,
  levelCount: uint32 ,
  baseArrayLayer: uint32 ,
  layerCount: uint32 ,
  ) : VkImageSubresourceRange =
  result.aspectMask = aspectMask
  result.baseMipLevel = baseMipLevel
  result.levelCount = levelCount
  result.baseArrayLayer = baseArrayLayer
  result.layerCount = layerCount

proc mkVkMemoryBarrier*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_MEMORY_BARRIER,
  pNext: pointer = nil,
  srcAccessMask: VkAccessFlags = 0.VkAccessFlags,
  dstAccessMask: VkAccessFlags = 0.VkAccessFlags,
  ) : VkMemoryBarrier =
  result.sType = sType
  result.pNext = pNext
  result.srcAccessMask = srcAccessMask
  result.dstAccessMask = dstAccessMask

proc mkVkBufferMemoryBarrier*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER,
  pNext: pointer = nil,
  srcAccessMask: VkAccessFlags ,
  dstAccessMask: VkAccessFlags ,
  srcQueueFamilyIndex: uint32 ,
  dstQueueFamilyIndex: uint32 ,
  buffer: VkBuffer ,
  offset: VkDeviceSize ,
  size: VkDeviceSize ,
  ) : VkBufferMemoryBarrier =
  result.sType = sType
  result.pNext = pNext
  result.srcAccessMask = srcAccessMask
  result.dstAccessMask = dstAccessMask
  result.srcQueueFamilyIndex = srcQueueFamilyIndex
  result.dstQueueFamilyIndex = dstQueueFamilyIndex
  result.buffer = buffer
  result.offset = offset
  result.size = size

proc mkVkImageMemoryBarrier*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER,
  pNext: pointer = nil,
  srcAccessMask: VkAccessFlags ,
  dstAccessMask: VkAccessFlags ,
  oldLayout: VkImageLayout ,
  newLayout: VkImageLayout ,
  srcQueueFamilyIndex: uint32 ,
  dstQueueFamilyIndex: uint32 ,
  image: VkImage ,
  subresourceRange: VkImageSubresourceRange ,
  ) : VkImageMemoryBarrier =
  result.sType = sType
  result.pNext = pNext
  result.srcAccessMask = srcAccessMask
  result.dstAccessMask = dstAccessMask
  result.oldLayout = oldLayout
  result.newLayout = newLayout
  result.srcQueueFamilyIndex = srcQueueFamilyIndex
  result.dstQueueFamilyIndex = dstQueueFamilyIndex
  result.image = image
  result.subresourceRange = subresourceRange

proc mkVkImageCreateInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO,
  pNext: pointer = nil,
  flags: VkImageCreateFlags = 0.VkImageCreateFlags,
  imageType: VkImageType ,
  format: VkFormat ,
  extent: VkExtent3D ,
  mipLevels: uint32 ,
  arrayLayers: uint32 ,
  samples: VkSampleCountFlagBits ,
  tiling: VkImageTiling ,
  usage: VkImageUsageFlags ,
  sharingMode: VkSharingMode ,
  queueFamilyIndexCount: uint32 = 0.uint32,
  pQueueFamilyIndices: ptr uint32 ,
  initialLayout: VkImageLayout ,
  ) : VkImageCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.imageType = imageType
  result.format = format
  result.extent = extent
  result.mipLevels = mipLevels
  result.arrayLayers = arrayLayers
  result.samples = samples
  result.tiling = tiling
  result.usage = usage
  result.sharingMode = sharingMode
  result.queueFamilyIndexCount = queueFamilyIndexCount
  result.pQueueFamilyIndices = pQueueFamilyIndices
  result.initialLayout = initialLayout

proc mkVkSubresourceLayout*(
  offset: VkDeviceSize ,
  size: VkDeviceSize ,
  rowPitch: VkDeviceSize ,
  arrayPitch: VkDeviceSize ,
  depthPitch: VkDeviceSize ,
  ) : VkSubresourceLayout =
  result.offset = offset
  result.size = size
  result.rowPitch = rowPitch
  result.arrayPitch = arrayPitch
  result.depthPitch = depthPitch

proc mkVkImageViewCreateInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO,
  pNext: pointer = nil,
  flags: VkImageViewCreateFlags = 0.VkImageViewCreateFlags,
  image: VkImage ,
  viewType: VkImageViewType ,
  format: VkFormat ,
  components: VkComponentMapping ,
  subresourceRange: VkImageSubresourceRange ,
  ) : VkImageViewCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.image = image
  result.viewType = viewType
  result.format = format
  result.components = components
  result.subresourceRange = subresourceRange

proc mkVkBufferCopy*(
  srcOffset: VkDeviceSize ,
  dstOffset: VkDeviceSize ,
  size: VkDeviceSize ,
  ) : VkBufferCopy =
  result.srcOffset = srcOffset
  result.dstOffset = dstOffset
  result.size = size

proc mkVkSparseMemoryBind*(
  resourceOffset: VkDeviceSize ,
  size: VkDeviceSize ,
  memory: VkDeviceMemory = nil,
  memoryOffset: VkDeviceSize ,
  flags: VkSparseMemoryBindFlags = 0.VkSparseMemoryBindFlags,
  ) : VkSparseMemoryBind =
  result.resourceOffset = resourceOffset
  result.size = size
  result.memory = memory
  result.memoryOffset = memoryOffset
  result.flags = flags

proc mkVkSparseImageMemoryBind*(
  subresource: VkImageSubresource ,
  offset: VkOffset3D ,
  extent: VkExtent3D ,
  memory: VkDeviceMemory = nil,
  memoryOffset: VkDeviceSize ,
  flags: VkSparseMemoryBindFlags = 0.VkSparseMemoryBindFlags,
  ) : VkSparseImageMemoryBind =
  result.subresource = subresource
  result.offset = offset
  result.extent = extent
  result.memory = memory
  result.memoryOffset = memoryOffset
  result.flags = flags

proc mkVkSparseBufferMemoryBindInfo*(
  buffer: VkBuffer ,
  bindCount: uint32 ,
  pBinds: ptr VkSparseMemoryBind ,
  ) : VkSparseBufferMemoryBindInfo =
  result.buffer = buffer
  result.bindCount = bindCount
  result.pBinds = pBinds

proc mkVkSparseImageOpaqueMemoryBindInfo*(
  image: VkImage ,
  bindCount: uint32 ,
  pBinds: ptr VkSparseMemoryBind ,
  ) : VkSparseImageOpaqueMemoryBindInfo =
  result.image = image
  result.bindCount = bindCount
  result.pBinds = pBinds

proc mkVkSparseImageMemoryBindInfo*(
  image: VkImage ,
  bindCount: uint32 ,
  pBinds: ptr VkSparseImageMemoryBind ,
  ) : VkSparseImageMemoryBindInfo =
  result.image = image
  result.bindCount = bindCount
  result.pBinds = pBinds

proc mkVkBindSparseInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_BIND_SPARSE_INFO,
  pNext: pointer = nil,
  waitSemaphoreCount: uint32 = 0.uint32,
  pWaitSemaphores: ptr VkSemaphore ,
  bufferBindCount: uint32 = 0.uint32,
  pBufferBinds: ptr VkSparseBufferMemoryBindInfo ,
  imageOpaqueBindCount: uint32 = 0.uint32,
  pImageOpaqueBinds: ptr VkSparseImageOpaqueMemoryBindInfo ,
  imageBindCount: uint32 = 0.uint32,
  pImageBinds: ptr VkSparseImageMemoryBindInfo ,
  signalSemaphoreCount: uint32 = 0.uint32,
  pSignalSemaphores: ptr VkSemaphore ,
  ) : VkBindSparseInfo =
  result.sType = sType
  result.pNext = pNext
  result.waitSemaphoreCount = waitSemaphoreCount
  result.pWaitSemaphores = pWaitSemaphores
  result.bufferBindCount = bufferBindCount
  result.pBufferBinds = pBufferBinds
  result.imageOpaqueBindCount = imageOpaqueBindCount
  result.pImageOpaqueBinds = pImageOpaqueBinds
  result.imageBindCount = imageBindCount
  result.pImageBinds = pImageBinds
  result.signalSemaphoreCount = signalSemaphoreCount
  result.pSignalSemaphores = pSignalSemaphores

proc mkVkImageCopy*(
  srcSubresource: VkImageSubresourceLayers ,
  srcOffset: VkOffset3D ,
  dstSubresource: VkImageSubresourceLayers ,
  dstOffset: VkOffset3D ,
  extent: VkExtent3D ,
  ) : VkImageCopy =
  result.srcSubresource = srcSubresource
  result.srcOffset = srcOffset
  result.dstSubresource = dstSubresource
  result.dstOffset = dstOffset
  result.extent = extent

proc mkVkImageBlit*(
  srcSubresource: VkImageSubresourceLayers ,
  srcOffsets: array[2,VkOffset3D] ,
  dstSubresource: VkImageSubresourceLayers ,
  dstOffsets: array[2,VkOffset3D] ,
  ) : VkImageBlit =
  result.srcSubresource = srcSubresource
  result.srcOffsets = srcOffsets
  result.dstSubresource = dstSubresource
  result.dstOffsets = dstOffsets

proc mkVkBufferImageCopy*(
  bufferOffset: VkDeviceSize ,
  bufferRowLength: uint32 ,
  bufferImageHeight: uint32 ,
  imageSubresource: VkImageSubresourceLayers ,
  imageOffset: VkOffset3D ,
  imageExtent: VkExtent3D ,
  ) : VkBufferImageCopy =
  result.bufferOffset = bufferOffset
  result.bufferRowLength = bufferRowLength
  result.bufferImageHeight = bufferImageHeight
  result.imageSubresource = imageSubresource
  result.imageOffset = imageOffset
  result.imageExtent = imageExtent

proc mkVkImageResolve*(
  srcSubresource: VkImageSubresourceLayers ,
  srcOffset: VkOffset3D ,
  dstSubresource: VkImageSubresourceLayers ,
  dstOffset: VkOffset3D ,
  extent: VkExtent3D ,
  ) : VkImageResolve =
  result.srcSubresource = srcSubresource
  result.srcOffset = srcOffset
  result.dstSubresource = dstSubresource
  result.dstOffset = dstOffset
  result.extent = extent

proc mkVkShaderModuleCreateInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO,
  pNext: pointer = nil,
  flags: VkShaderModuleCreateFlags = 0.VkShaderModuleCreateFlags,
  codeSize: uint ,
  pCode: ptr uint32 ,
  ) : VkShaderModuleCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.codeSize = codeSize
  result.pCode = pCode

proc mkVkDescriptorSetLayoutBinding*(
  binding: uint32 ,
  descriptorType: VkDescriptorType ,
  descriptorCount: uint32 = 0.uint32,
  stageFlags: VkShaderStageFlags ,
  pImmutableSamplers: ptr VkSampler = nil,
  ) : VkDescriptorSetLayoutBinding =
  result.binding = binding
  result.descriptorType = descriptorType
  result.descriptorCount = descriptorCount
  result.stageFlags = stageFlags
  result.pImmutableSamplers = pImmutableSamplers

proc mkVkDescriptorSetLayoutCreateInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO,
  pNext: pointer = nil,
  flags: VkDescriptorSetLayoutCreateFlags = 0.VkDescriptorSetLayoutCreateFlags,
  bindingCount: uint32 = 0.uint32,
  pBindings: ptr VkDescriptorSetLayoutBinding ,
  ) : VkDescriptorSetLayoutCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.bindingCount = bindingCount
  result.pBindings = pBindings

proc mkVkDescriptorPoolCreateInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO,
  pNext: pointer = nil,
  flags: VkDescriptorPoolCreateFlags = 0.VkDescriptorPoolCreateFlags,
  maxSets: uint32 ,
  poolSizeCount: uint32 ,
  pPoolSizes: ptr VkDescriptorPoolSize ,
  ) : VkDescriptorPoolCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.maxSets = maxSets
  result.poolSizeCount = poolSizeCount
  result.pPoolSizes = pPoolSizes

proc mkVkPipelineShaderStageCreateInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO,
  pNext: pointer = nil,
  flags: VkPipelineShaderStageCreateFlags = 0.VkPipelineShaderStageCreateFlags,
  stage: VkShaderStageFlagBits ,
  module: VkShaderModule ,
  pName: cstring ,
  pSpecializationInfo: ptr VkSpecializationInfo = nil,
  ) : VkPipelineShaderStageCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.stage = stage
  result.module = module
  result.pName = pName
  result.pSpecializationInfo = pSpecializationInfo

proc mkVkComputePipelineCreateInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO,
  pNext: pointer = nil,
  flags: VkPipelineCreateFlags = 0.VkPipelineCreateFlags,
  stage: VkPipelineShaderStageCreateInfo ,
  layout: VkPipelineLayout ,
  basePipelineHandle: VkPipeline = nil,
  basePipelineIndex: int32 ,
  ) : VkComputePipelineCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.stage = stage
  result.layout = layout
  result.basePipelineHandle = basePipelineHandle
  result.basePipelineIndex = basePipelineIndex

proc mkVkPipelineVertexInputStateCreateInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO,
  pNext: pointer = nil,
  flags: VkPipelineVertexInputStateCreateFlags = 0.VkPipelineVertexInputStateCreateFlags,
  vertexBindingDescriptionCount: uint32 = 0.uint32,
  pVertexBindingDescriptions: ptr VkVertexInputBindingDescription ,
  vertexAttributeDescriptionCount: uint32 = 0.uint32,
  pVertexAttributeDescriptions: ptr VkVertexInputAttributeDescription ,
  ) : VkPipelineVertexInputStateCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.vertexBindingDescriptionCount = vertexBindingDescriptionCount
  result.pVertexBindingDescriptions = pVertexBindingDescriptions
  result.vertexAttributeDescriptionCount = vertexAttributeDescriptionCount
  result.pVertexAttributeDescriptions = pVertexAttributeDescriptions

proc mkVkPipelineInputAssemblyStateCreateInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO,
  pNext: pointer = nil,
  flags: VkPipelineInputAssemblyStateCreateFlags = 0.VkPipelineInputAssemblyStateCreateFlags,
  topology: VkPrimitiveTopology ,
  primitiveRestartEnable: VkBool32 ,
  ) : VkPipelineInputAssemblyStateCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.topology = topology
  result.primitiveRestartEnable = primitiveRestartEnable

proc mkVkPipelineTessellationStateCreateInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO,
  pNext: pointer = nil,
  flags: VkPipelineTessellationStateCreateFlags = 0.VkPipelineTessellationStateCreateFlags,
  patchControlPoints: uint32 ,
  ) : VkPipelineTessellationStateCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.patchControlPoints = patchControlPoints

proc mkVkPipelineViewportStateCreateInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO,
  pNext: pointer = nil,
  flags: VkPipelineViewportStateCreateFlags = 0.VkPipelineViewportStateCreateFlags,
  viewportCount: uint32 = 0.uint32,
  pViewports: ptr VkViewport = nil,
  scissorCount: uint32 = 0.uint32,
  pScissors: ptr VkRect2D = nil,
  ) : VkPipelineViewportStateCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.viewportCount = viewportCount
  result.pViewports = pViewports
  result.scissorCount = scissorCount
  result.pScissors = pScissors

proc mkVkPipelineRasterizationStateCreateInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO,
  pNext: pointer = nil,
  flags: VkPipelineRasterizationStateCreateFlags = 0.VkPipelineRasterizationStateCreateFlags,
  depthClampEnable: VkBool32 ,
  rasterizerDiscardEnable: VkBool32 ,
  polygonMode: VkPolygonMode ,
  cullMode: VkCullModeFlags = 0.VkCullModeFlags,
  frontFace: VkFrontFace ,
  depthBiasEnable: VkBool32 ,
  depthBiasConstantFactor: float32 ,
  depthBiasClamp: float32 ,
  depthBiasSlopeFactor: float32 ,
  lineWidth: float32 ,
  ) : VkPipelineRasterizationStateCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.depthClampEnable = depthClampEnable
  result.rasterizerDiscardEnable = rasterizerDiscardEnable
  result.polygonMode = polygonMode
  result.cullMode = cullMode
  result.frontFace = frontFace
  result.depthBiasEnable = depthBiasEnable
  result.depthBiasConstantFactor = depthBiasConstantFactor
  result.depthBiasClamp = depthBiasClamp
  result.depthBiasSlopeFactor = depthBiasSlopeFactor
  result.lineWidth = lineWidth

proc mkVkPipelineMultisampleStateCreateInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO,
  pNext: pointer = nil,
  flags: VkPipelineMultisampleStateCreateFlags = 0.VkPipelineMultisampleStateCreateFlags,
  rasterizationSamples: VkSampleCountFlagBits ,
  sampleShadingEnable: VkBool32 ,
  minSampleShading: float32 ,
  pSampleMask: ptr VkSampleMask = nil,
  alphaToCoverageEnable: VkBool32 ,
  alphaToOneEnable: VkBool32 ,
  ) : VkPipelineMultisampleStateCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.rasterizationSamples = rasterizationSamples
  result.sampleShadingEnable = sampleShadingEnable
  result.minSampleShading = minSampleShading
  result.pSampleMask = pSampleMask
  result.alphaToCoverageEnable = alphaToCoverageEnable
  result.alphaToOneEnable = alphaToOneEnable

proc mkVkPipelineColorBlendAttachmentState*(
  blendEnable: VkBool32 ,
  srcColorBlendFactor: VkBlendFactor ,
  dstColorBlendFactor: VkBlendFactor ,
  colorBlendOp: VkBlendOp ,
  srcAlphaBlendFactor: VkBlendFactor ,
  dstAlphaBlendFactor: VkBlendFactor ,
  alphaBlendOp: VkBlendOp ,
  colorWriteMask: VkColorComponentFlags = 0.VkColorComponentFlags,
  ) : VkPipelineColorBlendAttachmentState =
  result.blendEnable = blendEnable
  result.srcColorBlendFactor = srcColorBlendFactor
  result.dstColorBlendFactor = dstColorBlendFactor
  result.colorBlendOp = colorBlendOp
  result.srcAlphaBlendFactor = srcAlphaBlendFactor
  result.dstAlphaBlendFactor = dstAlphaBlendFactor
  result.alphaBlendOp = alphaBlendOp
  result.colorWriteMask = colorWriteMask

proc mkVkPipelineColorBlendStateCreateInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO,
  pNext: pointer = nil,
  flags: VkPipelineColorBlendStateCreateFlags = 0.VkPipelineColorBlendStateCreateFlags,
  logicOpEnable: VkBool32 ,
  logicOp: VkLogicOp ,
  attachmentCount: uint32 = 0.uint32,
  pAttachments: ptr VkPipelineColorBlendAttachmentState ,
  blendConstants: array[4,float32] ,
  ) : VkPipelineColorBlendStateCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.logicOpEnable = logicOpEnable
  result.logicOp = logicOp
  result.attachmentCount = attachmentCount
  result.pAttachments = pAttachments
  result.blendConstants = blendConstants

proc mkVkPipelineDynamicStateCreateInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO,
  pNext: pointer = nil,
  flags: VkPipelineDynamicStateCreateFlags = 0.VkPipelineDynamicStateCreateFlags,
  dynamicStateCount: uint32 = 0.uint32,
  pDynamicStates: ptr VkDynamicState ,
  ) : VkPipelineDynamicStateCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.dynamicStateCount = dynamicStateCount
  result.pDynamicStates = pDynamicStates

proc mkVkPipelineDepthStencilStateCreateInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO,
  pNext: pointer = nil,
  flags: VkPipelineDepthStencilStateCreateFlags = 0.VkPipelineDepthStencilStateCreateFlags,
  depthTestEnable: VkBool32 ,
  depthWriteEnable: VkBool32 ,
  depthCompareOp: VkCompareOp ,
  depthBoundsTestEnable: VkBool32 ,
  stencilTestEnable: VkBool32 ,
  front: VkStencilOpState ,
  back: VkStencilOpState ,
  minDepthBounds: float32 ,
  maxDepthBounds: float32 ,
  ) : VkPipelineDepthStencilStateCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.depthTestEnable = depthTestEnable
  result.depthWriteEnable = depthWriteEnable
  result.depthCompareOp = depthCompareOp
  result.depthBoundsTestEnable = depthBoundsTestEnable
  result.stencilTestEnable = stencilTestEnable
  result.front = front
  result.back = back
  result.minDepthBounds = minDepthBounds
  result.maxDepthBounds = maxDepthBounds

proc mkVkGraphicsPipelineCreateInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO,
  pNext: pointer = nil,
  flags: VkPipelineCreateFlags = 0.VkPipelineCreateFlags,
  stageCount: uint32 ,
  pStages: ptr VkPipelineShaderStageCreateInfo ,
  pVertexInputState: ptr VkPipelineVertexInputStateCreateInfo = nil,
  pInputAssemblyState: ptr VkPipelineInputAssemblyStateCreateInfo = nil,
  pTessellationState: ptr VkPipelineTessellationStateCreateInfo = nil,
  pViewportState: ptr VkPipelineViewportStateCreateInfo = nil,
  pRasterizationState: ptr VkPipelineRasterizationStateCreateInfo ,
  pMultisampleState: ptr VkPipelineMultisampleStateCreateInfo = nil,
  pDepthStencilState: ptr VkPipelineDepthStencilStateCreateInfo = nil,
  pColorBlendState: ptr VkPipelineColorBlendStateCreateInfo = nil,
  pDynamicState: ptr VkPipelineDynamicStateCreateInfo = nil,
  layout: VkPipelineLayout ,
  renderPass: VkRenderPass ,
  subpass: uint32 ,
  basePipelineHandle: VkPipeline = nil,
  basePipelineIndex: int32 ,
  ) : VkGraphicsPipelineCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.stageCount = stageCount
  result.pStages = pStages
  result.pVertexInputState = pVertexInputState
  result.pInputAssemblyState = pInputAssemblyState
  result.pTessellationState = pTessellationState
  result.pViewportState = pViewportState
  result.pRasterizationState = pRasterizationState
  result.pMultisampleState = pMultisampleState
  result.pDepthStencilState = pDepthStencilState
  result.pColorBlendState = pColorBlendState
  result.pDynamicState = pDynamicState
  result.layout = layout
  result.renderPass = renderPass
  result.subpass = subpass
  result.basePipelineHandle = basePipelineHandle
  result.basePipelineIndex = basePipelineIndex

proc mkVkPipelineCacheCreateInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO,
  pNext: pointer = nil,
  flags: VkPipelineCacheCreateFlags = 0.VkPipelineCacheCreateFlags,
  initialDataSize: uint = 0.uint,
  pInitialData: pointer ,
  ) : VkPipelineCacheCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.initialDataSize = initialDataSize
  result.pInitialData = pInitialData

proc mkVkPushConstantRange*(
  stageFlags: VkShaderStageFlags ,
  offset: uint32 ,
  size: uint32 ,
  ) : VkPushConstantRange =
  result.stageFlags = stageFlags
  result.offset = offset
  result.size = size

proc mkVkPipelineLayoutCreateInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO,
  pNext: pointer = nil,
  flags: VkPipelineLayoutCreateFlags = 0.VkPipelineLayoutCreateFlags,
  setLayoutCount: uint32 = 0.uint32,
  pSetLayouts: ptr VkDescriptorSetLayout ,
  pushConstantRangeCount: uint32 = 0.uint32,
  pPushConstantRanges: ptr VkPushConstantRange ,
  ) : VkPipelineLayoutCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.setLayoutCount = setLayoutCount
  result.pSetLayouts = pSetLayouts
  result.pushConstantRangeCount = pushConstantRangeCount
  result.pPushConstantRanges = pPushConstantRanges

proc mkVkSamplerCreateInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO,
  pNext: pointer = nil,
  flags: VkSamplerCreateFlags = 0.VkSamplerCreateFlags,
  magFilter: VkFilter ,
  minFilter: VkFilter ,
  mipmapMode: VkSamplerMipmapMode ,
  addressModeU: VkSamplerAddressMode ,
  addressModeV: VkSamplerAddressMode ,
  addressModeW: VkSamplerAddressMode ,
  mipLodBias: float32 ,
  anisotropyEnable: VkBool32 ,
  maxAnisotropy: float32 ,
  compareEnable: VkBool32 ,
  compareOp: VkCompareOp ,
  minLod: float32 ,
  maxLod: float32 ,
  borderColor: VkBorderColor ,
  unnormalizedCoordinates: VkBool32 ,
  ) : VkSamplerCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.magFilter = magFilter
  result.minFilter = minFilter
  result.mipmapMode = mipmapMode
  result.addressModeU = addressModeU
  result.addressModeV = addressModeV
  result.addressModeW = addressModeW
  result.mipLodBias = mipLodBias
  result.anisotropyEnable = anisotropyEnable
  result.maxAnisotropy = maxAnisotropy
  result.compareEnable = compareEnable
  result.compareOp = compareOp
  result.minLod = minLod
  result.maxLod = maxLod
  result.borderColor = borderColor
  result.unnormalizedCoordinates = unnormalizedCoordinates

proc mkVkCommandPoolCreateInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO,
  pNext: pointer = nil,
  flags: VkCommandPoolCreateFlags = 0.VkCommandPoolCreateFlags,
  queueFamilyIndex: uint32 ,
  ) : VkCommandPoolCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.queueFamilyIndex = queueFamilyIndex

proc mkVkCommandBufferInheritanceInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO,
  pNext: pointer = nil,
  renderPass: VkRenderPass = nil,
  subpass: uint32 ,
  framebuffer: VkFramebuffer = nil,
  occlusionQueryEnable: VkBool32 ,
  queryFlags: VkQueryControlFlags = 0.VkQueryControlFlags,
  pipelineStatistics: VkQueryPipelineStatisticFlags = 0.VkQueryPipelineStatisticFlags,
  ) : VkCommandBufferInheritanceInfo =
  result.sType = sType
  result.pNext = pNext
  result.renderPass = renderPass
  result.subpass = subpass
  result.framebuffer = framebuffer
  result.occlusionQueryEnable = occlusionQueryEnable
  result.queryFlags = queryFlags
  result.pipelineStatistics = pipelineStatistics

proc mkVkCommandBufferBeginInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO,
  pNext: pointer = nil,
  flags: VkCommandBufferUsageFlags = 0.VkCommandBufferUsageFlags,
  pInheritanceInfo: ptr VkCommandBufferInheritanceInfo = nil,
  ) : VkCommandBufferBeginInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.pInheritanceInfo = pInheritanceInfo

proc mkVkRenderPassBeginInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO,
  pNext: pointer = nil,
  renderPass: VkRenderPass ,
  framebuffer: VkFramebuffer ,
  renderArea: VkRect2D ,
  clearValueCount: uint32 = 0.uint32,
  pClearValues: ptr VkClearValue ,
  ) : VkRenderPassBeginInfo =
  result.sType = sType
  result.pNext = pNext
  result.renderPass = renderPass
  result.framebuffer = framebuffer
  result.renderArea = renderArea
  result.clearValueCount = clearValueCount
  result.pClearValues = pClearValues

proc mkVkClearAttachment*(
  aspectMask: VkImageAspectFlags ,
  colorAttachment: uint32 ,
  clearValue: VkClearValue ,
  ) : VkClearAttachment =
  result.aspectMask = aspectMask
  result.colorAttachment = colorAttachment
  result.clearValue = clearValue

proc mkVkAttachmentDescription*(
  flags: VkAttachmentDescriptionFlags = 0.VkAttachmentDescriptionFlags,
  format: VkFormat ,
  samples: VkSampleCountFlagBits ,
  loadOp: VkAttachmentLoadOp ,
  storeOp: VkAttachmentStoreOp ,
  stencilLoadOp: VkAttachmentLoadOp ,
  stencilStoreOp: VkAttachmentStoreOp ,
  initialLayout: VkImageLayout ,
  finalLayout: VkImageLayout ,
  ) : VkAttachmentDescription =
  result.flags = flags
  result.format = format
  result.samples = samples
  result.loadOp = loadOp
  result.storeOp = storeOp
  result.stencilLoadOp = stencilLoadOp
  result.stencilStoreOp = stencilStoreOp
  result.initialLayout = initialLayout
  result.finalLayout = finalLayout

proc mkVkSubpassDescription*(
  flags: VkSubpassDescriptionFlags = 0.VkSubpassDescriptionFlags,
  pipelineBindPoint: VkPipelineBindPoint ,
  inputAttachmentCount: uint32 = 0.uint32,
  pInputAttachments: ptr VkAttachmentReference ,
  colorAttachmentCount: uint32 = 0.uint32,
  pColorAttachments: ptr VkAttachmentReference ,
  pResolveAttachments: ptr VkAttachmentReference = nil,
  pDepthStencilAttachment: ptr VkAttachmentReference = nil,
  preserveAttachmentCount: uint32 = 0.uint32,
  pPreserveAttachments: ptr uint32 ,
  ) : VkSubpassDescription =
  result.flags = flags
  result.pipelineBindPoint = pipelineBindPoint
  result.inputAttachmentCount = inputAttachmentCount
  result.pInputAttachments = pInputAttachments
  result.colorAttachmentCount = colorAttachmentCount
  result.pColorAttachments = pColorAttachments
  result.pResolveAttachments = pResolveAttachments
  result.pDepthStencilAttachment = pDepthStencilAttachment
  result.preserveAttachmentCount = preserveAttachmentCount
  result.pPreserveAttachments = pPreserveAttachments

proc mkVkSubpassDependency*(
  srcSubpass: uint32 ,
  dstSubpass: uint32 ,
  srcStageMask: VkPipelineStageFlags ,
  dstStageMask: VkPipelineStageFlags ,
  srcAccessMask: VkAccessFlags = 0.VkAccessFlags,
  dstAccessMask: VkAccessFlags = 0.VkAccessFlags,
  dependencyFlags: VkDependencyFlags = 0.VkDependencyFlags,
  ) : VkSubpassDependency =
  result.srcSubpass = srcSubpass
  result.dstSubpass = dstSubpass
  result.srcStageMask = srcStageMask
  result.dstStageMask = dstStageMask
  result.srcAccessMask = srcAccessMask
  result.dstAccessMask = dstAccessMask
  result.dependencyFlags = dependencyFlags

proc mkVkRenderPassCreateInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO,
  pNext: pointer = nil,
  flags: VkRenderPassCreateFlags = 0.VkRenderPassCreateFlags,
  attachmentCount: uint32 = 0.uint32,
  pAttachments: ptr VkAttachmentDescription ,
  subpassCount: uint32 ,
  pSubpasses: ptr VkSubpassDescription ,
  dependencyCount: uint32 = 0.uint32,
  pDependencies: ptr VkSubpassDependency ,
  ) : VkRenderPassCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.attachmentCount = attachmentCount
  result.pAttachments = pAttachments
  result.subpassCount = subpassCount
  result.pSubpasses = pSubpasses
  result.dependencyCount = dependencyCount
  result.pDependencies = pDependencies

proc mkVkEventCreateInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_EVENT_CREATE_INFO,
  pNext: pointer = nil,
  flags: VkEventCreateFlags = 0.VkEventCreateFlags,
  ) : VkEventCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags

proc mkVkFenceCreateInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_FENCE_CREATE_INFO,
  pNext: pointer = nil,
  flags: VkFenceCreateFlags = 0.VkFenceCreateFlags,
  ) : VkFenceCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags

proc mkVkPhysicalDeviceFeatures*(
  robustBufferAccess: VkBool32 ,
  fullDrawIndexUint32: VkBool32 ,
  imageCubeArray: VkBool32 ,
  independentBlend: VkBool32 ,
  geometryShader: VkBool32 ,
  tessellationShader: VkBool32 ,
  sampleRateShading: VkBool32 ,
  dualSrcBlend: VkBool32 ,
  logicOp: VkBool32 ,
  multiDrawIndirect: VkBool32 ,
  drawIndirectFirstInstance: VkBool32 ,
  depthClamp: VkBool32 ,
  depthBiasClamp: VkBool32 ,
  fillModeNonSolid: VkBool32 ,
  depthBounds: VkBool32 ,
  wideLines: VkBool32 ,
  largePoints: VkBool32 ,
  alphaToOne: VkBool32 ,
  multiViewport: VkBool32 ,
  samplerAnisotropy: VkBool32 ,
  textureCompressionETC2: VkBool32 ,
  textureCompressionASTC_LDR: VkBool32 ,
  textureCompressionBC: VkBool32 ,
  occlusionQueryPrecise: VkBool32 ,
  pipelineStatisticsQuery: VkBool32 ,
  vertexPipelineStoresAndAtomics: VkBool32 ,
  fragmentStoresAndAtomics: VkBool32 ,
  shaderTessellationAndGeometryPointSize: VkBool32 ,
  shaderImageGatherExtended: VkBool32 ,
  shaderStorageImageExtendedFormats: VkBool32 ,
  shaderStorageImageMultisample: VkBool32 ,
  shaderStorageImageReadWithoutFormat: VkBool32 ,
  shaderStorageImageWriteWithoutFormat: VkBool32 ,
  shaderUniformBufferArrayDynamicIndexing: VkBool32 ,
  shaderSampledImageArrayDynamicIndexing: VkBool32 ,
  shaderStorageBufferArrayDynamicIndexing: VkBool32 ,
  shaderStorageImageArrayDynamicIndexing: VkBool32 ,
  shaderClipDistance: VkBool32 ,
  shaderCullDistance: VkBool32 ,
  shaderFloat64: VkBool32 ,
  shaderInt64: VkBool32 ,
  shaderInt16: VkBool32 ,
  shaderResourceResidency: VkBool32 ,
  shaderResourceMinLod: VkBool32 ,
  sparseBinding: VkBool32 ,
  sparseResidencyBuffer: VkBool32 ,
  sparseResidencyImage2D: VkBool32 ,
  sparseResidencyImage3D: VkBool32 ,
  sparseResidency2Samples: VkBool32 ,
  sparseResidency4Samples: VkBool32 ,
  sparseResidency8Samples: VkBool32 ,
  sparseResidency16Samples: VkBool32 ,
  sparseResidencyAliased: VkBool32 ,
  variableMultisampleRate: VkBool32 ,
  inheritedQueries: VkBool32 ,
  ) : VkPhysicalDeviceFeatures =
  result.robustBufferAccess = robustBufferAccess
  result.fullDrawIndexUint32 = fullDrawIndexUint32
  result.imageCubeArray = imageCubeArray
  result.independentBlend = independentBlend
  result.geometryShader = geometryShader
  result.tessellationShader = tessellationShader
  result.sampleRateShading = sampleRateShading
  result.dualSrcBlend = dualSrcBlend
  result.logicOp = logicOp
  result.multiDrawIndirect = multiDrawIndirect
  result.drawIndirectFirstInstance = drawIndirectFirstInstance
  result.depthClamp = depthClamp
  result.depthBiasClamp = depthBiasClamp
  result.fillModeNonSolid = fillModeNonSolid
  result.depthBounds = depthBounds
  result.wideLines = wideLines
  result.largePoints = largePoints
  result.alphaToOne = alphaToOne
  result.multiViewport = multiViewport
  result.samplerAnisotropy = samplerAnisotropy
  result.textureCompressionETC2 = textureCompressionETC2
  result.textureCompressionASTC_LDR = textureCompressionASTC_LDR
  result.textureCompressionBC = textureCompressionBC
  result.occlusionQueryPrecise = occlusionQueryPrecise
  result.pipelineStatisticsQuery = pipelineStatisticsQuery
  result.vertexPipelineStoresAndAtomics = vertexPipelineStoresAndAtomics
  result.fragmentStoresAndAtomics = fragmentStoresAndAtomics
  result.shaderTessellationAndGeometryPointSize = shaderTessellationAndGeometryPointSize
  result.shaderImageGatherExtended = shaderImageGatherExtended
  result.shaderStorageImageExtendedFormats = shaderStorageImageExtendedFormats
  result.shaderStorageImageMultisample = shaderStorageImageMultisample
  result.shaderStorageImageReadWithoutFormat = shaderStorageImageReadWithoutFormat
  result.shaderStorageImageWriteWithoutFormat = shaderStorageImageWriteWithoutFormat
  result.shaderUniformBufferArrayDynamicIndexing = shaderUniformBufferArrayDynamicIndexing
  result.shaderSampledImageArrayDynamicIndexing = shaderSampledImageArrayDynamicIndexing
  result.shaderStorageBufferArrayDynamicIndexing = shaderStorageBufferArrayDynamicIndexing
  result.shaderStorageImageArrayDynamicIndexing = shaderStorageImageArrayDynamicIndexing
  result.shaderClipDistance = shaderClipDistance
  result.shaderCullDistance = shaderCullDistance
  result.shaderFloat64 = shaderFloat64
  result.shaderInt64 = shaderInt64
  result.shaderInt16 = shaderInt16
  result.shaderResourceResidency = shaderResourceResidency
  result.shaderResourceMinLod = shaderResourceMinLod
  result.sparseBinding = sparseBinding
  result.sparseResidencyBuffer = sparseResidencyBuffer
  result.sparseResidencyImage2D = sparseResidencyImage2D
  result.sparseResidencyImage3D = sparseResidencyImage3D
  result.sparseResidency2Samples = sparseResidency2Samples
  result.sparseResidency4Samples = sparseResidency4Samples
  result.sparseResidency8Samples = sparseResidency8Samples
  result.sparseResidency16Samples = sparseResidency16Samples
  result.sparseResidencyAliased = sparseResidencyAliased
  result.variableMultisampleRate = variableMultisampleRate
  result.inheritedQueries = inheritedQueries

proc mkVkPhysicalDeviceSparseProperties*(
  residencyStandard2DBlockShape: VkBool32 ,
  residencyStandard2DMultisampleBlockShape: VkBool32 ,
  residencyStandard3DBlockShape: VkBool32 ,
  residencyAlignedMipSize: VkBool32 ,
  residencyNonResidentStrict: VkBool32 ,
  ) : VkPhysicalDeviceSparseProperties =
  result.residencyStandard2DBlockShape = residencyStandard2DBlockShape
  result.residencyStandard2DMultisampleBlockShape = residencyStandard2DMultisampleBlockShape
  result.residencyStandard3DBlockShape = residencyStandard3DBlockShape
  result.residencyAlignedMipSize = residencyAlignedMipSize
  result.residencyNonResidentStrict = residencyNonResidentStrict

proc mkVkPhysicalDeviceLimits*(
  maxImageDimension1D: uint32 ,
  maxImageDimension2D: uint32 ,
  maxImageDimension3D: uint32 ,
  maxImageDimensionCube: uint32 ,
  maxImageArrayLayers: uint32 ,
  maxTexelBufferElements: uint32 ,
  maxUniformBufferRange: uint32 ,
  maxStorageBufferRange: uint32 ,
  maxPushConstantsSize: uint32 ,
  maxMemoryAllocationCount: uint32 ,
  maxSamplerAllocationCount: uint32 ,
  bufferImageGranularity: VkDeviceSize ,
  sparseAddressSpaceSize: VkDeviceSize ,
  maxBoundDescriptorSets: uint32 ,
  maxPerStageDescriptorSamplers: uint32 ,
  maxPerStageDescriptorUniformBuffers: uint32 ,
  maxPerStageDescriptorStorageBuffers: uint32 ,
  maxPerStageDescriptorSampledImages: uint32 ,
  maxPerStageDescriptorStorageImages: uint32 ,
  maxPerStageDescriptorInputAttachments: uint32 ,
  maxPerStageResources: uint32 ,
  maxDescriptorSetSamplers: uint32 ,
  maxDescriptorSetUniformBuffers: uint32 ,
  maxDescriptorSetUniformBuffersDynamic: uint32 ,
  maxDescriptorSetStorageBuffers: uint32 ,
  maxDescriptorSetStorageBuffersDynamic: uint32 ,
  maxDescriptorSetSampledImages: uint32 ,
  maxDescriptorSetStorageImages: uint32 ,
  maxDescriptorSetInputAttachments: uint32 ,
  maxVertexInputAttributes: uint32 ,
  maxVertexInputBindings: uint32 ,
  maxVertexInputAttributeOffset: uint32 ,
  maxVertexInputBindingStride: uint32 ,
  maxVertexOutputComponents: uint32 ,
  maxTessellationGenerationLevel: uint32 ,
  maxTessellationPatchSize: uint32 ,
  maxTessellationControlPerVertexInputComponents: uint32 ,
  maxTessellationControlPerVertexOutputComponents: uint32 ,
  maxTessellationControlPerPatchOutputComponents: uint32 ,
  maxTessellationControlTotalOutputComponents: uint32 ,
  maxTessellationEvaluationInputComponents: uint32 ,
  maxTessellationEvaluationOutputComponents: uint32 ,
  maxGeometryShaderInvocations: uint32 ,
  maxGeometryInputComponents: uint32 ,
  maxGeometryOutputComponents: uint32 ,
  maxGeometryOutputVertices: uint32 ,
  maxGeometryTotalOutputComponents: uint32 ,
  maxFragmentInputComponents: uint32 ,
  maxFragmentOutputAttachments: uint32 ,
  maxFragmentDualSrcAttachments: uint32 ,
  maxFragmentCombinedOutputResources: uint32 ,
  maxComputeSharedMemorySize: uint32 ,
  maxComputeWorkGroupCount: array[3,uint32] ,
  maxComputeWorkGroupInvocations: uint32 ,
  maxComputeWorkGroupSize: array[3,uint32] ,
  subPixelPrecisionBits: uint32 ,
  subTexelPrecisionBits: uint32 ,
  mipmapPrecisionBits: uint32 ,
  maxDrawIndexedIndexValue: uint32 ,
  maxDrawIndirectCount: uint32 ,
  maxSamplerLodBias: float32 ,
  maxSamplerAnisotropy: float32 ,
  maxViewports: uint32 ,
  maxViewportDimensions: array[2,uint32] ,
  viewportBoundsRange: array[2,float32] ,
  viewportSubPixelBits: uint32 ,
  minMemoryMapAlignment: uint ,
  minTexelBufferOffsetAlignment: VkDeviceSize ,
  minUniformBufferOffsetAlignment: VkDeviceSize ,
  minStorageBufferOffsetAlignment: VkDeviceSize ,
  minTexelOffset: int32 ,
  maxTexelOffset: uint32 ,
  minTexelGatherOffset: int32 ,
  maxTexelGatherOffset: uint32 ,
  minInterpolationOffset: float32 ,
  maxInterpolationOffset: float32 ,
  subPixelInterpolationOffsetBits: uint32 ,
  maxFramebufferWidth: uint32 ,
  maxFramebufferHeight: uint32 ,
  maxFramebufferLayers: uint32 ,
  framebufferColorSampleCounts: VkSampleCountFlags = 0.VkSampleCountFlags,
  framebufferDepthSampleCounts: VkSampleCountFlags = 0.VkSampleCountFlags,
  framebufferStencilSampleCounts: VkSampleCountFlags = 0.VkSampleCountFlags,
  framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = 0.VkSampleCountFlags,
  maxColorAttachments: uint32 ,
  sampledImageColorSampleCounts: VkSampleCountFlags = 0.VkSampleCountFlags,
  sampledImageIntegerSampleCounts: VkSampleCountFlags = 0.VkSampleCountFlags,
  sampledImageDepthSampleCounts: VkSampleCountFlags = 0.VkSampleCountFlags,
  sampledImageStencilSampleCounts: VkSampleCountFlags = 0.VkSampleCountFlags,
  storageImageSampleCounts: VkSampleCountFlags = 0.VkSampleCountFlags,
  maxSampleMaskWords: uint32 ,
  timestampComputeAndGraphics: VkBool32 ,
  timestampPeriod: float32 ,
  maxClipDistances: uint32 ,
  maxCullDistances: uint32 ,
  maxCombinedClipAndCullDistances: uint32 ,
  discreteQueuePriorities: uint32 ,
  pointSizeRange: array[2,float32] ,
  lineWidthRange: array[2,float32] ,
  pointSizeGranularity: float32 ,
  lineWidthGranularity: float32 ,
  strictLines: VkBool32 ,
  standardSampleLocations: VkBool32 ,
  optimalBufferCopyOffsetAlignment: VkDeviceSize ,
  optimalBufferCopyRowPitchAlignment: VkDeviceSize ,
  nonCoherentAtomSize: VkDeviceSize ,
  ) : VkPhysicalDeviceLimits =
  result.maxImageDimension1D = maxImageDimension1D
  result.maxImageDimension2D = maxImageDimension2D
  result.maxImageDimension3D = maxImageDimension3D
  result.maxImageDimensionCube = maxImageDimensionCube
  result.maxImageArrayLayers = maxImageArrayLayers
  result.maxTexelBufferElements = maxTexelBufferElements
  result.maxUniformBufferRange = maxUniformBufferRange
  result.maxStorageBufferRange = maxStorageBufferRange
  result.maxPushConstantsSize = maxPushConstantsSize
  result.maxMemoryAllocationCount = maxMemoryAllocationCount
  result.maxSamplerAllocationCount = maxSamplerAllocationCount
  result.bufferImageGranularity = bufferImageGranularity
  result.sparseAddressSpaceSize = sparseAddressSpaceSize
  result.maxBoundDescriptorSets = maxBoundDescriptorSets
  result.maxPerStageDescriptorSamplers = maxPerStageDescriptorSamplers
  result.maxPerStageDescriptorUniformBuffers = maxPerStageDescriptorUniformBuffers
  result.maxPerStageDescriptorStorageBuffers = maxPerStageDescriptorStorageBuffers
  result.maxPerStageDescriptorSampledImages = maxPerStageDescriptorSampledImages
  result.maxPerStageDescriptorStorageImages = maxPerStageDescriptorStorageImages
  result.maxPerStageDescriptorInputAttachments = maxPerStageDescriptorInputAttachments
  result.maxPerStageResources = maxPerStageResources
  result.maxDescriptorSetSamplers = maxDescriptorSetSamplers
  result.maxDescriptorSetUniformBuffers = maxDescriptorSetUniformBuffers
  result.maxDescriptorSetUniformBuffersDynamic = maxDescriptorSetUniformBuffersDynamic
  result.maxDescriptorSetStorageBuffers = maxDescriptorSetStorageBuffers
  result.maxDescriptorSetStorageBuffersDynamic = maxDescriptorSetStorageBuffersDynamic
  result.maxDescriptorSetSampledImages = maxDescriptorSetSampledImages
  result.maxDescriptorSetStorageImages = maxDescriptorSetStorageImages
  result.maxDescriptorSetInputAttachments = maxDescriptorSetInputAttachments
  result.maxVertexInputAttributes = maxVertexInputAttributes
  result.maxVertexInputBindings = maxVertexInputBindings
  result.maxVertexInputAttributeOffset = maxVertexInputAttributeOffset
  result.maxVertexInputBindingStride = maxVertexInputBindingStride
  result.maxVertexOutputComponents = maxVertexOutputComponents
  result.maxTessellationGenerationLevel = maxTessellationGenerationLevel
  result.maxTessellationPatchSize = maxTessellationPatchSize
  result.maxTessellationControlPerVertexInputComponents = maxTessellationControlPerVertexInputComponents
  result.maxTessellationControlPerVertexOutputComponents = maxTessellationControlPerVertexOutputComponents
  result.maxTessellationControlPerPatchOutputComponents = maxTessellationControlPerPatchOutputComponents
  result.maxTessellationControlTotalOutputComponents = maxTessellationControlTotalOutputComponents
  result.maxTessellationEvaluationInputComponents = maxTessellationEvaluationInputComponents
  result.maxTessellationEvaluationOutputComponents = maxTessellationEvaluationOutputComponents
  result.maxGeometryShaderInvocations = maxGeometryShaderInvocations
  result.maxGeometryInputComponents = maxGeometryInputComponents
  result.maxGeometryOutputComponents = maxGeometryOutputComponents
  result.maxGeometryOutputVertices = maxGeometryOutputVertices
  result.maxGeometryTotalOutputComponents = maxGeometryTotalOutputComponents
  result.maxFragmentInputComponents = maxFragmentInputComponents
  result.maxFragmentOutputAttachments = maxFragmentOutputAttachments
  result.maxFragmentDualSrcAttachments = maxFragmentDualSrcAttachments
  result.maxFragmentCombinedOutputResources = maxFragmentCombinedOutputResources
  result.maxComputeSharedMemorySize = maxComputeSharedMemorySize
  result.maxComputeWorkGroupCount = maxComputeWorkGroupCount
  result.maxComputeWorkGroupInvocations = maxComputeWorkGroupInvocations
  result.maxComputeWorkGroupSize = maxComputeWorkGroupSize
  result.subPixelPrecisionBits = subPixelPrecisionBits
  result.subTexelPrecisionBits = subTexelPrecisionBits
  result.mipmapPrecisionBits = mipmapPrecisionBits
  result.maxDrawIndexedIndexValue = maxDrawIndexedIndexValue
  result.maxDrawIndirectCount = maxDrawIndirectCount
  result.maxSamplerLodBias = maxSamplerLodBias
  result.maxSamplerAnisotropy = maxSamplerAnisotropy
  result.maxViewports = maxViewports
  result.maxViewportDimensions = maxViewportDimensions
  result.viewportBoundsRange = viewportBoundsRange
  result.viewportSubPixelBits = viewportSubPixelBits
  result.minMemoryMapAlignment = minMemoryMapAlignment
  result.minTexelBufferOffsetAlignment = minTexelBufferOffsetAlignment
  result.minUniformBufferOffsetAlignment = minUniformBufferOffsetAlignment
  result.minStorageBufferOffsetAlignment = minStorageBufferOffsetAlignment
  result.minTexelOffset = minTexelOffset
  result.maxTexelOffset = maxTexelOffset
  result.minTexelGatherOffset = minTexelGatherOffset
  result.maxTexelGatherOffset = maxTexelGatherOffset
  result.minInterpolationOffset = minInterpolationOffset
  result.maxInterpolationOffset = maxInterpolationOffset
  result.subPixelInterpolationOffsetBits = subPixelInterpolationOffsetBits
  result.maxFramebufferWidth = maxFramebufferWidth
  result.maxFramebufferHeight = maxFramebufferHeight
  result.maxFramebufferLayers = maxFramebufferLayers
  result.framebufferColorSampleCounts = framebufferColorSampleCounts
  result.framebufferDepthSampleCounts = framebufferDepthSampleCounts
  result.framebufferStencilSampleCounts = framebufferStencilSampleCounts
  result.framebufferNoAttachmentsSampleCounts = framebufferNoAttachmentsSampleCounts
  result.maxColorAttachments = maxColorAttachments
  result.sampledImageColorSampleCounts = sampledImageColorSampleCounts
  result.sampledImageIntegerSampleCounts = sampledImageIntegerSampleCounts
  result.sampledImageDepthSampleCounts = sampledImageDepthSampleCounts
  result.sampledImageStencilSampleCounts = sampledImageStencilSampleCounts
  result.storageImageSampleCounts = storageImageSampleCounts
  result.maxSampleMaskWords = maxSampleMaskWords
  result.timestampComputeAndGraphics = timestampComputeAndGraphics
  result.timestampPeriod = timestampPeriod
  result.maxClipDistances = maxClipDistances
  result.maxCullDistances = maxCullDistances
  result.maxCombinedClipAndCullDistances = maxCombinedClipAndCullDistances
  result.discreteQueuePriorities = discreteQueuePriorities
  result.pointSizeRange = pointSizeRange
  result.lineWidthRange = lineWidthRange
  result.pointSizeGranularity = pointSizeGranularity
  result.lineWidthGranularity = lineWidthGranularity
  result.strictLines = strictLines
  result.standardSampleLocations = standardSampleLocations
  result.optimalBufferCopyOffsetAlignment = optimalBufferCopyOffsetAlignment
  result.optimalBufferCopyRowPitchAlignment = optimalBufferCopyRowPitchAlignment
  result.nonCoherentAtomSize = nonCoherentAtomSize

proc mkVkSemaphoreCreateInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO,
  pNext: pointer = nil,
  flags: VkSemaphoreCreateFlags = 0.VkSemaphoreCreateFlags,
  ) : VkSemaphoreCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags

proc mkVkQueryPoolCreateInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO,
  pNext: pointer = nil,
  flags: VkQueryPoolCreateFlags = 0.VkQueryPoolCreateFlags,
  queryType: VkQueryType ,
  queryCount: uint32 ,
  pipelineStatistics: VkQueryPipelineStatisticFlags = 0.VkQueryPipelineStatisticFlags,
  ) : VkQueryPoolCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.queryType = queryType
  result.queryCount = queryCount
  result.pipelineStatistics = pipelineStatistics

proc mkVkFramebufferCreateInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO,
  pNext: pointer = nil,
  flags: VkFramebufferCreateFlags = 0.VkFramebufferCreateFlags,
  renderPass: VkRenderPass ,
  attachmentCount: uint32 = 0.uint32,
  pAttachments: ptr VkImageView ,
  width: uint32 ,
  height: uint32 ,
  layers: uint32 ,
  ) : VkFramebufferCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.renderPass = renderPass
  result.attachmentCount = attachmentCount
  result.pAttachments = pAttachments
  result.width = width
  result.height = height
  result.layers = layers

proc mkVkSubmitInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_SUBMIT_INFO,
  pNext: pointer = nil,
  waitSemaphoreCount: uint32 = 0.uint32,
  pWaitSemaphores: ptr VkSemaphore ,
  pWaitDstStageMask: ptr VkPipelineStageFlags ,
  commandBufferCount: uint32 = 0.uint32,
  pCommandBuffers: ptr VkCommandBuffer ,
  signalSemaphoreCount: uint32 = 0.uint32,
  pSignalSemaphores: ptr VkSemaphore ,
  ) : VkSubmitInfo =
  result.sType = sType
  result.pNext = pNext
  result.waitSemaphoreCount = waitSemaphoreCount
  result.pWaitSemaphores = pWaitSemaphores
  result.pWaitDstStageMask = pWaitDstStageMask
  result.commandBufferCount = commandBufferCount
  result.pCommandBuffers = pCommandBuffers
  result.signalSemaphoreCount = signalSemaphoreCount
  result.pSignalSemaphores = pSignalSemaphores

proc mkVkDisplayPropertiesKHR*(
  display: VkDisplayKHR ,
  displayName: cstring ,
  physicalDimensions: VkExtent2D ,
  physicalResolution: VkExtent2D ,
  supportedTransforms: VkSurfaceTransformFlagsKHR = 0.VkSurfaceTransformFlagsKHR,
  planeReorderPossible: VkBool32 ,
  persistentContent: VkBool32 ,
  ) : VkDisplayPropertiesKHR =
  result.display = display
  result.displayName = displayName
  result.physicalDimensions = physicalDimensions
  result.physicalResolution = physicalResolution
  result.supportedTransforms = supportedTransforms
  result.planeReorderPossible = planeReorderPossible
  result.persistentContent = persistentContent

proc mkVkDisplayModeCreateInfoKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR,
  pNext: pointer = nil,
  flags: VkDisplayModeCreateFlagsKHR = 0.VkDisplayModeCreateFlagsKHR,
  parameters: VkDisplayModeParametersKHR ,
  ) : VkDisplayModeCreateInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.parameters = parameters

proc mkVkDisplayPlaneCapabilitiesKHR*(
  supportedAlpha: VkDisplayPlaneAlphaFlagsKHR = 0.VkDisplayPlaneAlphaFlagsKHR,
  minSrcPosition: VkOffset2D ,
  maxSrcPosition: VkOffset2D ,
  minSrcExtent: VkExtent2D ,
  maxSrcExtent: VkExtent2D ,
  minDstPosition: VkOffset2D ,
  maxDstPosition: VkOffset2D ,
  minDstExtent: VkExtent2D ,
  maxDstExtent: VkExtent2D ,
  ) : VkDisplayPlaneCapabilitiesKHR =
  result.supportedAlpha = supportedAlpha
  result.minSrcPosition = minSrcPosition
  result.maxSrcPosition = maxSrcPosition
  result.minSrcExtent = minSrcExtent
  result.maxSrcExtent = maxSrcExtent
  result.minDstPosition = minDstPosition
  result.maxDstPosition = maxDstPosition
  result.minDstExtent = minDstExtent
  result.maxDstExtent = maxDstExtent

proc mkVkDisplaySurfaceCreateInfoKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR,
  pNext: pointer = nil,
  flags: VkDisplaySurfaceCreateFlagsKHR = 0.VkDisplaySurfaceCreateFlagsKHR,
  displayMode: VkDisplayModeKHR ,
  planeIndex: uint32 ,
  planeStackIndex: uint32 ,
  transform: VkSurfaceTransformFlagBitsKHR ,
  globalAlpha: float32 ,
  alphaMode: VkDisplayPlaneAlphaFlagBitsKHR ,
  imageExtent: VkExtent2D ,
  ) : VkDisplaySurfaceCreateInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.displayMode = displayMode
  result.planeIndex = planeIndex
  result.planeStackIndex = planeStackIndex
  result.transform = transform
  result.globalAlpha = globalAlpha
  result.alphaMode = alphaMode
  result.imageExtent = imageExtent

proc mkVkDisplayPresentInfoKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR,
  pNext: pointer = nil,
  srcRect: VkRect2D ,
  dstRect: VkRect2D ,
  persistent: VkBool32 ,
  ) : VkDisplayPresentInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.srcRect = srcRect
  result.dstRect = dstRect
  result.persistent = persistent

proc mkVkSurfaceCapabilitiesKHR*(
  minImageCount: uint32 ,
  maxImageCount: uint32 ,
  currentExtent: VkExtent2D ,
  minImageExtent: VkExtent2D ,
  maxImageExtent: VkExtent2D ,
  maxImageArrayLayers: uint32 ,
  supportedTransforms: VkSurfaceTransformFlagsKHR = 0.VkSurfaceTransformFlagsKHR,
  currentTransform: VkSurfaceTransformFlagBitsKHR ,
  supportedCompositeAlpha: VkCompositeAlphaFlagsKHR = 0.VkCompositeAlphaFlagsKHR,
  supportedUsageFlags: VkImageUsageFlags = 0.VkImageUsageFlags,
  ) : VkSurfaceCapabilitiesKHR =
  result.minImageCount = minImageCount
  result.maxImageCount = maxImageCount
  result.currentExtent = currentExtent
  result.minImageExtent = minImageExtent
  result.maxImageExtent = maxImageExtent
  result.maxImageArrayLayers = maxImageArrayLayers
  result.supportedTransforms = supportedTransforms
  result.currentTransform = currentTransform
  result.supportedCompositeAlpha = supportedCompositeAlpha
  result.supportedUsageFlags = supportedUsageFlags

proc mkVkAndroidSurfaceCreateInfoKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR,
  pNext: pointer = nil,
  flags: VkAndroidSurfaceCreateFlagsKHR = 0.VkAndroidSurfaceCreateFlagsKHR,
  window: ptr ANativeWindow ,
  ) : VkAndroidSurfaceCreateInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.window = window

proc mkVkViSurfaceCreateInfoNN*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN,
  pNext: pointer = nil,
  flags: VkViSurfaceCreateFlagsNN = 0.VkViSurfaceCreateFlagsNN,
  window: pointer ,
  ) : VkViSurfaceCreateInfoNN =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.window = window

proc mkVkWaylandSurfaceCreateInfoKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR,
  pNext: pointer = nil,
  flags: VkWaylandSurfaceCreateFlagsKHR = 0.VkWaylandSurfaceCreateFlagsKHR,
  display: ptr wl_display ,
  surface: ptr wl_surface ,
  ) : VkWaylandSurfaceCreateInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.display = display
  result.surface = surface

proc mkVkWin32SurfaceCreateInfoKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR,
  pNext: pointer = nil,
  flags: VkWin32SurfaceCreateFlagsKHR = 0.VkWin32SurfaceCreateFlagsKHR,
  hinstance: HINSTANCE ,
  hwnd: HWND ,
  ) : VkWin32SurfaceCreateInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.hinstance = hinstance
  result.hwnd = hwnd

proc mkVkXlibSurfaceCreateInfoKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR,
  pNext: pointer = nil,
  flags: VkXlibSurfaceCreateFlagsKHR = 0.VkXlibSurfaceCreateFlagsKHR,
  dpy: ptr Display ,
  window: Window ,
  ) : VkXlibSurfaceCreateInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.dpy = dpy
  result.window = window

proc mkVkXcbSurfaceCreateInfoKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR,
  pNext: pointer = nil,
  flags: VkXcbSurfaceCreateFlagsKHR = 0.VkXcbSurfaceCreateFlagsKHR,
  connection: ptr xcb_connection_t ,
  window: xcb_window_t ,
  ) : VkXcbSurfaceCreateInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.connection = connection
  result.window = window

proc mkVkDirectFBSurfaceCreateInfoEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT,
  pNext: pointer = nil,
  flags: VkDirectFBSurfaceCreateFlagsEXT = 0.VkDirectFBSurfaceCreateFlagsEXT,
  dfb: ptr IDirectFB ,
  surface: ptr IDirectFBSurface ,
  ) : VkDirectFBSurfaceCreateInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.dfb = dfb
  result.surface = surface

proc mkVkImagePipeSurfaceCreateInfoFUCHSIA*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA,
  pNext: pointer = nil,
  flags: VkImagePipeSurfaceCreateFlagsFUCHSIA = 0.VkImagePipeSurfaceCreateFlagsFUCHSIA,
  imagePipeHandle: zx_handle_t ,
  ) : VkImagePipeSurfaceCreateInfoFUCHSIA =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.imagePipeHandle = imagePipeHandle

proc mkVkStreamDescriptorSurfaceCreateInfoGGP*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP,
  pNext: pointer = nil,
  flags: VkStreamDescriptorSurfaceCreateFlagsGGP = 0.VkStreamDescriptorSurfaceCreateFlagsGGP,
  streamDescriptor: GgpStreamDescriptor ,
  ) : VkStreamDescriptorSurfaceCreateInfoGGP =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.streamDescriptor = streamDescriptor

proc mkVkSwapchainCreateInfoKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR,
  pNext: pointer = nil,
  flags: VkSwapchainCreateFlagsKHR = 0.VkSwapchainCreateFlagsKHR,
  surface: VkSurfaceKHR ,
  minImageCount: uint32 ,
  imageFormat: VkFormat ,
  imageColorSpace: VkColorSpaceKHR ,
  imageExtent: VkExtent2D ,
  imageArrayLayers: uint32 ,
  imageUsage: VkImageUsageFlags ,
  imageSharingMode: VkSharingMode ,
  queueFamilyIndexCount: uint32 = 0.uint32,
  pQueueFamilyIndices: ptr uint32 ,
  preTransform: VkSurfaceTransformFlagBitsKHR ,
  compositeAlpha: VkCompositeAlphaFlagBitsKHR ,
  presentMode: VkPresentModeKHR ,
  clipped: VkBool32 ,
  oldSwapchain: VkSwapchainKHR = nil,
  ) : VkSwapchainCreateInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.surface = surface
  result.minImageCount = minImageCount
  result.imageFormat = imageFormat
  result.imageColorSpace = imageColorSpace
  result.imageExtent = imageExtent
  result.imageArrayLayers = imageArrayLayers
  result.imageUsage = imageUsage
  result.imageSharingMode = imageSharingMode
  result.queueFamilyIndexCount = queueFamilyIndexCount
  result.pQueueFamilyIndices = pQueueFamilyIndices
  result.preTransform = preTransform
  result.compositeAlpha = compositeAlpha
  result.presentMode = presentMode
  result.clipped = clipped
  result.oldSwapchain = oldSwapchain

proc mkVkDebugReportCallbackCreateInfoEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT,
  pNext: pointer = nil,
  flags: VkDebugReportFlagsEXT = 0.VkDebugReportFlagsEXT,
  pfnCallback: PFN_vkDebugReportCallbackEXT ,
  pUserData: pointer = nil,
  ) : VkDebugReportCallbackCreateInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.pfnCallback = pfnCallback
  result.pUserData = pUserData

proc mkVkDedicatedAllocationImageCreateInfoNV*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV,
  pNext: pointer = nil,
  dedicatedAllocation: VkBool32 ,
  ) : VkDedicatedAllocationImageCreateInfoNV =
  result.sType = sType
  result.pNext = pNext
  result.dedicatedAllocation = dedicatedAllocation

proc mkVkDedicatedAllocationBufferCreateInfoNV*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV,
  pNext: pointer = nil,
  dedicatedAllocation: VkBool32 ,
  ) : VkDedicatedAllocationBufferCreateInfoNV =
  result.sType = sType
  result.pNext = pNext
  result.dedicatedAllocation = dedicatedAllocation

proc mkVkExternalImageFormatPropertiesNV*(
  imageFormatProperties: VkImageFormatProperties ,
  externalMemoryFeatures: VkExternalMemoryFeatureFlagsNV = 0.VkExternalMemoryFeatureFlagsNV,
  exportFromImportedHandleTypes: VkExternalMemoryHandleTypeFlagsNV = 0.VkExternalMemoryHandleTypeFlagsNV,
  compatibleHandleTypes: VkExternalMemoryHandleTypeFlagsNV = 0.VkExternalMemoryHandleTypeFlagsNV,
  ) : VkExternalImageFormatPropertiesNV =
  result.imageFormatProperties = imageFormatProperties
  result.externalMemoryFeatures = externalMemoryFeatures
  result.exportFromImportedHandleTypes = exportFromImportedHandleTypes
  result.compatibleHandleTypes = compatibleHandleTypes

proc mkVkExternalMemoryImageCreateInfoNV*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV,
  pNext: pointer = nil,
  handleTypes: VkExternalMemoryHandleTypeFlagsNV = 0.VkExternalMemoryHandleTypeFlagsNV,
  ) : VkExternalMemoryImageCreateInfoNV =
  result.sType = sType
  result.pNext = pNext
  result.handleTypes = handleTypes

proc mkVkExportMemoryAllocateInfoNV*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV,
  pNext: pointer = nil,
  handleTypes: VkExternalMemoryHandleTypeFlagsNV = 0.VkExternalMemoryHandleTypeFlagsNV,
  ) : VkExportMemoryAllocateInfoNV =
  result.sType = sType
  result.pNext = pNext
  result.handleTypes = handleTypes

proc mkVkImportMemoryWin32HandleInfoNV*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV,
  pNext: pointer = nil,
  handleType: VkExternalMemoryHandleTypeFlagsNV = 0.VkExternalMemoryHandleTypeFlagsNV,
  handle: HANDLE = nil,
  ) : VkImportMemoryWin32HandleInfoNV =
  result.sType = sType
  result.pNext = pNext
  result.handleType = handleType
  result.handle = handle

proc mkVkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV,
  pNext: pointer = nil,
  deviceGeneratedCommands: VkBool32 ,
  ) : VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV =
  result.sType = sType
  result.pNext = pNext
  result.deviceGeneratedCommands = deviceGeneratedCommands

proc mkVkPrivateDataSlotCreateInfoEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT,
  pNext: pointer = nil,
  flags: VkPrivateDataSlotCreateFlagsEXT ,
  ) : VkPrivateDataSlotCreateInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags

proc mkVkPhysicalDevicePrivateDataFeaturesEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT,
  pNext: pointer = nil,
  privateData: VkBool32 ,
  ) : VkPhysicalDevicePrivateDataFeaturesEXT =
  result.sType = sType
  result.pNext = pNext
  result.privateData = privateData

proc mkVkGraphicsShaderGroupCreateInfoNV*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV,
  pNext: pointer = nil,
  stageCount: uint32 ,
  pStages: ptr VkPipelineShaderStageCreateInfo ,
  pVertexInputState: ptr VkPipelineVertexInputStateCreateInfo = nil,
  pTessellationState: ptr VkPipelineTessellationStateCreateInfo = nil,
  ) : VkGraphicsShaderGroupCreateInfoNV =
  result.sType = sType
  result.pNext = pNext
  result.stageCount = stageCount
  result.pStages = pStages
  result.pVertexInputState = pVertexInputState
  result.pTessellationState = pTessellationState

proc mkVkGraphicsPipelineShaderGroupsCreateInfoNV*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV,
  pNext: pointer = nil,
  groupCount: uint32 ,
  pGroups: ptr VkGraphicsShaderGroupCreateInfoNV ,
  pipelineCount: uint32 = 0.uint32,
  pPipelines: ptr VkPipeline ,
  ) : VkGraphicsPipelineShaderGroupsCreateInfoNV =
  result.sType = sType
  result.pNext = pNext
  result.groupCount = groupCount
  result.pGroups = pGroups
  result.pipelineCount = pipelineCount
  result.pPipelines = pPipelines

proc mkVkBindIndexBufferIndirectCommandNV*(
  bufferAddress: VkDeviceAddress ,
  size: uint32 ,
  indexType: VkIndexType ,
  ) : VkBindIndexBufferIndirectCommandNV =
  result.bufferAddress = bufferAddress
  result.size = size
  result.indexType = indexType

proc mkVkBindVertexBufferIndirectCommandNV*(
  bufferAddress: VkDeviceAddress ,
  size: uint32 ,
  stride: uint32 ,
  ) : VkBindVertexBufferIndirectCommandNV =
  result.bufferAddress = bufferAddress
  result.size = size
  result.stride = stride

proc mkVkIndirectCommandsStreamNV*(
  buffer: VkBuffer ,
  offset: VkDeviceSize ,
  ) : VkIndirectCommandsStreamNV =
  result.buffer = buffer
  result.offset = offset

proc mkVkIndirectCommandsLayoutTokenNV*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV,
  pNext: pointer = nil,
  tokenType: VkIndirectCommandsTokenTypeNV ,
  stream: uint32 ,
  offset: uint32 ,
  vertexBindingUnit: uint32 ,
  vertexDynamicStride: VkBool32 ,
  pushconstantPipelineLayout: VkPipelineLayout = nil,
  pushconstantShaderStageFlags: VkShaderStageFlags = 0.VkShaderStageFlags,
  pushconstantOffset: uint32 ,
  pushconstantSize: uint32 ,
  indirectStateFlags: VkIndirectStateFlagsNV = 0.VkIndirectStateFlagsNV,
  indexTypeCount: uint32 = 0.uint32,
  pIndexTypes: ptr VkIndexType ,
  pIndexTypeValues: ptr uint32 ,
  ) : VkIndirectCommandsLayoutTokenNV =
  result.sType = sType
  result.pNext = pNext
  result.tokenType = tokenType
  result.stream = stream
  result.offset = offset
  result.vertexBindingUnit = vertexBindingUnit
  result.vertexDynamicStride = vertexDynamicStride
  result.pushconstantPipelineLayout = pushconstantPipelineLayout
  result.pushconstantShaderStageFlags = pushconstantShaderStageFlags
  result.pushconstantOffset = pushconstantOffset
  result.pushconstantSize = pushconstantSize
  result.indirectStateFlags = indirectStateFlags
  result.indexTypeCount = indexTypeCount
  result.pIndexTypes = pIndexTypes
  result.pIndexTypeValues = pIndexTypeValues

proc mkVkIndirectCommandsLayoutCreateInfoNV*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV,
  pNext: pointer = nil,
  flags: VkIndirectCommandsLayoutUsageFlagsNV ,
  pipelineBindPoint: VkPipelineBindPoint ,
  tokenCount: uint32 ,
  pTokens: ptr VkIndirectCommandsLayoutTokenNV ,
  streamCount: uint32 ,
  pStreamStrides: ptr uint32 ,
  ) : VkIndirectCommandsLayoutCreateInfoNV =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.pipelineBindPoint = pipelineBindPoint
  result.tokenCount = tokenCount
  result.pTokens = pTokens
  result.streamCount = streamCount
  result.pStreamStrides = pStreamStrides

proc mkVkGeneratedCommandsInfoNV*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV,
  pNext: pointer = nil,
  pipelineBindPoint: VkPipelineBindPoint ,
  pipeline: VkPipeline ,
  indirectCommandsLayout: VkIndirectCommandsLayoutNV ,
  streamCount: uint32 ,
  pStreams: ptr VkIndirectCommandsStreamNV ,
  sequencesCount: uint32 ,
  preprocessBuffer: VkBuffer ,
  preprocessOffset: VkDeviceSize ,
  preprocessSize: VkDeviceSize ,
  sequencesCountBuffer: VkBuffer = nil,
  sequencesCountOffset: VkDeviceSize = 0.VkDeviceSize,
  sequencesIndexBuffer: VkBuffer = nil,
  sequencesIndexOffset: VkDeviceSize = 0.VkDeviceSize,
  ) : VkGeneratedCommandsInfoNV =
  result.sType = sType
  result.pNext = pNext
  result.pipelineBindPoint = pipelineBindPoint
  result.pipeline = pipeline
  result.indirectCommandsLayout = indirectCommandsLayout
  result.streamCount = streamCount
  result.pStreams = pStreams
  result.sequencesCount = sequencesCount
  result.preprocessBuffer = preprocessBuffer
  result.preprocessOffset = preprocessOffset
  result.preprocessSize = preprocessSize
  result.sequencesCountBuffer = sequencesCountBuffer
  result.sequencesCountOffset = sequencesCountOffset
  result.sequencesIndexBuffer = sequencesIndexBuffer
  result.sequencesIndexOffset = sequencesIndexOffset

proc mkVkPhysicalDeviceFeatures2*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2,
  pNext: pointer = nil,
  features: VkPhysicalDeviceFeatures ,
  ) : VkPhysicalDeviceFeatures2 =
  result.sType = sType
  result.pNext = pNext
  result.features = features

proc mkVkFormatProperties2*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2,
  pNext: pointer = nil,
  formatProperties: VkFormatProperties ,
  ) : VkFormatProperties2 =
  result.sType = sType
  result.pNext = pNext
  result.formatProperties = formatProperties

proc mkVkImageFormatProperties2*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2,
  pNext: pointer = nil,
  imageFormatProperties: VkImageFormatProperties ,
  ) : VkImageFormatProperties2 =
  result.sType = sType
  result.pNext = pNext
  result.imageFormatProperties = imageFormatProperties

proc mkVkPhysicalDeviceImageFormatInfo2*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2,
  pNext: pointer = nil,
  format: VkFormat ,
  `type`: VkImageType ,
  tiling: VkImageTiling ,
  usage: VkImageUsageFlags ,
  flags: VkImageCreateFlags = 0.VkImageCreateFlags,
  ) : VkPhysicalDeviceImageFormatInfo2 =
  result.sType = sType
  result.pNext = pNext
  result.format = format
  result.`type` = `type`
  result.tiling = tiling
  result.usage = usage
  result.flags = flags

proc mkVkQueueFamilyProperties2*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2,
  pNext: pointer = nil,
  queueFamilyProperties: VkQueueFamilyProperties ,
  ) : VkQueueFamilyProperties2 =
  result.sType = sType
  result.pNext = pNext
  result.queueFamilyProperties = queueFamilyProperties

proc mkVkSparseImageFormatProperties2*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2,
  pNext: pointer = nil,
  properties: VkSparseImageFormatProperties ,
  ) : VkSparseImageFormatProperties2 =
  result.sType = sType
  result.pNext = pNext
  result.properties = properties

proc mkVkPhysicalDeviceSparseImageFormatInfo2*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2,
  pNext: pointer = nil,
  format: VkFormat ,
  `type`: VkImageType ,
  samples: VkSampleCountFlagBits ,
  usage: VkImageUsageFlags ,
  tiling: VkImageTiling ,
  ) : VkPhysicalDeviceSparseImageFormatInfo2 =
  result.sType = sType
  result.pNext = pNext
  result.format = format
  result.`type` = `type`
  result.samples = samples
  result.usage = usage
  result.tiling = tiling

proc mkVkPresentRegionKHR*(
  rectangleCount: uint32 = 0.uint32,
  pRectangles: ptr VkRectLayerKHR = nil,
  ) : VkPresentRegionKHR =
  result.rectangleCount = rectangleCount
  result.pRectangles = pRectangles

proc mkVkPhysicalDeviceVariablePointersFeatures*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES,
  pNext: pointer = nil,
  variablePointersStorageBuffer: VkBool32 ,
  variablePointers: VkBool32 ,
  ) : VkPhysicalDeviceVariablePointersFeatures =
  result.sType = sType
  result.pNext = pNext
  result.variablePointersStorageBuffer = variablePointersStorageBuffer
  result.variablePointers = variablePointers

proc mkVkExternalMemoryProperties*(
  externalMemoryFeatures: VkExternalMemoryFeatureFlags ,
  exportFromImportedHandleTypes: VkExternalMemoryHandleTypeFlags = 0.VkExternalMemoryHandleTypeFlags,
  compatibleHandleTypes: VkExternalMemoryHandleTypeFlags ,
  ) : VkExternalMemoryProperties =
  result.externalMemoryFeatures = externalMemoryFeatures
  result.exportFromImportedHandleTypes = exportFromImportedHandleTypes
  result.compatibleHandleTypes = compatibleHandleTypes

proc mkVkExternalImageFormatProperties*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES,
  pNext: pointer = nil,
  externalMemoryProperties: VkExternalMemoryProperties ,
  ) : VkExternalImageFormatProperties =
  result.sType = sType
  result.pNext = pNext
  result.externalMemoryProperties = externalMemoryProperties

proc mkVkPhysicalDeviceExternalBufferInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO,
  pNext: pointer = nil,
  flags: VkBufferCreateFlags = 0.VkBufferCreateFlags,
  usage: VkBufferUsageFlags ,
  handleType: VkExternalMemoryHandleTypeFlagBits ,
  ) : VkPhysicalDeviceExternalBufferInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.usage = usage
  result.handleType = handleType

proc mkVkExternalBufferProperties*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES,
  pNext: pointer = nil,
  externalMemoryProperties: VkExternalMemoryProperties ,
  ) : VkExternalBufferProperties =
  result.sType = sType
  result.pNext = pNext
  result.externalMemoryProperties = externalMemoryProperties

proc mkVkPhysicalDeviceIDProperties*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES,
  pNext: pointer = nil,
  deviceUUID: array[VK_UUID_SIZE,uint8] ,
  driverUUID: array[VK_UUID_SIZE,uint8] ,
  deviceLUID: array[VK_LUID_SIZE,uint8] ,
  deviceNodeMask: uint32 ,
  deviceLUIDValid: VkBool32 ,
  ) : VkPhysicalDeviceIDProperties =
  result.sType = sType
  result.pNext = pNext
  result.deviceUUID = deviceUUID
  result.driverUUID = driverUUID
  result.deviceLUID = deviceLUID
  result.deviceNodeMask = deviceNodeMask
  result.deviceLUIDValid = deviceLUIDValid

proc mkVkExternalMemoryImageCreateInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO,
  pNext: pointer = nil,
  handleTypes: VkExternalMemoryHandleTypeFlags ,
  ) : VkExternalMemoryImageCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.handleTypes = handleTypes

proc mkVkExternalMemoryBufferCreateInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO,
  pNext: pointer = nil,
  handleTypes: VkExternalMemoryHandleTypeFlags = 0.VkExternalMemoryHandleTypeFlags,
  ) : VkExternalMemoryBufferCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.handleTypes = handleTypes

proc mkVkExportMemoryAllocateInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO,
  pNext: pointer = nil,
  handleTypes: VkExternalMemoryHandleTypeFlags = 0.VkExternalMemoryHandleTypeFlags,
  ) : VkExportMemoryAllocateInfo =
  result.sType = sType
  result.pNext = pNext
  result.handleTypes = handleTypes

proc mkVkExternalSemaphoreProperties*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES,
  pNext: pointer = nil,
  exportFromImportedHandleTypes: VkExternalSemaphoreHandleTypeFlags ,
  compatibleHandleTypes: VkExternalSemaphoreHandleTypeFlags ,
  externalSemaphoreFeatures: VkExternalSemaphoreFeatureFlags = 0.VkExternalSemaphoreFeatureFlags,
  ) : VkExternalSemaphoreProperties =
  result.sType = sType
  result.pNext = pNext
  result.exportFromImportedHandleTypes = exportFromImportedHandleTypes
  result.compatibleHandleTypes = compatibleHandleTypes
  result.externalSemaphoreFeatures = externalSemaphoreFeatures

proc mkVkExportSemaphoreCreateInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO,
  pNext: pointer = nil,
  handleTypes: VkExternalSemaphoreHandleTypeFlags = 0.VkExternalSemaphoreHandleTypeFlags,
  ) : VkExportSemaphoreCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.handleTypes = handleTypes

proc mkVkImportSemaphoreWin32HandleInfoKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR,
  pNext: pointer = nil,
  semaphore: VkSemaphore ,
  flags: VkSemaphoreImportFlags = 0.VkSemaphoreImportFlags,
  handleType: VkExternalSemaphoreHandleTypeFlagBits = 0.VkExternalSemaphoreHandleTypeFlagBits,
  handle: HANDLE = nil,
  name: LPCWSTR = nil,
  ) : VkImportSemaphoreWin32HandleInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.semaphore = semaphore
  result.flags = flags
  result.handleType = handleType
  result.handle = handle
  result.name = name

proc mkVkImportSemaphoreFdInfoKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR,
  pNext: pointer = nil,
  semaphore: VkSemaphore ,
  flags: VkSemaphoreImportFlags = 0.VkSemaphoreImportFlags,
  handleType: VkExternalSemaphoreHandleTypeFlagBits ,
  fd: cint ,
  ) : VkImportSemaphoreFdInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.semaphore = semaphore
  result.flags = flags
  result.handleType = handleType
  result.fd = fd

proc mkVkExternalFenceProperties*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES,
  pNext: pointer = nil,
  exportFromImportedHandleTypes: VkExternalFenceHandleTypeFlags ,
  compatibleHandleTypes: VkExternalFenceHandleTypeFlags ,
  externalFenceFeatures: VkExternalFenceFeatureFlags = 0.VkExternalFenceFeatureFlags,
  ) : VkExternalFenceProperties =
  result.sType = sType
  result.pNext = pNext
  result.exportFromImportedHandleTypes = exportFromImportedHandleTypes
  result.compatibleHandleTypes = compatibleHandleTypes
  result.externalFenceFeatures = externalFenceFeatures

proc mkVkExportFenceCreateInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO,
  pNext: pointer = nil,
  handleTypes: VkExternalFenceHandleTypeFlags = 0.VkExternalFenceHandleTypeFlags,
  ) : VkExportFenceCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.handleTypes = handleTypes

proc mkVkImportFenceWin32HandleInfoKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR,
  pNext: pointer = nil,
  fence: VkFence ,
  flags: VkFenceImportFlags = 0.VkFenceImportFlags,
  handleType: VkExternalFenceHandleTypeFlagBits = 0.VkExternalFenceHandleTypeFlagBits,
  handle: HANDLE = nil,
  name: LPCWSTR = nil,
  ) : VkImportFenceWin32HandleInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.fence = fence
  result.flags = flags
  result.handleType = handleType
  result.handle = handle
  result.name = name

proc mkVkImportFenceFdInfoKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR,
  pNext: pointer = nil,
  fence: VkFence ,
  flags: VkFenceImportFlags = 0.VkFenceImportFlags,
  handleType: VkExternalFenceHandleTypeFlagBits ,
  fd: cint ,
  ) : VkImportFenceFdInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.fence = fence
  result.flags = flags
  result.handleType = handleType
  result.fd = fd

proc mkVkPhysicalDeviceMultiviewFeatures*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES,
  pNext: pointer = nil,
  multiview: VkBool32 ,
  multiviewGeometryShader: VkBool32 ,
  multiviewTessellationShader: VkBool32 ,
  ) : VkPhysicalDeviceMultiviewFeatures =
  result.sType = sType
  result.pNext = pNext
  result.multiview = multiview
  result.multiviewGeometryShader = multiviewGeometryShader
  result.multiviewTessellationShader = multiviewTessellationShader

proc mkVkSurfaceCapabilities2EXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT,
  pNext: pointer = nil,
  minImageCount: uint32 ,
  maxImageCount: uint32 ,
  currentExtent: VkExtent2D ,
  minImageExtent: VkExtent2D ,
  maxImageExtent: VkExtent2D ,
  maxImageArrayLayers: uint32 ,
  supportedTransforms: VkSurfaceTransformFlagsKHR = 0.VkSurfaceTransformFlagsKHR,
  currentTransform: VkSurfaceTransformFlagBitsKHR ,
  supportedCompositeAlpha: VkCompositeAlphaFlagsKHR = 0.VkCompositeAlphaFlagsKHR,
  supportedUsageFlags: VkImageUsageFlags = 0.VkImageUsageFlags,
  supportedSurfaceCounters: VkSurfaceCounterFlagsEXT = 0.VkSurfaceCounterFlagsEXT,
  ) : VkSurfaceCapabilities2EXT =
  result.sType = sType
  result.pNext = pNext
  result.minImageCount = minImageCount
  result.maxImageCount = maxImageCount
  result.currentExtent = currentExtent
  result.minImageExtent = minImageExtent
  result.maxImageExtent = maxImageExtent
  result.maxImageArrayLayers = maxImageArrayLayers
  result.supportedTransforms = supportedTransforms
  result.currentTransform = currentTransform
  result.supportedCompositeAlpha = supportedCompositeAlpha
  result.supportedUsageFlags = supportedUsageFlags
  result.supportedSurfaceCounters = supportedSurfaceCounters

proc mkVkSwapchainCounterCreateInfoEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT,
  pNext: pointer = nil,
  surfaceCounters: VkSurfaceCounterFlagsEXT = 0.VkSurfaceCounterFlagsEXT,
  ) : VkSwapchainCounterCreateInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.surfaceCounters = surfaceCounters

proc mkVkPhysicalDeviceGroupProperties*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES,
  pNext: pointer = nil,
  physicalDeviceCount: uint32 ,
  physicalDevices: array[VK_MAX_DEVICE_GROUP_SIZE,VkPhysicalDevice] ,
  subsetAllocation: VkBool32 ,
  ) : VkPhysicalDeviceGroupProperties =
  result.sType = sType
  result.pNext = pNext
  result.physicalDeviceCount = physicalDeviceCount
  result.physicalDevices = physicalDevices
  result.subsetAllocation = subsetAllocation

proc mkVkMemoryAllocateFlagsInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO,
  pNext: pointer = nil,
  flags: VkMemoryAllocateFlags = 0.VkMemoryAllocateFlags,
  deviceMask: uint32 ,
  ) : VkMemoryAllocateFlagsInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.deviceMask = deviceMask

proc mkVkBindBufferMemoryInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO,
  pNext: pointer = nil,
  buffer: VkBuffer ,
  memory: VkDeviceMemory ,
  memoryOffset: VkDeviceSize ,
  ) : VkBindBufferMemoryInfo =
  result.sType = sType
  result.pNext = pNext
  result.buffer = buffer
  result.memory = memory
  result.memoryOffset = memoryOffset

proc mkVkBindImageMemoryInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO,
  pNext: pointer = nil,
  image: VkImage ,
  memory: VkDeviceMemory ,
  memoryOffset: VkDeviceSize ,
  ) : VkBindImageMemoryInfo =
  result.sType = sType
  result.pNext = pNext
  result.image = image
  result.memory = memory
  result.memoryOffset = memoryOffset

proc mkVkDeviceGroupPresentCapabilitiesKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR,
  pNext: pointer = nil,
  presentMask: array[VK_MAX_DEVICE_GROUP_SIZE,uint32] ,
  modes: VkDeviceGroupPresentModeFlagsKHR ,
  ) : VkDeviceGroupPresentCapabilitiesKHR =
  result.sType = sType
  result.pNext = pNext
  result.presentMask = presentMask
  result.modes = modes

proc mkVkDeviceGroupSwapchainCreateInfoKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR,
  pNext: pointer = nil,
  modes: VkDeviceGroupPresentModeFlagsKHR ,
  ) : VkDeviceGroupSwapchainCreateInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.modes = modes

proc mkVkDescriptorUpdateTemplateCreateInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO,
  pNext: pointer = nil,
  flags: VkDescriptorUpdateTemplateCreateFlags = 0.VkDescriptorUpdateTemplateCreateFlags,
  descriptorUpdateEntryCount: uint32 ,
  pDescriptorUpdateEntries: ptr VkDescriptorUpdateTemplateEntry ,
  templateType: VkDescriptorUpdateTemplateType ,
  descriptorSetLayout: VkDescriptorSetLayout ,
  pipelineBindPoint: VkPipelineBindPoint ,
  pipelineLayout: VkPipelineLayout ,
  set: uint32 ,
  ) : VkDescriptorUpdateTemplateCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.descriptorUpdateEntryCount = descriptorUpdateEntryCount
  result.pDescriptorUpdateEntries = pDescriptorUpdateEntries
  result.templateType = templateType
  result.descriptorSetLayout = descriptorSetLayout
  result.pipelineBindPoint = pipelineBindPoint
  result.pipelineLayout = pipelineLayout
  result.set = set

proc mkVkDisplayNativeHdrSurfaceCapabilitiesAMD*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD,
  pNext: pointer = nil,
  localDimmingSupport: VkBool32 ,
  ) : VkDisplayNativeHdrSurfaceCapabilitiesAMD =
  result.sType = sType
  result.pNext = pNext
  result.localDimmingSupport = localDimmingSupport

proc mkVkSwapchainDisplayNativeHdrCreateInfoAMD*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD,
  pNext: pointer = nil,
  localDimmingEnable: VkBool32 ,
  ) : VkSwapchainDisplayNativeHdrCreateInfoAMD =
  result.sType = sType
  result.pNext = pNext
  result.localDimmingEnable = localDimmingEnable

proc mkVkPresentTimesInfoGOOGLE*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE,
  pNext: pointer = nil,
  swapchainCount: uint32 ,
  pTimes: ptr VkPresentTimeGOOGLE = nil,
  ) : VkPresentTimesInfoGOOGLE =
  result.sType = sType
  result.pNext = pNext
  result.swapchainCount = swapchainCount
  result.pTimes = pTimes

proc mkVkIOSSurfaceCreateInfoMVK*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK,
  pNext: pointer = nil,
  flags: VkIOSSurfaceCreateFlagsMVK = 0.VkIOSSurfaceCreateFlagsMVK,
  pView: pointer ,
  ) : VkIOSSurfaceCreateInfoMVK =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.pView = pView

proc mkVkMacOSSurfaceCreateInfoMVK*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK,
  pNext: pointer = nil,
  flags: VkMacOSSurfaceCreateFlagsMVK = 0.VkMacOSSurfaceCreateFlagsMVK,
  pView: pointer ,
  ) : VkMacOSSurfaceCreateInfoMVK =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.pView = pView

proc mkVkMetalSurfaceCreateInfoEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT,
  pNext: pointer = nil,
  flags: VkMetalSurfaceCreateFlagsEXT = 0.VkMetalSurfaceCreateFlagsEXT,
  pLayer: ptr CAMetalLayer ,
  ) : VkMetalSurfaceCreateInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.pLayer = pLayer

proc mkVkPipelineViewportWScalingStateCreateInfoNV*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV,
  pNext: pointer = nil,
  viewportWScalingEnable: VkBool32 ,
  viewportCount: uint32 ,
  pViewportWScalings: ptr VkViewportWScalingNV = nil,
  ) : VkPipelineViewportWScalingStateCreateInfoNV =
  result.sType = sType
  result.pNext = pNext
  result.viewportWScalingEnable = viewportWScalingEnable
  result.viewportCount = viewportCount
  result.pViewportWScalings = pViewportWScalings

proc mkVkPipelineViewportSwizzleStateCreateInfoNV*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV,
  pNext: pointer = nil,
  flags: VkPipelineViewportSwizzleStateCreateFlagsNV = 0.VkPipelineViewportSwizzleStateCreateFlagsNV,
  viewportCount: uint32 ,
  pViewportSwizzles: ptr VkViewportSwizzleNV ,
  ) : VkPipelineViewportSwizzleStateCreateInfoNV =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.viewportCount = viewportCount
  result.pViewportSwizzles = pViewportSwizzles

proc mkVkPipelineDiscardRectangleStateCreateInfoEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT,
  pNext: pointer = nil,
  flags: VkPipelineDiscardRectangleStateCreateFlagsEXT = 0.VkPipelineDiscardRectangleStateCreateFlagsEXT,
  discardRectangleMode: VkDiscardRectangleModeEXT ,
  discardRectangleCount: uint32 = 0.uint32,
  pDiscardRectangles: ptr VkRect2D ,
  ) : VkPipelineDiscardRectangleStateCreateInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.discardRectangleMode = discardRectangleMode
  result.discardRectangleCount = discardRectangleCount
  result.pDiscardRectangles = pDiscardRectangles

proc mkVkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX,
  pNext: pointer = nil,
  perViewPositionAllComponents: VkBool32 ,
  ) : VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX =
  result.sType = sType
  result.pNext = pNext
  result.perViewPositionAllComponents = perViewPositionAllComponents

proc mkVkInputAttachmentAspectReference*(
  subpass: uint32 ,
  inputAttachmentIndex: uint32 ,
  aspectMask: VkImageAspectFlags ,
  ) : VkInputAttachmentAspectReference =
  result.subpass = subpass
  result.inputAttachmentIndex = inputAttachmentIndex
  result.aspectMask = aspectMask

proc mkVkRenderPassInputAttachmentAspectCreateInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO,
  pNext: pointer = nil,
  aspectReferenceCount: uint32 ,
  pAspectReferences: ptr VkInputAttachmentAspectReference ,
  ) : VkRenderPassInputAttachmentAspectCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.aspectReferenceCount = aspectReferenceCount
  result.pAspectReferences = pAspectReferences

proc mkVkSurfaceCapabilities2KHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR,
  pNext: pointer = nil,
  surfaceCapabilities: VkSurfaceCapabilitiesKHR ,
  ) : VkSurfaceCapabilities2KHR =
  result.sType = sType
  result.pNext = pNext
  result.surfaceCapabilities = surfaceCapabilities

proc mkVkDisplayProperties2KHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR,
  pNext: pointer = nil,
  displayProperties: VkDisplayPropertiesKHR ,
  ) : VkDisplayProperties2KHR =
  result.sType = sType
  result.pNext = pNext
  result.displayProperties = displayProperties

proc mkVkDisplayPlaneCapabilities2KHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR,
  pNext: pointer = nil,
  capabilities: VkDisplayPlaneCapabilitiesKHR ,
  ) : VkDisplayPlaneCapabilities2KHR =
  result.sType = sType
  result.pNext = pNext
  result.capabilities = capabilities

proc mkVkSharedPresentSurfaceCapabilitiesKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR,
  pNext: pointer = nil,
  sharedPresentSupportedUsageFlags: VkImageUsageFlags = 0.VkImageUsageFlags,
  ) : VkSharedPresentSurfaceCapabilitiesKHR =
  result.sType = sType
  result.pNext = pNext
  result.sharedPresentSupportedUsageFlags = sharedPresentSupportedUsageFlags

proc mkVkPhysicalDevice16BitStorageFeatures*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES,
  pNext: pointer = nil,
  storageBuffer16BitAccess: VkBool32 ,
  uniformAndStorageBuffer16BitAccess: VkBool32 ,
  storagePushConstant16: VkBool32 ,
  storageInputOutput16: VkBool32 ,
  ) : VkPhysicalDevice16BitStorageFeatures =
  result.sType = sType
  result.pNext = pNext
  result.storageBuffer16BitAccess = storageBuffer16BitAccess
  result.uniformAndStorageBuffer16BitAccess = uniformAndStorageBuffer16BitAccess
  result.storagePushConstant16 = storagePushConstant16
  result.storageInputOutput16 = storageInputOutput16

proc mkVkPhysicalDeviceSubgroupProperties*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES,
  pNext: pointer = nil,
  subgroupSize: uint32 ,
  supportedStages: VkShaderStageFlags ,
  supportedOperations: VkSubgroupFeatureFlags ,
  quadOperationsInAllStages: VkBool32 ,
  ) : VkPhysicalDeviceSubgroupProperties =
  result.sType = sType
  result.pNext = pNext
  result.subgroupSize = subgroupSize
  result.supportedStages = supportedStages
  result.supportedOperations = supportedOperations
  result.quadOperationsInAllStages = quadOperationsInAllStages

proc mkVkPhysicalDeviceShaderSubgroupExtendedTypesFeatures*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES,
  pNext: pointer = nil,
  shaderSubgroupExtendedTypes: VkBool32 ,
  ) : VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures =
  result.sType = sType
  result.pNext = pNext
  result.shaderSubgroupExtendedTypes = shaderSubgroupExtendedTypes

proc mkVkMemoryRequirements2*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2,
  pNext: pointer = nil,
  memoryRequirements: VkMemoryRequirements ,
  ) : VkMemoryRequirements2 =
  result.sType = sType
  result.pNext = pNext
  result.memoryRequirements = memoryRequirements

proc mkVkSparseImageMemoryRequirements2*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2,
  pNext: pointer = nil,
  memoryRequirements: VkSparseImageMemoryRequirements ,
  ) : VkSparseImageMemoryRequirements2 =
  result.sType = sType
  result.pNext = pNext
  result.memoryRequirements = memoryRequirements

proc mkVkMemoryDedicatedRequirements*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS,
  pNext: pointer = nil,
  prefersDedicatedAllocation: VkBool32 ,
  requiresDedicatedAllocation: VkBool32 ,
  ) : VkMemoryDedicatedRequirements =
  result.sType = sType
  result.pNext = pNext
  result.prefersDedicatedAllocation = prefersDedicatedAllocation
  result.requiresDedicatedAllocation = requiresDedicatedAllocation

proc mkVkImageViewUsageCreateInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO,
  pNext: pointer = nil,
  usage: VkImageUsageFlags ,
  ) : VkImageViewUsageCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.usage = usage

proc mkVkSamplerYcbcrConversionCreateInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO,
  pNext: pointer = nil,
  format: VkFormat ,
  ycbcrModel: VkSamplerYcbcrModelConversion ,
  ycbcrRange: VkSamplerYcbcrRange ,
  components: VkComponentMapping ,
  xChromaOffset: VkChromaLocation ,
  yChromaOffset: VkChromaLocation ,
  chromaFilter: VkFilter ,
  forceExplicitReconstruction: VkBool32 ,
  ) : VkSamplerYcbcrConversionCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.format = format
  result.ycbcrModel = ycbcrModel
  result.ycbcrRange = ycbcrRange
  result.components = components
  result.xChromaOffset = xChromaOffset
  result.yChromaOffset = yChromaOffset
  result.chromaFilter = chromaFilter
  result.forceExplicitReconstruction = forceExplicitReconstruction

proc mkVkPhysicalDeviceSamplerYcbcrConversionFeatures*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES,
  pNext: pointer = nil,
  samplerYcbcrConversion: VkBool32 ,
  ) : VkPhysicalDeviceSamplerYcbcrConversionFeatures =
  result.sType = sType
  result.pNext = pNext
  result.samplerYcbcrConversion = samplerYcbcrConversion

proc mkVkTextureLODGatherFormatPropertiesAMD*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD,
  pNext: pointer = nil,
  supportsTextureGatherLODBiasAMD: VkBool32 ,
  ) : VkTextureLODGatherFormatPropertiesAMD =
  result.sType = sType
  result.pNext = pNext
  result.supportsTextureGatherLODBiasAMD = supportsTextureGatherLODBiasAMD

proc mkVkConditionalRenderingBeginInfoEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT,
  pNext: pointer = nil,
  buffer: VkBuffer ,
  offset: VkDeviceSize ,
  flags: VkConditionalRenderingFlagsEXT = 0.VkConditionalRenderingFlagsEXT,
  ) : VkConditionalRenderingBeginInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.buffer = buffer
  result.offset = offset
  result.flags = flags

proc mkVkProtectedSubmitInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO,
  pNext: pointer = nil,
  protectedSubmit: VkBool32 ,
  ) : VkProtectedSubmitInfo =
  result.sType = sType
  result.pNext = pNext
  result.protectedSubmit = protectedSubmit

proc mkVkPhysicalDeviceProtectedMemoryFeatures*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES,
  pNext: pointer = nil,
  protectedMemory: VkBool32 ,
  ) : VkPhysicalDeviceProtectedMemoryFeatures =
  result.sType = sType
  result.pNext = pNext
  result.protectedMemory = protectedMemory

proc mkVkPhysicalDeviceProtectedMemoryProperties*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES,
  pNext: pointer = nil,
  protectedNoFault: VkBool32 ,
  ) : VkPhysicalDeviceProtectedMemoryProperties =
  result.sType = sType
  result.pNext = pNext
  result.protectedNoFault = protectedNoFault

proc mkVkDeviceQueueInfo2*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2,
  pNext: pointer = nil,
  flags: VkDeviceQueueCreateFlags = 0.VkDeviceQueueCreateFlags,
  queueFamilyIndex: uint32 ,
  queueIndex: uint32 ,
  ) : VkDeviceQueueInfo2 =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.queueFamilyIndex = queueFamilyIndex
  result.queueIndex = queueIndex

proc mkVkPipelineCoverageToColorStateCreateInfoNV*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV,
  pNext: pointer = nil,
  flags: VkPipelineCoverageToColorStateCreateFlagsNV = 0.VkPipelineCoverageToColorStateCreateFlagsNV,
  coverageToColorEnable: VkBool32 ,
  coverageToColorLocation: uint32 = 0.uint32,
  ) : VkPipelineCoverageToColorStateCreateInfoNV =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.coverageToColorEnable = coverageToColorEnable
  result.coverageToColorLocation = coverageToColorLocation

proc mkVkPhysicalDeviceSamplerFilterMinmaxProperties*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES,
  pNext: pointer = nil,
  filterMinmaxSingleComponentFormats: VkBool32 ,
  filterMinmaxImageComponentMapping: VkBool32 ,
  ) : VkPhysicalDeviceSamplerFilterMinmaxProperties =
  result.sType = sType
  result.pNext = pNext
  result.filterMinmaxSingleComponentFormats = filterMinmaxSingleComponentFormats
  result.filterMinmaxImageComponentMapping = filterMinmaxImageComponentMapping

proc mkVkPipelineSampleLocationsStateCreateInfoEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT,
  pNext: pointer = nil,
  sampleLocationsEnable: VkBool32 ,
  sampleLocationsInfo: VkSampleLocationsInfoEXT ,
  ) : VkPipelineSampleLocationsStateCreateInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.sampleLocationsEnable = sampleLocationsEnable
  result.sampleLocationsInfo = sampleLocationsInfo

proc mkVkPhysicalDeviceSampleLocationsPropertiesEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT,
  pNext: pointer = nil,
  sampleLocationSampleCounts: VkSampleCountFlags ,
  maxSampleLocationGridSize: VkExtent2D ,
  sampleLocationCoordinateRange: array[2,float32] ,
  sampleLocationSubPixelBits: uint32 ,
  variableSampleLocations: VkBool32 ,
  ) : VkPhysicalDeviceSampleLocationsPropertiesEXT =
  result.sType = sType
  result.pNext = pNext
  result.sampleLocationSampleCounts = sampleLocationSampleCounts
  result.maxSampleLocationGridSize = maxSampleLocationGridSize
  result.sampleLocationCoordinateRange = sampleLocationCoordinateRange
  result.sampleLocationSubPixelBits = sampleLocationSubPixelBits
  result.variableSampleLocations = variableSampleLocations

proc mkVkPhysicalDeviceBlendOperationAdvancedFeaturesEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT,
  pNext: pointer = nil,
  advancedBlendCoherentOperations: VkBool32 ,
  ) : VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT =
  result.sType = sType
  result.pNext = pNext
  result.advancedBlendCoherentOperations = advancedBlendCoherentOperations

proc mkVkPhysicalDeviceBlendOperationAdvancedPropertiesEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT,
  pNext: pointer = nil,
  advancedBlendMaxColorAttachments: uint32 ,
  advancedBlendIndependentBlend: VkBool32 ,
  advancedBlendNonPremultipliedSrcColor: VkBool32 ,
  advancedBlendNonPremultipliedDstColor: VkBool32 ,
  advancedBlendCorrelatedOverlap: VkBool32 ,
  advancedBlendAllOperations: VkBool32 ,
  ) : VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT =
  result.sType = sType
  result.pNext = pNext
  result.advancedBlendMaxColorAttachments = advancedBlendMaxColorAttachments
  result.advancedBlendIndependentBlend = advancedBlendIndependentBlend
  result.advancedBlendNonPremultipliedSrcColor = advancedBlendNonPremultipliedSrcColor
  result.advancedBlendNonPremultipliedDstColor = advancedBlendNonPremultipliedDstColor
  result.advancedBlendCorrelatedOverlap = advancedBlendCorrelatedOverlap
  result.advancedBlendAllOperations = advancedBlendAllOperations

proc mkVkPipelineColorBlendAdvancedStateCreateInfoEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT,
  pNext: pointer = nil,
  srcPremultiplied: VkBool32 ,
  dstPremultiplied: VkBool32 ,
  blendOverlap: VkBlendOverlapEXT ,
  ) : VkPipelineColorBlendAdvancedStateCreateInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.srcPremultiplied = srcPremultiplied
  result.dstPremultiplied = dstPremultiplied
  result.blendOverlap = blendOverlap

proc mkVkPhysicalDeviceInlineUniformBlockFeaturesEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT,
  pNext: pointer = nil,
  inlineUniformBlock: VkBool32 ,
  descriptorBindingInlineUniformBlockUpdateAfterBind: VkBool32 ,
  ) : VkPhysicalDeviceInlineUniformBlockFeaturesEXT =
  result.sType = sType
  result.pNext = pNext
  result.inlineUniformBlock = inlineUniformBlock
  result.descriptorBindingInlineUniformBlockUpdateAfterBind = descriptorBindingInlineUniformBlockUpdateAfterBind

proc mkVkPipelineCoverageModulationStateCreateInfoNV*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV,
  pNext: pointer = nil,
  flags: VkPipelineCoverageModulationStateCreateFlagsNV = 0.VkPipelineCoverageModulationStateCreateFlagsNV,
  coverageModulationMode: VkCoverageModulationModeNV ,
  coverageModulationTableEnable: VkBool32 ,
  coverageModulationTableCount: uint32 = 0.uint32,
  pCoverageModulationTable: ptr float32 = nil,
  ) : VkPipelineCoverageModulationStateCreateInfoNV =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.coverageModulationMode = coverageModulationMode
  result.coverageModulationTableEnable = coverageModulationTableEnable
  result.coverageModulationTableCount = coverageModulationTableCount
  result.pCoverageModulationTable = pCoverageModulationTable

proc mkVkValidationCacheCreateInfoEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT,
  pNext: pointer = nil,
  flags: VkValidationCacheCreateFlagsEXT = 0.VkValidationCacheCreateFlagsEXT,
  initialDataSize: uint = 0.uint,
  pInitialData: pointer ,
  ) : VkValidationCacheCreateInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.initialDataSize = initialDataSize
  result.pInitialData = pInitialData

proc mkVkPhysicalDeviceMaintenance3Properties*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES,
  pNext: pointer = nil,
  maxPerSetDescriptors: uint32 ,
  maxMemoryAllocationSize: VkDeviceSize ,
  ) : VkPhysicalDeviceMaintenance3Properties =
  result.sType = sType
  result.pNext = pNext
  result.maxPerSetDescriptors = maxPerSetDescriptors
  result.maxMemoryAllocationSize = maxMemoryAllocationSize

proc mkVkDescriptorSetLayoutSupport*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT,
  pNext: pointer = nil,
  supported: VkBool32 ,
  ) : VkDescriptorSetLayoutSupport =
  result.sType = sType
  result.pNext = pNext
  result.supported = supported

proc mkVkPhysicalDeviceShaderDrawParametersFeatures*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES,
  pNext: pointer = nil,
  shaderDrawParameters: VkBool32 ,
  ) : VkPhysicalDeviceShaderDrawParametersFeatures =
  result.sType = sType
  result.pNext = pNext
  result.shaderDrawParameters = shaderDrawParameters

proc mkVkPhysicalDeviceShaderFloat16Int8Features*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES,
  pNext: pointer = nil,
  shaderFloat16: VkBool32 ,
  shaderInt8: VkBool32 ,
  ) : VkPhysicalDeviceShaderFloat16Int8Features =
  result.sType = sType
  result.pNext = pNext
  result.shaderFloat16 = shaderFloat16
  result.shaderInt8 = shaderInt8

proc mkVkPhysicalDeviceFloatControlsProperties*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES,
  pNext: pointer = nil,
  denormBehaviorIndependence: VkShaderFloatControlsIndependence ,
  roundingModeIndependence: VkShaderFloatControlsIndependence ,
  shaderSignedZeroInfNanPreserveFloat16: VkBool32 ,
  shaderSignedZeroInfNanPreserveFloat32: VkBool32 ,
  shaderSignedZeroInfNanPreserveFloat64: VkBool32 ,
  shaderDenormPreserveFloat16: VkBool32 ,
  shaderDenormPreserveFloat32: VkBool32 ,
  shaderDenormPreserveFloat64: VkBool32 ,
  shaderDenormFlushToZeroFloat16: VkBool32 ,
  shaderDenormFlushToZeroFloat32: VkBool32 ,
  shaderDenormFlushToZeroFloat64: VkBool32 ,
  shaderRoundingModeRTEFloat16: VkBool32 ,
  shaderRoundingModeRTEFloat32: VkBool32 ,
  shaderRoundingModeRTEFloat64: VkBool32 ,
  shaderRoundingModeRTZFloat16: VkBool32 ,
  shaderRoundingModeRTZFloat32: VkBool32 ,
  shaderRoundingModeRTZFloat64: VkBool32 ,
  ) : VkPhysicalDeviceFloatControlsProperties =
  result.sType = sType
  result.pNext = pNext
  result.denormBehaviorIndependence = denormBehaviorIndependence
  result.roundingModeIndependence = roundingModeIndependence
  result.shaderSignedZeroInfNanPreserveFloat16 = shaderSignedZeroInfNanPreserveFloat16
  result.shaderSignedZeroInfNanPreserveFloat32 = shaderSignedZeroInfNanPreserveFloat32
  result.shaderSignedZeroInfNanPreserveFloat64 = shaderSignedZeroInfNanPreserveFloat64
  result.shaderDenormPreserveFloat16 = shaderDenormPreserveFloat16
  result.shaderDenormPreserveFloat32 = shaderDenormPreserveFloat32
  result.shaderDenormPreserveFloat64 = shaderDenormPreserveFloat64
  result.shaderDenormFlushToZeroFloat16 = shaderDenormFlushToZeroFloat16
  result.shaderDenormFlushToZeroFloat32 = shaderDenormFlushToZeroFloat32
  result.shaderDenormFlushToZeroFloat64 = shaderDenormFlushToZeroFloat64
  result.shaderRoundingModeRTEFloat16 = shaderRoundingModeRTEFloat16
  result.shaderRoundingModeRTEFloat32 = shaderRoundingModeRTEFloat32
  result.shaderRoundingModeRTEFloat64 = shaderRoundingModeRTEFloat64
  result.shaderRoundingModeRTZFloat16 = shaderRoundingModeRTZFloat16
  result.shaderRoundingModeRTZFloat32 = shaderRoundingModeRTZFloat32
  result.shaderRoundingModeRTZFloat64 = shaderRoundingModeRTZFloat64

proc mkVkPhysicalDeviceHostQueryResetFeatures*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES,
  pNext: pointer = nil,
  hostQueryReset: VkBool32 ,
  ) : VkPhysicalDeviceHostQueryResetFeatures =
  result.sType = sType
  result.pNext = pNext
  result.hostQueryReset = hostQueryReset

proc mkVkShaderStatisticsInfoAMD*(
  shaderStageMask: VkShaderStageFlags ,
  resourceUsage: VkShaderResourceUsageAMD ,
  numPhysicalVgprs: uint32 ,
  numPhysicalSgprs: uint32 ,
  numAvailableVgprs: uint32 ,
  numAvailableSgprs: uint32 ,
  computeWorkGroupSize: array[3,uint32] ,
  ) : VkShaderStatisticsInfoAMD =
  result.shaderStageMask = shaderStageMask
  result.resourceUsage = resourceUsage
  result.numPhysicalVgprs = numPhysicalVgprs
  result.numPhysicalSgprs = numPhysicalSgprs
  result.numAvailableVgprs = numAvailableVgprs
  result.numAvailableSgprs = numAvailableSgprs
  result.computeWorkGroupSize = computeWorkGroupSize

proc mkVkDebugUtilsMessengerCallbackDataEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT,
  pNext: pointer = nil,
  flags: VkDebugUtilsMessengerCallbackDataFlagsEXT = 0.VkDebugUtilsMessengerCallbackDataFlagsEXT,
  pMessageIdName: cstring = nil,
  messageIdNumber: int32 = 0.int32,
  pMessage: cstring ,
  queueLabelCount: uint32 = 0.uint32,
  pQueueLabels: ptr VkDebugUtilsLabelEXT ,
  cmdBufLabelCount: uint32 = 0.uint32,
  pCmdBufLabels: ptr VkDebugUtilsLabelEXT ,
  objectCount: uint32 = 0.uint32,
  pObjects: ptr VkDebugUtilsObjectNameInfoEXT ,
  ) : VkDebugUtilsMessengerCallbackDataEXT =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.pMessageIdName = pMessageIdName
  result.messageIdNumber = messageIdNumber
  result.pMessage = pMessage
  result.queueLabelCount = queueLabelCount
  result.pQueueLabels = pQueueLabels
  result.cmdBufLabelCount = cmdBufLabelCount
  result.pCmdBufLabels = pCmdBufLabels
  result.objectCount = objectCount
  result.pObjects = pObjects

proc mkVkPhysicalDeviceExternalMemoryHostPropertiesEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT,
  pNext: pointer = nil,
  minImportedHostPointerAlignment: VkDeviceSize ,
  ) : VkPhysicalDeviceExternalMemoryHostPropertiesEXT =
  result.sType = sType
  result.pNext = pNext
  result.minImportedHostPointerAlignment = minImportedHostPointerAlignment

proc mkVkPhysicalDeviceConservativeRasterizationPropertiesEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT,
  pNext: pointer = nil,
  primitiveOverestimationSize: float32 ,
  maxExtraPrimitiveOverestimationSize: float32 ,
  extraPrimitiveOverestimationSizeGranularity: float32 ,
  primitiveUnderestimation: VkBool32 ,
  conservativePointAndLineRasterization: VkBool32 ,
  degenerateTrianglesRasterized: VkBool32 ,
  degenerateLinesRasterized: VkBool32 ,
  fullyCoveredFragmentShaderInputVariable: VkBool32 ,
  conservativeRasterizationPostDepthCoverage: VkBool32 ,
  ) : VkPhysicalDeviceConservativeRasterizationPropertiesEXT =
  result.sType = sType
  result.pNext = pNext
  result.primitiveOverestimationSize = primitiveOverestimationSize
  result.maxExtraPrimitiveOverestimationSize = maxExtraPrimitiveOverestimationSize
  result.extraPrimitiveOverestimationSizeGranularity = extraPrimitiveOverestimationSizeGranularity
  result.primitiveUnderestimation = primitiveUnderestimation
  result.conservativePointAndLineRasterization = conservativePointAndLineRasterization
  result.degenerateTrianglesRasterized = degenerateTrianglesRasterized
  result.degenerateLinesRasterized = degenerateLinesRasterized
  result.fullyCoveredFragmentShaderInputVariable = fullyCoveredFragmentShaderInputVariable
  result.conservativeRasterizationPostDepthCoverage = conservativeRasterizationPostDepthCoverage

proc mkVkPhysicalDeviceShaderCoreProperties2AMD*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD,
  pNext: pointer = nil,
  shaderCoreFeatures: VkShaderCorePropertiesFlagsAMD ,
  activeComputeUnitCount: uint32 ,
  ) : VkPhysicalDeviceShaderCoreProperties2AMD =
  result.sType = sType
  result.pNext = pNext
  result.shaderCoreFeatures = shaderCoreFeatures
  result.activeComputeUnitCount = activeComputeUnitCount

proc mkVkPipelineRasterizationConservativeStateCreateInfoEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT,
  pNext: pointer = nil,
  flags: VkPipelineRasterizationConservativeStateCreateFlagsEXT = 0.VkPipelineRasterizationConservativeStateCreateFlagsEXT,
  conservativeRasterizationMode: VkConservativeRasterizationModeEXT ,
  extraPrimitiveOverestimationSize: float32 ,
  ) : VkPipelineRasterizationConservativeStateCreateInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.conservativeRasterizationMode = conservativeRasterizationMode
  result.extraPrimitiveOverestimationSize = extraPrimitiveOverestimationSize

proc mkVkPhysicalDeviceDescriptorIndexingFeatures*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES,
  pNext: pointer = nil,
  shaderInputAttachmentArrayDynamicIndexing: VkBool32 ,
  shaderUniformTexelBufferArrayDynamicIndexing: VkBool32 ,
  shaderStorageTexelBufferArrayDynamicIndexing: VkBool32 ,
  shaderUniformBufferArrayNonUniformIndexing: VkBool32 ,
  shaderSampledImageArrayNonUniformIndexing: VkBool32 ,
  shaderStorageBufferArrayNonUniformIndexing: VkBool32 ,
  shaderStorageImageArrayNonUniformIndexing: VkBool32 ,
  shaderInputAttachmentArrayNonUniformIndexing: VkBool32 ,
  shaderUniformTexelBufferArrayNonUniformIndexing: VkBool32 ,
  shaderStorageTexelBufferArrayNonUniformIndexing: VkBool32 ,
  descriptorBindingUniformBufferUpdateAfterBind: VkBool32 ,
  descriptorBindingSampledImageUpdateAfterBind: VkBool32 ,
  descriptorBindingStorageImageUpdateAfterBind: VkBool32 ,
  descriptorBindingStorageBufferUpdateAfterBind: VkBool32 ,
  descriptorBindingUniformTexelBufferUpdateAfterBind: VkBool32 ,
  descriptorBindingStorageTexelBufferUpdateAfterBind: VkBool32 ,
  descriptorBindingUpdateUnusedWhilePending: VkBool32 ,
  descriptorBindingPartiallyBound: VkBool32 ,
  descriptorBindingVariableDescriptorCount: VkBool32 ,
  runtimeDescriptorArray: VkBool32 ,
  ) : VkPhysicalDeviceDescriptorIndexingFeatures =
  result.sType = sType
  result.pNext = pNext
  result.shaderInputAttachmentArrayDynamicIndexing = shaderInputAttachmentArrayDynamicIndexing
  result.shaderUniformTexelBufferArrayDynamicIndexing = shaderUniformTexelBufferArrayDynamicIndexing
  result.shaderStorageTexelBufferArrayDynamicIndexing = shaderStorageTexelBufferArrayDynamicIndexing
  result.shaderUniformBufferArrayNonUniformIndexing = shaderUniformBufferArrayNonUniformIndexing
  result.shaderSampledImageArrayNonUniformIndexing = shaderSampledImageArrayNonUniformIndexing
  result.shaderStorageBufferArrayNonUniformIndexing = shaderStorageBufferArrayNonUniformIndexing
  result.shaderStorageImageArrayNonUniformIndexing = shaderStorageImageArrayNonUniformIndexing
  result.shaderInputAttachmentArrayNonUniformIndexing = shaderInputAttachmentArrayNonUniformIndexing
  result.shaderUniformTexelBufferArrayNonUniformIndexing = shaderUniformTexelBufferArrayNonUniformIndexing
  result.shaderStorageTexelBufferArrayNonUniformIndexing = shaderStorageTexelBufferArrayNonUniformIndexing
  result.descriptorBindingUniformBufferUpdateAfterBind = descriptorBindingUniformBufferUpdateAfterBind
  result.descriptorBindingSampledImageUpdateAfterBind = descriptorBindingSampledImageUpdateAfterBind
  result.descriptorBindingStorageImageUpdateAfterBind = descriptorBindingStorageImageUpdateAfterBind
  result.descriptorBindingStorageBufferUpdateAfterBind = descriptorBindingStorageBufferUpdateAfterBind
  result.descriptorBindingUniformTexelBufferUpdateAfterBind = descriptorBindingUniformTexelBufferUpdateAfterBind
  result.descriptorBindingStorageTexelBufferUpdateAfterBind = descriptorBindingStorageTexelBufferUpdateAfterBind
  result.descriptorBindingUpdateUnusedWhilePending = descriptorBindingUpdateUnusedWhilePending
  result.descriptorBindingPartiallyBound = descriptorBindingPartiallyBound
  result.descriptorBindingVariableDescriptorCount = descriptorBindingVariableDescriptorCount
  result.runtimeDescriptorArray = runtimeDescriptorArray

proc mkVkPhysicalDeviceDescriptorIndexingProperties*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES,
  pNext: pointer = nil,
  maxUpdateAfterBindDescriptorsInAllPools: uint32 ,
  shaderUniformBufferArrayNonUniformIndexingNative: VkBool32 ,
  shaderSampledImageArrayNonUniformIndexingNative: VkBool32 ,
  shaderStorageBufferArrayNonUniformIndexingNative: VkBool32 ,
  shaderStorageImageArrayNonUniformIndexingNative: VkBool32 ,
  shaderInputAttachmentArrayNonUniformIndexingNative: VkBool32 ,
  robustBufferAccessUpdateAfterBind: VkBool32 ,
  quadDivergentImplicitLod: VkBool32 ,
  maxPerStageDescriptorUpdateAfterBindSamplers: uint32 ,
  maxPerStageDescriptorUpdateAfterBindUniformBuffers: uint32 ,
  maxPerStageDescriptorUpdateAfterBindStorageBuffers: uint32 ,
  maxPerStageDescriptorUpdateAfterBindSampledImages: uint32 ,
  maxPerStageDescriptorUpdateAfterBindStorageImages: uint32 ,
  maxPerStageDescriptorUpdateAfterBindInputAttachments: uint32 ,
  maxPerStageUpdateAfterBindResources: uint32 ,
  maxDescriptorSetUpdateAfterBindSamplers: uint32 ,
  maxDescriptorSetUpdateAfterBindUniformBuffers: uint32 ,
  maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: uint32 ,
  maxDescriptorSetUpdateAfterBindStorageBuffers: uint32 ,
  maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: uint32 ,
  maxDescriptorSetUpdateAfterBindSampledImages: uint32 ,
  maxDescriptorSetUpdateAfterBindStorageImages: uint32 ,
  maxDescriptorSetUpdateAfterBindInputAttachments: uint32 ,
  ) : VkPhysicalDeviceDescriptorIndexingProperties =
  result.sType = sType
  result.pNext = pNext
  result.maxUpdateAfterBindDescriptorsInAllPools = maxUpdateAfterBindDescriptorsInAllPools
  result.shaderUniformBufferArrayNonUniformIndexingNative = shaderUniformBufferArrayNonUniformIndexingNative
  result.shaderSampledImageArrayNonUniformIndexingNative = shaderSampledImageArrayNonUniformIndexingNative
  result.shaderStorageBufferArrayNonUniformIndexingNative = shaderStorageBufferArrayNonUniformIndexingNative
  result.shaderStorageImageArrayNonUniformIndexingNative = shaderStorageImageArrayNonUniformIndexingNative
  result.shaderInputAttachmentArrayNonUniformIndexingNative = shaderInputAttachmentArrayNonUniformIndexingNative
  result.robustBufferAccessUpdateAfterBind = robustBufferAccessUpdateAfterBind
  result.quadDivergentImplicitLod = quadDivergentImplicitLod
  result.maxPerStageDescriptorUpdateAfterBindSamplers = maxPerStageDescriptorUpdateAfterBindSamplers
  result.maxPerStageDescriptorUpdateAfterBindUniformBuffers = maxPerStageDescriptorUpdateAfterBindUniformBuffers
  result.maxPerStageDescriptorUpdateAfterBindStorageBuffers = maxPerStageDescriptorUpdateAfterBindStorageBuffers
  result.maxPerStageDescriptorUpdateAfterBindSampledImages = maxPerStageDescriptorUpdateAfterBindSampledImages
  result.maxPerStageDescriptorUpdateAfterBindStorageImages = maxPerStageDescriptorUpdateAfterBindStorageImages
  result.maxPerStageDescriptorUpdateAfterBindInputAttachments = maxPerStageDescriptorUpdateAfterBindInputAttachments
  result.maxPerStageUpdateAfterBindResources = maxPerStageUpdateAfterBindResources
  result.maxDescriptorSetUpdateAfterBindSamplers = maxDescriptorSetUpdateAfterBindSamplers
  result.maxDescriptorSetUpdateAfterBindUniformBuffers = maxDescriptorSetUpdateAfterBindUniformBuffers
  result.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic = maxDescriptorSetUpdateAfterBindUniformBuffersDynamic
  result.maxDescriptorSetUpdateAfterBindStorageBuffers = maxDescriptorSetUpdateAfterBindStorageBuffers
  result.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic = maxDescriptorSetUpdateAfterBindStorageBuffersDynamic
  result.maxDescriptorSetUpdateAfterBindSampledImages = maxDescriptorSetUpdateAfterBindSampledImages
  result.maxDescriptorSetUpdateAfterBindStorageImages = maxDescriptorSetUpdateAfterBindStorageImages
  result.maxDescriptorSetUpdateAfterBindInputAttachments = maxDescriptorSetUpdateAfterBindInputAttachments

proc mkVkDescriptorSetLayoutBindingFlagsCreateInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO,
  pNext: pointer = nil,
  bindingCount: uint32 = 0.uint32,
  pBindingFlags: ptr VkDescriptorBindingFlags ,
  ) : VkDescriptorSetLayoutBindingFlagsCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.bindingCount = bindingCount
  result.pBindingFlags = pBindingFlags

proc mkVkAttachmentDescription2*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2,
  pNext: pointer = nil,
  flags: VkAttachmentDescriptionFlags = 0.VkAttachmentDescriptionFlags,
  format: VkFormat ,
  samples: VkSampleCountFlagBits ,
  loadOp: VkAttachmentLoadOp ,
  storeOp: VkAttachmentStoreOp ,
  stencilLoadOp: VkAttachmentLoadOp ,
  stencilStoreOp: VkAttachmentStoreOp ,
  initialLayout: VkImageLayout ,
  finalLayout: VkImageLayout ,
  ) : VkAttachmentDescription2 =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.format = format
  result.samples = samples
  result.loadOp = loadOp
  result.storeOp = storeOp
  result.stencilLoadOp = stencilLoadOp
  result.stencilStoreOp = stencilStoreOp
  result.initialLayout = initialLayout
  result.finalLayout = finalLayout

proc mkVkAttachmentReference2*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2,
  pNext: pointer = nil,
  attachment: uint32 ,
  layout: VkImageLayout ,
  aspectMask: VkImageAspectFlags ,
  ) : VkAttachmentReference2 =
  result.sType = sType
  result.pNext = pNext
  result.attachment = attachment
  result.layout = layout
  result.aspectMask = aspectMask

proc mkVkSubpassDescription2*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2,
  pNext: pointer = nil,
  flags: VkSubpassDescriptionFlags = 0.VkSubpassDescriptionFlags,
  pipelineBindPoint: VkPipelineBindPoint ,
  viewMask: uint32 ,
  inputAttachmentCount: uint32 = 0.uint32,
  pInputAttachments: ptr VkAttachmentReference2 ,
  colorAttachmentCount: uint32 = 0.uint32,
  pColorAttachments: ptr VkAttachmentReference2 ,
  pResolveAttachments: ptr VkAttachmentReference2 = nil,
  pDepthStencilAttachment: ptr VkAttachmentReference2 = nil,
  preserveAttachmentCount: uint32 = 0.uint32,
  pPreserveAttachments: ptr uint32 ,
  ) : VkSubpassDescription2 =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.pipelineBindPoint = pipelineBindPoint
  result.viewMask = viewMask
  result.inputAttachmentCount = inputAttachmentCount
  result.pInputAttachments = pInputAttachments
  result.colorAttachmentCount = colorAttachmentCount
  result.pColorAttachments = pColorAttachments
  result.pResolveAttachments = pResolveAttachments
  result.pDepthStencilAttachment = pDepthStencilAttachment
  result.preserveAttachmentCount = preserveAttachmentCount
  result.pPreserveAttachments = pPreserveAttachments

proc mkVkSubpassDependency2*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2,
  pNext: pointer = nil,
  srcSubpass: uint32 ,
  dstSubpass: uint32 ,
  srcStageMask: VkPipelineStageFlags ,
  dstStageMask: VkPipelineStageFlags ,
  srcAccessMask: VkAccessFlags = 0.VkAccessFlags,
  dstAccessMask: VkAccessFlags = 0.VkAccessFlags,
  dependencyFlags: VkDependencyFlags = 0.VkDependencyFlags,
  viewOffset: int32 = 0.int32,
  ) : VkSubpassDependency2 =
  result.sType = sType
  result.pNext = pNext
  result.srcSubpass = srcSubpass
  result.dstSubpass = dstSubpass
  result.srcStageMask = srcStageMask
  result.dstStageMask = dstStageMask
  result.srcAccessMask = srcAccessMask
  result.dstAccessMask = dstAccessMask
  result.dependencyFlags = dependencyFlags
  result.viewOffset = viewOffset

proc mkVkRenderPassCreateInfo2*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2,
  pNext: pointer = nil,
  flags: VkRenderPassCreateFlags = 0.VkRenderPassCreateFlags,
  attachmentCount: uint32 = 0.uint32,
  pAttachments: ptr VkAttachmentDescription2 ,
  subpassCount: uint32 ,
  pSubpasses: ptr VkSubpassDescription2 ,
  dependencyCount: uint32 = 0.uint32,
  pDependencies: ptr VkSubpassDependency2 ,
  correlatedViewMaskCount: uint32 = 0.uint32,
  pCorrelatedViewMasks: ptr uint32 ,
  ) : VkRenderPassCreateInfo2 =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.attachmentCount = attachmentCount
  result.pAttachments = pAttachments
  result.subpassCount = subpassCount
  result.pSubpasses = pSubpasses
  result.dependencyCount = dependencyCount
  result.pDependencies = pDependencies
  result.correlatedViewMaskCount = correlatedViewMaskCount
  result.pCorrelatedViewMasks = pCorrelatedViewMasks

proc mkVkPhysicalDeviceTimelineSemaphoreFeatures*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES,
  pNext: pointer = nil,
  timelineSemaphore: VkBool32 ,
  ) : VkPhysicalDeviceTimelineSemaphoreFeatures =
  result.sType = sType
  result.pNext = pNext
  result.timelineSemaphore = timelineSemaphore

proc mkVkSemaphoreWaitInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO,
  pNext: pointer = nil,
  flags: VkSemaphoreWaitFlags = 0.VkSemaphoreWaitFlags,
  semaphoreCount: uint32 ,
  pSemaphores: ptr VkSemaphore ,
  pValues: ptr uint64 ,
  ) : VkSemaphoreWaitInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.semaphoreCount = semaphoreCount
  result.pSemaphores = pSemaphores
  result.pValues = pValues

proc mkVkAndroidHardwareBufferPropertiesANDROID*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID,
  pNext: pointer = nil,
  allocationSize: VkDeviceSize ,
  memoryTypeBits: uint32 ,
  ) : VkAndroidHardwareBufferPropertiesANDROID =
  result.sType = sType
  result.pNext = pNext
  result.allocationSize = allocationSize
  result.memoryTypeBits = memoryTypeBits

proc mkVkAndroidHardwareBufferFormatPropertiesANDROID*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID,
  pNext: pointer = nil,
  format: VkFormat ,
  externalFormat: uint64 ,
  formatFeatures: VkFormatFeatureFlags ,
  samplerYcbcrConversionComponents: VkComponentMapping ,
  suggestedYcbcrModel: VkSamplerYcbcrModelConversion ,
  suggestedYcbcrRange: VkSamplerYcbcrRange ,
  suggestedXChromaOffset: VkChromaLocation ,
  suggestedYChromaOffset: VkChromaLocation ,
  ) : VkAndroidHardwareBufferFormatPropertiesANDROID =
  result.sType = sType
  result.pNext = pNext
  result.format = format
  result.externalFormat = externalFormat
  result.formatFeatures = formatFeatures
  result.samplerYcbcrConversionComponents = samplerYcbcrConversionComponents
  result.suggestedYcbcrModel = suggestedYcbcrModel
  result.suggestedYcbcrRange = suggestedYcbcrRange
  result.suggestedXChromaOffset = suggestedXChromaOffset
  result.suggestedYChromaOffset = suggestedYChromaOffset

proc mkVkCommandBufferInheritanceConditionalRenderingInfoEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT,
  pNext: pointer = nil,
  conditionalRenderingEnable: VkBool32 ,
  ) : VkCommandBufferInheritanceConditionalRenderingInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.conditionalRenderingEnable = conditionalRenderingEnable

proc mkVkPhysicalDevice8BitStorageFeatures*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES,
  pNext: pointer = nil,
  storageBuffer8BitAccess: VkBool32 ,
  uniformAndStorageBuffer8BitAccess: VkBool32 ,
  storagePushConstant8: VkBool32 ,
  ) : VkPhysicalDevice8BitStorageFeatures =
  result.sType = sType
  result.pNext = pNext
  result.storageBuffer8BitAccess = storageBuffer8BitAccess
  result.uniformAndStorageBuffer8BitAccess = uniformAndStorageBuffer8BitAccess
  result.storagePushConstant8 = storagePushConstant8

proc mkVkPhysicalDeviceConditionalRenderingFeaturesEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT,
  pNext: pointer = nil,
  conditionalRendering: VkBool32 ,
  inheritedConditionalRendering: VkBool32 ,
  ) : VkPhysicalDeviceConditionalRenderingFeaturesEXT =
  result.sType = sType
  result.pNext = pNext
  result.conditionalRendering = conditionalRendering
  result.inheritedConditionalRendering = inheritedConditionalRendering

proc mkVkPhysicalDeviceVulkanMemoryModelFeatures*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES,
  pNext: pointer = nil,
  vulkanMemoryModel: VkBool32 ,
  vulkanMemoryModelDeviceScope: VkBool32 ,
  vulkanMemoryModelAvailabilityVisibilityChains: VkBool32 ,
  ) : VkPhysicalDeviceVulkanMemoryModelFeatures =
  result.sType = sType
  result.pNext = pNext
  result.vulkanMemoryModel = vulkanMemoryModel
  result.vulkanMemoryModelDeviceScope = vulkanMemoryModelDeviceScope
  result.vulkanMemoryModelAvailabilityVisibilityChains = vulkanMemoryModelAvailabilityVisibilityChains

proc mkVkPhysicalDeviceShaderAtomicInt64Features*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES,
  pNext: pointer = nil,
  shaderBufferInt64Atomics: VkBool32 ,
  shaderSharedInt64Atomics: VkBool32 ,
  ) : VkPhysicalDeviceShaderAtomicInt64Features =
  result.sType = sType
  result.pNext = pNext
  result.shaderBufferInt64Atomics = shaderBufferInt64Atomics
  result.shaderSharedInt64Atomics = shaderSharedInt64Atomics

proc mkVkPhysicalDeviceShaderAtomicFloatFeaturesEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT,
  pNext: pointer = nil,
  shaderBufferFloat32Atomics: VkBool32 ,
  shaderBufferFloat32AtomicAdd: VkBool32 ,
  shaderBufferFloat64Atomics: VkBool32 ,
  shaderBufferFloat64AtomicAdd: VkBool32 ,
  shaderSharedFloat32Atomics: VkBool32 ,
  shaderSharedFloat32AtomicAdd: VkBool32 ,
  shaderSharedFloat64Atomics: VkBool32 ,
  shaderSharedFloat64AtomicAdd: VkBool32 ,
  shaderImageFloat32Atomics: VkBool32 ,
  shaderImageFloat32AtomicAdd: VkBool32 ,
  sparseImageFloat32Atomics: VkBool32 ,
  sparseImageFloat32AtomicAdd: VkBool32 ,
  ) : VkPhysicalDeviceShaderAtomicFloatFeaturesEXT =
  result.sType = sType
  result.pNext = pNext
  result.shaderBufferFloat32Atomics = shaderBufferFloat32Atomics
  result.shaderBufferFloat32AtomicAdd = shaderBufferFloat32AtomicAdd
  result.shaderBufferFloat64Atomics = shaderBufferFloat64Atomics
  result.shaderBufferFloat64AtomicAdd = shaderBufferFloat64AtomicAdd
  result.shaderSharedFloat32Atomics = shaderSharedFloat32Atomics
  result.shaderSharedFloat32AtomicAdd = shaderSharedFloat32AtomicAdd
  result.shaderSharedFloat64Atomics = shaderSharedFloat64Atomics
  result.shaderSharedFloat64AtomicAdd = shaderSharedFloat64AtomicAdd
  result.shaderImageFloat32Atomics = shaderImageFloat32Atomics
  result.shaderImageFloat32AtomicAdd = shaderImageFloat32AtomicAdd
  result.sparseImageFloat32Atomics = sparseImageFloat32Atomics
  result.sparseImageFloat32AtomicAdd = sparseImageFloat32AtomicAdd

proc mkVkPhysicalDeviceVertexAttributeDivisorFeaturesEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT,
  pNext: pointer = nil,
  vertexAttributeInstanceRateDivisor: VkBool32 ,
  vertexAttributeInstanceRateZeroDivisor: VkBool32 ,
  ) : VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT =
  result.sType = sType
  result.pNext = pNext
  result.vertexAttributeInstanceRateDivisor = vertexAttributeInstanceRateDivisor
  result.vertexAttributeInstanceRateZeroDivisor = vertexAttributeInstanceRateZeroDivisor

proc mkVkQueueFamilyCheckpointPropertiesNV*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV,
  pNext: pointer = nil,
  checkpointExecutionStageMask: VkPipelineStageFlags ,
  ) : VkQueueFamilyCheckpointPropertiesNV =
  result.sType = sType
  result.pNext = pNext
  result.checkpointExecutionStageMask = checkpointExecutionStageMask

proc mkVkPhysicalDeviceDepthStencilResolveProperties*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES,
  pNext: pointer = nil,
  supportedDepthResolveModes: VkResolveModeFlags ,
  supportedStencilResolveModes: VkResolveModeFlags ,
  independentResolveNone: VkBool32 ,
  independentResolve: VkBool32 ,
  ) : VkPhysicalDeviceDepthStencilResolveProperties =
  result.sType = sType
  result.pNext = pNext
  result.supportedDepthResolveModes = supportedDepthResolveModes
  result.supportedStencilResolveModes = supportedStencilResolveModes
  result.independentResolveNone = independentResolveNone
  result.independentResolve = independentResolve

proc mkVkSubpassDescriptionDepthStencilResolve*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE,
  pNext: pointer = nil,
  depthResolveMode: VkResolveModeFlagBits ,
  stencilResolveMode: VkResolveModeFlagBits ,
  pDepthStencilResolveAttachment: ptr VkAttachmentReference2 = nil,
  ) : VkSubpassDescriptionDepthStencilResolve =
  result.sType = sType
  result.pNext = pNext
  result.depthResolveMode = depthResolveMode
  result.stencilResolveMode = stencilResolveMode
  result.pDepthStencilResolveAttachment = pDepthStencilResolveAttachment

proc mkVkPhysicalDeviceASTCDecodeFeaturesEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT,
  pNext: pointer = nil,
  decodeModeSharedExponent: VkBool32 ,
  ) : VkPhysicalDeviceASTCDecodeFeaturesEXT =
  result.sType = sType
  result.pNext = pNext
  result.decodeModeSharedExponent = decodeModeSharedExponent

proc mkVkPhysicalDeviceTransformFeedbackFeaturesEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT,
  pNext: pointer = nil,
  transformFeedback: VkBool32 ,
  geometryStreams: VkBool32 ,
  ) : VkPhysicalDeviceTransformFeedbackFeaturesEXT =
  result.sType = sType
  result.pNext = pNext
  result.transformFeedback = transformFeedback
  result.geometryStreams = geometryStreams

proc mkVkPhysicalDeviceTransformFeedbackPropertiesEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT,
  pNext: pointer = nil,
  maxTransformFeedbackStreams: uint32 ,
  maxTransformFeedbackBuffers: uint32 ,
  maxTransformFeedbackBufferSize: VkDeviceSize ,
  maxTransformFeedbackStreamDataSize: uint32 ,
  maxTransformFeedbackBufferDataSize: uint32 ,
  maxTransformFeedbackBufferDataStride: uint32 ,
  transformFeedbackQueries: VkBool32 ,
  transformFeedbackStreamsLinesTriangles: VkBool32 ,
  transformFeedbackRasterizationStreamSelect: VkBool32 ,
  transformFeedbackDraw: VkBool32 ,
  ) : VkPhysicalDeviceTransformFeedbackPropertiesEXT =
  result.sType = sType
  result.pNext = pNext
  result.maxTransformFeedbackStreams = maxTransformFeedbackStreams
  result.maxTransformFeedbackBuffers = maxTransformFeedbackBuffers
  result.maxTransformFeedbackBufferSize = maxTransformFeedbackBufferSize
  result.maxTransformFeedbackStreamDataSize = maxTransformFeedbackStreamDataSize
  result.maxTransformFeedbackBufferDataSize = maxTransformFeedbackBufferDataSize
  result.maxTransformFeedbackBufferDataStride = maxTransformFeedbackBufferDataStride
  result.transformFeedbackQueries = transformFeedbackQueries
  result.transformFeedbackStreamsLinesTriangles = transformFeedbackStreamsLinesTriangles
  result.transformFeedbackRasterizationStreamSelect = transformFeedbackRasterizationStreamSelect
  result.transformFeedbackDraw = transformFeedbackDraw

proc mkVkPipelineRasterizationStateStreamCreateInfoEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT,
  pNext: pointer = nil,
  flags: VkPipelineRasterizationStateStreamCreateFlagsEXT = 0.VkPipelineRasterizationStateStreamCreateFlagsEXT,
  rasterizationStream: uint32 ,
  ) : VkPipelineRasterizationStateStreamCreateInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.rasterizationStream = rasterizationStream

proc mkVkPhysicalDeviceRepresentativeFragmentTestFeaturesNV*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV,
  pNext: pointer = nil,
  representativeFragmentTest: VkBool32 ,
  ) : VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV =
  result.sType = sType
  result.pNext = pNext
  result.representativeFragmentTest = representativeFragmentTest

proc mkVkPipelineRepresentativeFragmentTestStateCreateInfoNV*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV,
  pNext: pointer = nil,
  representativeFragmentTestEnable: VkBool32 ,
  ) : VkPipelineRepresentativeFragmentTestStateCreateInfoNV =
  result.sType = sType
  result.pNext = pNext
  result.representativeFragmentTestEnable = representativeFragmentTestEnable

proc mkVkPhysicalDeviceExclusiveScissorFeaturesNV*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV,
  pNext: pointer = nil,
  exclusiveScissor: VkBool32 ,
  ) : VkPhysicalDeviceExclusiveScissorFeaturesNV =
  result.sType = sType
  result.pNext = pNext
  result.exclusiveScissor = exclusiveScissor

proc mkVkPhysicalDeviceCornerSampledImageFeaturesNV*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV,
  pNext: pointer = nil,
  cornerSampledImage: VkBool32 ,
  ) : VkPhysicalDeviceCornerSampledImageFeaturesNV =
  result.sType = sType
  result.pNext = pNext
  result.cornerSampledImage = cornerSampledImage

proc mkVkPhysicalDeviceComputeShaderDerivativesFeaturesNV*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV,
  pNext: pointer = nil,
  computeDerivativeGroupQuads: VkBool32 ,
  computeDerivativeGroupLinear: VkBool32 ,
  ) : VkPhysicalDeviceComputeShaderDerivativesFeaturesNV =
  result.sType = sType
  result.pNext = pNext
  result.computeDerivativeGroupQuads = computeDerivativeGroupQuads
  result.computeDerivativeGroupLinear = computeDerivativeGroupLinear

proc mkVkPhysicalDeviceFragmentShaderBarycentricFeaturesNV*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV,
  pNext: pointer = nil,
  fragmentShaderBarycentric: VkBool32 ,
  ) : VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV =
  result.sType = sType
  result.pNext = pNext
  result.fragmentShaderBarycentric = fragmentShaderBarycentric

proc mkVkPhysicalDeviceShaderImageFootprintFeaturesNV*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV,
  pNext: pointer = nil,
  imageFootprint: VkBool32 ,
  ) : VkPhysicalDeviceShaderImageFootprintFeaturesNV =
  result.sType = sType
  result.pNext = pNext
  result.imageFootprint = imageFootprint

proc mkVkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV,
  pNext: pointer = nil,
  dedicatedAllocationImageAliasing: VkBool32 ,
  ) : VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV =
  result.sType = sType
  result.pNext = pNext
  result.dedicatedAllocationImageAliasing = dedicatedAllocationImageAliasing

proc mkVkPipelineViewportShadingRateImageStateCreateInfoNV*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV,
  pNext: pointer = nil,
  shadingRateImageEnable: VkBool32 ,
  viewportCount: uint32 ,
  pShadingRatePalettes: ptr VkShadingRatePaletteNV ,
  ) : VkPipelineViewportShadingRateImageStateCreateInfoNV =
  result.sType = sType
  result.pNext = pNext
  result.shadingRateImageEnable = shadingRateImageEnable
  result.viewportCount = viewportCount
  result.pShadingRatePalettes = pShadingRatePalettes

proc mkVkPhysicalDeviceShadingRateImageFeaturesNV*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV,
  pNext: pointer = nil,
  shadingRateImage: VkBool32 ,
  shadingRateCoarseSampleOrder: VkBool32 ,
  ) : VkPhysicalDeviceShadingRateImageFeaturesNV =
  result.sType = sType
  result.pNext = pNext
  result.shadingRateImage = shadingRateImage
  result.shadingRateCoarseSampleOrder = shadingRateCoarseSampleOrder

proc mkVkPhysicalDeviceMeshShaderFeaturesNV*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV,
  pNext: pointer = nil,
  taskShader: VkBool32 ,
  meshShader: VkBool32 ,
  ) : VkPhysicalDeviceMeshShaderFeaturesNV =
  result.sType = sType
  result.pNext = pNext
  result.taskShader = taskShader
  result.meshShader = meshShader

proc mkVkRayTracingPipelineCreateInfoNV*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV,
  pNext: pointer = nil,
  flags: VkPipelineCreateFlags = 0.VkPipelineCreateFlags,
  stageCount: uint32 ,
  pStages: ptr VkPipelineShaderStageCreateInfo ,
  groupCount: uint32 ,
  pGroups: ptr VkRayTracingShaderGroupCreateInfoNV ,
  maxRecursionDepth: uint32 ,
  layout: VkPipelineLayout ,
  basePipelineHandle: VkPipeline = nil,
  basePipelineIndex: int32 ,
  ) : VkRayTracingPipelineCreateInfoNV =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.stageCount = stageCount
  result.pStages = pStages
  result.groupCount = groupCount
  result.pGroups = pGroups
  result.maxRecursionDepth = maxRecursionDepth
  result.layout = layout
  result.basePipelineHandle = basePipelineHandle
  result.basePipelineIndex = basePipelineIndex

proc mkVkRayTracingPipelineCreateInfoKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR,
  pNext: pointer = nil,
  flags: VkPipelineCreateFlags = 0.VkPipelineCreateFlags,
  stageCount: uint32 = 0.uint32,
  pStages: ptr VkPipelineShaderStageCreateInfo ,
  groupCount: uint32 = 0.uint32,
  pGroups: ptr VkRayTracingShaderGroupCreateInfoKHR ,
  maxRecursionDepth: uint32 ,
  libraries: VkPipelineLibraryCreateInfoKHR ,
  pLibraryInterface: ptr VkRayTracingPipelineInterfaceCreateInfoKHR = nil,
  layout: VkPipelineLayout ,
  basePipelineHandle: VkPipeline = nil,
  basePipelineIndex: int32 ,
  ) : VkRayTracingPipelineCreateInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.stageCount = stageCount
  result.pStages = pStages
  result.groupCount = groupCount
  result.pGroups = pGroups
  result.maxRecursionDepth = maxRecursionDepth
  result.libraries = libraries
  result.pLibraryInterface = pLibraryInterface
  result.layout = layout
  result.basePipelineHandle = basePipelineHandle
  result.basePipelineIndex = basePipelineIndex

proc mkVkGeometryTrianglesNV*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV,
  pNext: pointer = nil,
  vertexData: VkBuffer = nil,
  vertexOffset: VkDeviceSize ,
  vertexCount: uint32 ,
  vertexStride: VkDeviceSize ,
  vertexFormat: VkFormat ,
  indexData: VkBuffer = nil,
  indexOffset: VkDeviceSize ,
  indexCount: uint32 ,
  indexType: VkIndexType ,
  transformData: VkBuffer = nil,
  transformOffset: VkDeviceSize ,
  ) : VkGeometryTrianglesNV =
  result.sType = sType
  result.pNext = pNext
  result.vertexData = vertexData
  result.vertexOffset = vertexOffset
  result.vertexCount = vertexCount
  result.vertexStride = vertexStride
  result.vertexFormat = vertexFormat
  result.indexData = indexData
  result.indexOffset = indexOffset
  result.indexCount = indexCount
  result.indexType = indexType
  result.transformData = transformData
  result.transformOffset = transformOffset

proc mkVkGeometryAABBNV*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV,
  pNext: pointer = nil,
  aabbData: VkBuffer = nil,
  numAABBs: uint32 ,
  stride: uint32 ,
  offset: VkDeviceSize ,
  ) : VkGeometryAABBNV =
  result.sType = sType
  result.pNext = pNext
  result.aabbData = aabbData
  result.numAABBs = numAABBs
  result.stride = stride
  result.offset = offset

proc mkVkGeometryDataNV*(
  triangles: VkGeometryTrianglesNV ,
  aabbs: VkGeometryAABBNV ,
  ) : VkGeometryDataNV =
  result.triangles = triangles
  result.aabbs = aabbs

proc mkVkGeometryNV*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_GEOMETRY_NV,
  pNext: pointer = nil,
  geometryType: VkGeometryTypeKHR ,
  geometry: VkGeometryDataNV ,
  flags: VkGeometryFlagsKHR = 0.VkGeometryFlagsKHR,
  ) : VkGeometryNV =
  result.sType = sType
  result.pNext = pNext
  result.geometryType = geometryType
  result.geometry = geometry
  result.flags = flags

proc mkVkAccelerationStructureInfoNV*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV,
  pNext: pointer = nil,
  `type`: VkAccelerationStructureTypeNV ,
  flags: VkBuildAccelerationStructureFlagsNV = 0.VkBuildAccelerationStructureFlagsNV,
  instanceCount: uint32 = 0.uint32,
  geometryCount: uint32 = 0.uint32,
  pGeometries: ptr VkGeometryNV ,
  ) : VkAccelerationStructureInfoNV =
  result.sType = sType
  result.pNext = pNext
  result.`type` = `type`
  result.flags = flags
  result.instanceCount = instanceCount
  result.geometryCount = geometryCount
  result.pGeometries = pGeometries

proc mkVkAccelerationStructureCreateInfoNV*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV,
  pNext: pointer = nil,
  compactedSize: VkDeviceSize ,
  info: VkAccelerationStructureInfoNV ,
  ) : VkAccelerationStructureCreateInfoNV =
  result.sType = sType
  result.pNext = pNext
  result.compactedSize = compactedSize
  result.info = info

proc mkVkBindAccelerationStructureMemoryInfoKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_KHR,
  pNext: pointer = nil,
  accelerationStructure: VkAccelerationStructureKHR ,
  memory: VkDeviceMemory ,
  memoryOffset: VkDeviceSize ,
  deviceIndexCount: uint32 = 0.uint32,
  pDeviceIndices: ptr uint32 ,
  ) : VkBindAccelerationStructureMemoryInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.accelerationStructure = accelerationStructure
  result.memory = memory
  result.memoryOffset = memoryOffset
  result.deviceIndexCount = deviceIndexCount
  result.pDeviceIndices = pDeviceIndices

proc mkVkPhysicalDeviceRayTracingFeaturesKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_FEATURES_KHR,
  pNext: pointer = nil,
  rayTracing: VkBool32 ,
  rayTracingShaderGroupHandleCaptureReplay: VkBool32 ,
  rayTracingShaderGroupHandleCaptureReplayMixed: VkBool32 ,
  rayTracingAccelerationStructureCaptureReplay: VkBool32 ,
  rayTracingIndirectTraceRays: VkBool32 ,
  rayTracingIndirectAccelerationStructureBuild: VkBool32 ,
  rayTracingHostAccelerationStructureCommands: VkBool32 ,
  rayQuery: VkBool32 ,
  rayTracingPrimitiveCulling: VkBool32 ,
  ) : VkPhysicalDeviceRayTracingFeaturesKHR =
  result.sType = sType
  result.pNext = pNext
  result.rayTracing = rayTracing
  result.rayTracingShaderGroupHandleCaptureReplay = rayTracingShaderGroupHandleCaptureReplay
  result.rayTracingShaderGroupHandleCaptureReplayMixed = rayTracingShaderGroupHandleCaptureReplayMixed
  result.rayTracingAccelerationStructureCaptureReplay = rayTracingAccelerationStructureCaptureReplay
  result.rayTracingIndirectTraceRays = rayTracingIndirectTraceRays
  result.rayTracingIndirectAccelerationStructureBuild = rayTracingIndirectAccelerationStructureBuild
  result.rayTracingHostAccelerationStructureCommands = rayTracingHostAccelerationStructureCommands
  result.rayQuery = rayQuery
  result.rayTracingPrimitiveCulling = rayTracingPrimitiveCulling

proc mkVkStridedBufferRegionKHR*(
  buffer: VkBuffer = nil,
  offset: VkDeviceSize ,
  stride: VkDeviceSize ,
  size: VkDeviceSize ,
  ) : VkStridedBufferRegionKHR =
  result.buffer = buffer
  result.offset = offset
  result.stride = stride
  result.size = size

proc mkVkDrmFormatModifierPropertiesEXT*(
  drmFormatModifier: uint64 ,
  drmFormatModifierPlaneCount: uint32 ,
  drmFormatModifierTilingFeatures: VkFormatFeatureFlags ,
  ) : VkDrmFormatModifierPropertiesEXT =
  result.drmFormatModifier = drmFormatModifier
  result.drmFormatModifierPlaneCount = drmFormatModifierPlaneCount
  result.drmFormatModifierTilingFeatures = drmFormatModifierTilingFeatures

proc mkVkImageDrmFormatModifierExplicitCreateInfoEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT,
  pNext: pointer = nil,
  drmFormatModifier: uint64 ,
  drmFormatModifierPlaneCount: uint32 ,
  pPlaneLayouts: ptr VkSubresourceLayout ,
  ) : VkImageDrmFormatModifierExplicitCreateInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.drmFormatModifier = drmFormatModifier
  result.drmFormatModifierPlaneCount = drmFormatModifierPlaneCount
  result.pPlaneLayouts = pPlaneLayouts

proc mkVkImageStencilUsageCreateInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO,
  pNext: pointer = nil,
  stencilUsage: VkImageUsageFlags ,
  ) : VkImageStencilUsageCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.stencilUsage = stencilUsage

proc mkVkPhysicalDeviceFragmentDensityMapFeaturesEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT,
  pNext: pointer = nil,
  fragmentDensityMap: VkBool32 ,
  fragmentDensityMapDynamic: VkBool32 ,
  fragmentDensityMapNonSubsampledImages: VkBool32 ,
  ) : VkPhysicalDeviceFragmentDensityMapFeaturesEXT =
  result.sType = sType
  result.pNext = pNext
  result.fragmentDensityMap = fragmentDensityMap
  result.fragmentDensityMapDynamic = fragmentDensityMapDynamic
  result.fragmentDensityMapNonSubsampledImages = fragmentDensityMapNonSubsampledImages

proc mkVkPhysicalDeviceFragmentDensityMap2FeaturesEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT,
  pNext: pointer = nil,
  fragmentDensityMapDeferred: VkBool32 ,
  ) : VkPhysicalDeviceFragmentDensityMap2FeaturesEXT =
  result.sType = sType
  result.pNext = pNext
  result.fragmentDensityMapDeferred = fragmentDensityMapDeferred

proc mkVkPhysicalDeviceFragmentDensityMapPropertiesEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT,
  pNext: pointer = nil,
  minFragmentDensityTexelSize: VkExtent2D ,
  maxFragmentDensityTexelSize: VkExtent2D ,
  fragmentDensityInvocations: VkBool32 ,
  ) : VkPhysicalDeviceFragmentDensityMapPropertiesEXT =
  result.sType = sType
  result.pNext = pNext
  result.minFragmentDensityTexelSize = minFragmentDensityTexelSize
  result.maxFragmentDensityTexelSize = maxFragmentDensityTexelSize
  result.fragmentDensityInvocations = fragmentDensityInvocations

proc mkVkPhysicalDeviceFragmentDensityMap2PropertiesEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT,
  pNext: pointer = nil,
  subsampledLoads: VkBool32 ,
  subsampledCoarseReconstructionEarlyAccess: VkBool32 ,
  maxSubsampledArrayLayers: uint32 ,
  maxDescriptorSetSubsampledSamplers: uint32 ,
  ) : VkPhysicalDeviceFragmentDensityMap2PropertiesEXT =
  result.sType = sType
  result.pNext = pNext
  result.subsampledLoads = subsampledLoads
  result.subsampledCoarseReconstructionEarlyAccess = subsampledCoarseReconstructionEarlyAccess
  result.maxSubsampledArrayLayers = maxSubsampledArrayLayers
  result.maxDescriptorSetSubsampledSamplers = maxDescriptorSetSubsampledSamplers

proc mkVkPhysicalDeviceScalarBlockLayoutFeatures*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES,
  pNext: pointer = nil,
  scalarBlockLayout: VkBool32 ,
  ) : VkPhysicalDeviceScalarBlockLayoutFeatures =
  result.sType = sType
  result.pNext = pNext
  result.scalarBlockLayout = scalarBlockLayout

proc mkVkSurfaceProtectedCapabilitiesKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR,
  pNext: pointer = nil,
  supportsProtected: VkBool32 ,
  ) : VkSurfaceProtectedCapabilitiesKHR =
  result.sType = sType
  result.pNext = pNext
  result.supportsProtected = supportsProtected

proc mkVkPhysicalDeviceUniformBufferStandardLayoutFeatures*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES,
  pNext: pointer = nil,
  uniformBufferStandardLayout: VkBool32 ,
  ) : VkPhysicalDeviceUniformBufferStandardLayoutFeatures =
  result.sType = sType
  result.pNext = pNext
  result.uniformBufferStandardLayout = uniformBufferStandardLayout

proc mkVkPhysicalDeviceDepthClipEnableFeaturesEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT,
  pNext: pointer = nil,
  depthClipEnable: VkBool32 ,
  ) : VkPhysicalDeviceDepthClipEnableFeaturesEXT =
  result.sType = sType
  result.pNext = pNext
  result.depthClipEnable = depthClipEnable

proc mkVkPipelineRasterizationDepthClipStateCreateInfoEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT,
  pNext: pointer = nil,
  flags: VkPipelineRasterizationDepthClipStateCreateFlagsEXT = 0.VkPipelineRasterizationDepthClipStateCreateFlagsEXT,
  depthClipEnable: VkBool32 ,
  ) : VkPipelineRasterizationDepthClipStateCreateInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.depthClipEnable = depthClipEnable

proc mkVkPhysicalDeviceMemoryBudgetPropertiesEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT,
  pNext: pointer = nil,
  heapBudget: array[VK_MAX_MEMORY_HEAPS,VkDeviceSize] ,
  heapUsage: array[VK_MAX_MEMORY_HEAPS,VkDeviceSize] ,
  ) : VkPhysicalDeviceMemoryBudgetPropertiesEXT =
  result.sType = sType
  result.pNext = pNext
  result.heapBudget = heapBudget
  result.heapUsage = heapUsage

proc mkVkPhysicalDeviceMemoryPriorityFeaturesEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT,
  pNext: pointer = nil,
  memoryPriority: VkBool32 ,
  ) : VkPhysicalDeviceMemoryPriorityFeaturesEXT =
  result.sType = sType
  result.pNext = pNext
  result.memoryPriority = memoryPriority

proc mkVkPhysicalDeviceBufferDeviceAddressFeatures*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES,
  pNext: pointer = nil,
  bufferDeviceAddress: VkBool32 ,
  bufferDeviceAddressCaptureReplay: VkBool32 ,
  bufferDeviceAddressMultiDevice: VkBool32 ,
  ) : VkPhysicalDeviceBufferDeviceAddressFeatures =
  result.sType = sType
  result.pNext = pNext
  result.bufferDeviceAddress = bufferDeviceAddress
  result.bufferDeviceAddressCaptureReplay = bufferDeviceAddressCaptureReplay
  result.bufferDeviceAddressMultiDevice = bufferDeviceAddressMultiDevice

proc mkVkPhysicalDeviceBufferDeviceAddressFeaturesEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT,
  pNext: pointer = nil,
  bufferDeviceAddress: VkBool32 ,
  bufferDeviceAddressCaptureReplay: VkBool32 ,
  bufferDeviceAddressMultiDevice: VkBool32 ,
  ) : VkPhysicalDeviceBufferDeviceAddressFeaturesEXT =
  result.sType = sType
  result.pNext = pNext
  result.bufferDeviceAddress = bufferDeviceAddress
  result.bufferDeviceAddressCaptureReplay = bufferDeviceAddressCaptureReplay
  result.bufferDeviceAddressMultiDevice = bufferDeviceAddressMultiDevice

proc mkVkBufferDeviceAddressCreateInfoEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT,
  pNext: pointer = nil,
  deviceAddress: VkDeviceAddress ,
  ) : VkBufferDeviceAddressCreateInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.deviceAddress = deviceAddress

proc mkVkFilterCubicImageViewImageFormatPropertiesEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT,
  pNext: pointer = nil,
  filterCubic: VkBool32 ,
  filterCubicMinmax: VkBool32 ,
  ) : VkFilterCubicImageViewImageFormatPropertiesEXT =
  result.sType = sType
  result.pNext = pNext
  result.filterCubic = filterCubic
  result.filterCubicMinmax = filterCubicMinmax

proc mkVkPhysicalDeviceImagelessFramebufferFeatures*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES,
  pNext: pointer = nil,
  imagelessFramebuffer: VkBool32 ,
  ) : VkPhysicalDeviceImagelessFramebufferFeatures =
  result.sType = sType
  result.pNext = pNext
  result.imagelessFramebuffer = imagelessFramebuffer

proc mkVkFramebufferAttachmentImageInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO,
  pNext: pointer = nil,
  flags: VkImageCreateFlags = 0.VkImageCreateFlags,
  usage: VkImageUsageFlags ,
  width: uint32 ,
  height: uint32 ,
  layerCount: uint32 ,
  viewFormatCount: uint32 = 0.uint32,
  pViewFormats: ptr VkFormat ,
  ) : VkFramebufferAttachmentImageInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.usage = usage
  result.width = width
  result.height = height
  result.layerCount = layerCount
  result.viewFormatCount = viewFormatCount
  result.pViewFormats = pViewFormats

proc mkVkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT,
  pNext: pointer = nil,
  textureCompressionASTC_HDR: VkBool32 ,
  ) : VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT =
  result.sType = sType
  result.pNext = pNext
  result.textureCompressionASTC_HDR = textureCompressionASTC_HDR

proc mkVkPhysicalDeviceCooperativeMatrixFeaturesNV*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV,
  pNext: pointer = nil,
  cooperativeMatrix: VkBool32 ,
  cooperativeMatrixRobustBufferAccess: VkBool32 ,
  ) : VkPhysicalDeviceCooperativeMatrixFeaturesNV =
  result.sType = sType
  result.pNext = pNext
  result.cooperativeMatrix = cooperativeMatrix
  result.cooperativeMatrixRobustBufferAccess = cooperativeMatrixRobustBufferAccess

proc mkVkPhysicalDeviceCooperativeMatrixPropertiesNV*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV,
  pNext: pointer = nil,
  cooperativeMatrixSupportedStages: VkShaderStageFlags ,
  ) : VkPhysicalDeviceCooperativeMatrixPropertiesNV =
  result.sType = sType
  result.pNext = pNext
  result.cooperativeMatrixSupportedStages = cooperativeMatrixSupportedStages

proc mkVkPhysicalDeviceYcbcrImageArraysFeaturesEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT,
  pNext: pointer = nil,
  ycbcrImageArrays: VkBool32 ,
  ) : VkPhysicalDeviceYcbcrImageArraysFeaturesEXT =
  result.sType = sType
  result.pNext = pNext
  result.ycbcrImageArrays = ycbcrImageArrays

proc mkVkImageViewAddressPropertiesNVX*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX,
  pNext: pointer = nil,
  deviceAddress: VkDeviceAddress ,
  size: VkDeviceSize ,
  ) : VkImageViewAddressPropertiesNVX =
  result.sType = sType
  result.pNext = pNext
  result.deviceAddress = deviceAddress
  result.size = size

proc mkVkPipelineCreationFeedbackEXT*(
  flags: VkPipelineCreationFeedbackFlagsEXT ,
  duration: uint64 ,
  ) : VkPipelineCreationFeedbackEXT =
  result.flags = flags
  result.duration = duration

proc mkVkPipelineCreationFeedbackCreateInfoEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT,
  pNext: pointer = nil,
  pPipelineCreationFeedback: ptr VkPipelineCreationFeedbackEXT ,
  pipelineStageCreationFeedbackCount: uint32 ,
  pPipelineStageCreationFeedbacks: ptr VkPipelineCreationFeedbackEXT ,
  ) : VkPipelineCreationFeedbackCreateInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.pPipelineCreationFeedback = pPipelineCreationFeedback
  result.pipelineStageCreationFeedbackCount = pipelineStageCreationFeedbackCount
  result.pPipelineStageCreationFeedbacks = pPipelineStageCreationFeedbacks

proc mkVkSurfaceCapabilitiesFullScreenExclusiveEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT,
  pNext: pointer = nil,
  fullScreenExclusiveSupported: VkBool32 ,
  ) : VkSurfaceCapabilitiesFullScreenExclusiveEXT =
  result.sType = sType
  result.pNext = pNext
  result.fullScreenExclusiveSupported = fullScreenExclusiveSupported

proc mkVkPhysicalDevicePerformanceQueryFeaturesKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR,
  pNext: pointer = nil,
  performanceCounterQueryPools: VkBool32 ,
  performanceCounterMultipleQueryPools: VkBool32 ,
  ) : VkPhysicalDevicePerformanceQueryFeaturesKHR =
  result.sType = sType
  result.pNext = pNext
  result.performanceCounterQueryPools = performanceCounterQueryPools
  result.performanceCounterMultipleQueryPools = performanceCounterMultipleQueryPools

proc mkVkPhysicalDevicePerformanceQueryPropertiesKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR,
  pNext: pointer = nil,
  allowCommandBufferQueryCopies: VkBool32 ,
  ) : VkPhysicalDevicePerformanceQueryPropertiesKHR =
  result.sType = sType
  result.pNext = pNext
  result.allowCommandBufferQueryCopies = allowCommandBufferQueryCopies

proc mkVkPerformanceCounterDescriptionKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR,
  pNext: pointer = nil,
  flags: VkPerformanceCounterDescriptionFlagsKHR = 0.VkPerformanceCounterDescriptionFlagsKHR,
  name: array[VK_MAX_DESCRIPTION_SIZE,char] ,
  category: array[VK_MAX_DESCRIPTION_SIZE,char] ,
  description: array[VK_MAX_DESCRIPTION_SIZE,char] ,
  ) : VkPerformanceCounterDescriptionKHR =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.name = name
  result.category = category
  result.description = description

proc mkVkAcquireProfilingLockInfoKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR,
  pNext: pointer = nil,
  flags: VkAcquireProfilingLockFlagsKHR = 0.VkAcquireProfilingLockFlagsKHR,
  timeout: uint64 ,
  ) : VkAcquireProfilingLockInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.timeout = timeout

proc mkVkHeadlessSurfaceCreateInfoEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT,
  pNext: pointer = nil,
  flags: VkHeadlessSurfaceCreateFlagsEXT = 0.VkHeadlessSurfaceCreateFlagsEXT,
  ) : VkHeadlessSurfaceCreateInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags

proc mkVkPhysicalDeviceCoverageReductionModeFeaturesNV*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV,
  pNext: pointer = nil,
  coverageReductionMode: VkBool32 ,
  ) : VkPhysicalDeviceCoverageReductionModeFeaturesNV =
  result.sType = sType
  result.pNext = pNext
  result.coverageReductionMode = coverageReductionMode

proc mkVkPipelineCoverageReductionStateCreateInfoNV*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV,
  pNext: pointer = nil,
  flags: VkPipelineCoverageReductionStateCreateFlagsNV = 0.VkPipelineCoverageReductionStateCreateFlagsNV,
  coverageReductionMode: VkCoverageReductionModeNV ,
  ) : VkPipelineCoverageReductionStateCreateInfoNV =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.coverageReductionMode = coverageReductionMode

proc mkVkFramebufferMixedSamplesCombinationNV*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV,
  pNext: pointer = nil,
  coverageReductionMode: VkCoverageReductionModeNV ,
  rasterizationSamples: VkSampleCountFlagBits ,
  depthStencilSamples: VkSampleCountFlags ,
  colorSamples: VkSampleCountFlags ,
  ) : VkFramebufferMixedSamplesCombinationNV =
  result.sType = sType
  result.pNext = pNext
  result.coverageReductionMode = coverageReductionMode
  result.rasterizationSamples = rasterizationSamples
  result.depthStencilSamples = depthStencilSamples
  result.colorSamples = colorSamples

proc mkVkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL,
  pNext: pointer = nil,
  shaderIntegerFunctions2: VkBool32 ,
  ) : VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL =
  result.sType = sType
  result.pNext = pNext
  result.shaderIntegerFunctions2 = shaderIntegerFunctions2

proc mkVkPerformanceValueINTEL*(
  `type`: VkPerformanceValueTypeINTEL ,
  data: VkPerformanceValueDataINTEL ,
  ) : VkPerformanceValueINTEL =
  result.`type` = `type`
  result.data = data

proc mkVkPerformanceOverrideInfoINTEL*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL,
  pNext: pointer = nil,
  `type`: VkPerformanceOverrideTypeINTEL ,
  enable: VkBool32 ,
  parameter: uint64 ,
  ) : VkPerformanceOverrideInfoINTEL =
  result.sType = sType
  result.pNext = pNext
  result.`type` = `type`
  result.enable = enable
  result.parameter = parameter

proc mkVkPhysicalDeviceShaderClockFeaturesKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR,
  pNext: pointer = nil,
  shaderSubgroupClock: VkBool32 ,
  shaderDeviceClock: VkBool32 ,
  ) : VkPhysicalDeviceShaderClockFeaturesKHR =
  result.sType = sType
  result.pNext = pNext
  result.shaderSubgroupClock = shaderSubgroupClock
  result.shaderDeviceClock = shaderDeviceClock

proc mkVkPhysicalDeviceIndexTypeUint8FeaturesEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT,
  pNext: pointer = nil,
  indexTypeUint8: VkBool32 ,
  ) : VkPhysicalDeviceIndexTypeUint8FeaturesEXT =
  result.sType = sType
  result.pNext = pNext
  result.indexTypeUint8 = indexTypeUint8

proc mkVkPhysicalDeviceShaderSMBuiltinsFeaturesNV*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV,
  pNext: pointer = nil,
  shaderSMBuiltins: VkBool32 ,
  ) : VkPhysicalDeviceShaderSMBuiltinsFeaturesNV =
  result.sType = sType
  result.pNext = pNext
  result.shaderSMBuiltins = shaderSMBuiltins

proc mkVkPhysicalDeviceFragmentShaderInterlockFeaturesEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT,
  pNext: pointer = nil,
  fragmentShaderSampleInterlock: VkBool32 ,
  fragmentShaderPixelInterlock: VkBool32 ,
  fragmentShaderShadingRateInterlock: VkBool32 ,
  ) : VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT =
  result.sType = sType
  result.pNext = pNext
  result.fragmentShaderSampleInterlock = fragmentShaderSampleInterlock
  result.fragmentShaderPixelInterlock = fragmentShaderPixelInterlock
  result.fragmentShaderShadingRateInterlock = fragmentShaderShadingRateInterlock

proc mkVkPhysicalDeviceSeparateDepthStencilLayoutsFeatures*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES,
  pNext: pointer = nil,
  separateDepthStencilLayouts: VkBool32 ,
  ) : VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures =
  result.sType = sType
  result.pNext = pNext
  result.separateDepthStencilLayouts = separateDepthStencilLayouts

proc mkVkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR,
  pNext: pointer = nil,
  pipelineExecutableInfo: VkBool32 ,
  ) : VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR =
  result.sType = sType
  result.pNext = pNext
  result.pipelineExecutableInfo = pipelineExecutableInfo

proc mkVkPipelineExecutablePropertiesKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR,
  pNext: pointer = nil,
  stages: VkShaderStageFlags ,
  name: array[VK_MAX_DESCRIPTION_SIZE,char] ,
  description: array[VK_MAX_DESCRIPTION_SIZE,char] ,
  subgroupSize: uint32 ,
  ) : VkPipelineExecutablePropertiesKHR =
  result.sType = sType
  result.pNext = pNext
  result.stages = stages
  result.name = name
  result.description = description
  result.subgroupSize = subgroupSize

proc mkVkPipelineExecutableStatisticKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR,
  pNext: pointer = nil,
  name: array[VK_MAX_DESCRIPTION_SIZE,char] ,
  description: array[VK_MAX_DESCRIPTION_SIZE,char] ,
  format: VkPipelineExecutableStatisticFormatKHR ,
  value: VkPipelineExecutableStatisticValueKHR ,
  ) : VkPipelineExecutableStatisticKHR =
  result.sType = sType
  result.pNext = pNext
  result.name = name
  result.description = description
  result.format = format
  result.value = value

proc mkVkPipelineExecutableInternalRepresentationKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR,
  pNext: pointer = nil,
  name: array[VK_MAX_DESCRIPTION_SIZE,char] ,
  description: array[VK_MAX_DESCRIPTION_SIZE,char] ,
  isText: VkBool32 ,
  dataSize: uint = 0.uint,
  pData: pointer = nil,
  ) : VkPipelineExecutableInternalRepresentationKHR =
  result.sType = sType
  result.pNext = pNext
  result.name = name
  result.description = description
  result.isText = isText
  result.dataSize = dataSize
  result.pData = pData

proc mkVkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT,
  pNext: pointer = nil,
  shaderDemoteToHelperInvocation: VkBool32 ,
  ) : VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT =
  result.sType = sType
  result.pNext = pNext
  result.shaderDemoteToHelperInvocation = shaderDemoteToHelperInvocation

proc mkVkPhysicalDeviceTexelBufferAlignmentFeaturesEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT,
  pNext: pointer = nil,
  texelBufferAlignment: VkBool32 ,
  ) : VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT =
  result.sType = sType
  result.pNext = pNext
  result.texelBufferAlignment = texelBufferAlignment

proc mkVkPhysicalDeviceTexelBufferAlignmentPropertiesEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT,
  pNext: pointer = nil,
  storageTexelBufferOffsetAlignmentBytes: VkDeviceSize ,
  storageTexelBufferOffsetSingleTexelAlignment: VkBool32 ,
  uniformTexelBufferOffsetAlignmentBytes: VkDeviceSize ,
  uniformTexelBufferOffsetSingleTexelAlignment: VkBool32 ,
  ) : VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT =
  result.sType = sType
  result.pNext = pNext
  result.storageTexelBufferOffsetAlignmentBytes = storageTexelBufferOffsetAlignmentBytes
  result.storageTexelBufferOffsetSingleTexelAlignment = storageTexelBufferOffsetSingleTexelAlignment
  result.uniformTexelBufferOffsetAlignmentBytes = uniformTexelBufferOffsetAlignmentBytes
  result.uniformTexelBufferOffsetSingleTexelAlignment = uniformTexelBufferOffsetSingleTexelAlignment

proc mkVkPhysicalDeviceSubgroupSizeControlFeaturesEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT,
  pNext: pointer = nil,
  subgroupSizeControl: VkBool32 ,
  computeFullSubgroups: VkBool32 ,
  ) : VkPhysicalDeviceSubgroupSizeControlFeaturesEXT =
  result.sType = sType
  result.pNext = pNext
  result.subgroupSizeControl = subgroupSizeControl
  result.computeFullSubgroups = computeFullSubgroups

proc mkVkPhysicalDeviceSubgroupSizeControlPropertiesEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT,
  pNext: pointer = nil,
  minSubgroupSize: uint32 ,
  maxSubgroupSize: uint32 ,
  maxComputeWorkgroupSubgroups: uint32 ,
  requiredSubgroupSizeStages: VkShaderStageFlags ,
  ) : VkPhysicalDeviceSubgroupSizeControlPropertiesEXT =
  result.sType = sType
  result.pNext = pNext
  result.minSubgroupSize = minSubgroupSize
  result.maxSubgroupSize = maxSubgroupSize
  result.maxComputeWorkgroupSubgroups = maxComputeWorkgroupSubgroups
  result.requiredSubgroupSizeStages = requiredSubgroupSizeStages

proc mkVkPhysicalDeviceLineRasterizationFeaturesEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT,
  pNext: pointer = nil,
  rectangularLines: VkBool32 ,
  bresenhamLines: VkBool32 ,
  smoothLines: VkBool32 ,
  stippledRectangularLines: VkBool32 ,
  stippledBresenhamLines: VkBool32 ,
  stippledSmoothLines: VkBool32 ,
  ) : VkPhysicalDeviceLineRasterizationFeaturesEXT =
  result.sType = sType
  result.pNext = pNext
  result.rectangularLines = rectangularLines
  result.bresenhamLines = bresenhamLines
  result.smoothLines = smoothLines
  result.stippledRectangularLines = stippledRectangularLines
  result.stippledBresenhamLines = stippledBresenhamLines
  result.stippledSmoothLines = stippledSmoothLines

proc mkVkPipelineRasterizationLineStateCreateInfoEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT,
  pNext: pointer = nil,
  lineRasterizationMode: VkLineRasterizationModeEXT ,
  stippledLineEnable: VkBool32 ,
  lineStippleFactor: uint32 = 0.uint32,
  lineStipplePattern: uint16 = 0.uint16,
  ) : VkPipelineRasterizationLineStateCreateInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.lineRasterizationMode = lineRasterizationMode
  result.stippledLineEnable = stippledLineEnable
  result.lineStippleFactor = lineStippleFactor
  result.lineStipplePattern = lineStipplePattern

proc mkVkPhysicalDevicePipelineCreationCacheControlFeaturesEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT,
  pNext: pointer = nil,
  pipelineCreationCacheControl: VkBool32 ,
  ) : VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT =
  result.sType = sType
  result.pNext = pNext
  result.pipelineCreationCacheControl = pipelineCreationCacheControl

proc mkVkPhysicalDeviceVulkan11Features*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES,
  pNext: pointer = nil,
  storageBuffer16BitAccess: VkBool32 ,
  uniformAndStorageBuffer16BitAccess: VkBool32 ,
  storagePushConstant16: VkBool32 ,
  storageInputOutput16: VkBool32 ,
  multiview: VkBool32 ,
  multiviewGeometryShader: VkBool32 ,
  multiviewTessellationShader: VkBool32 ,
  variablePointersStorageBuffer: VkBool32 ,
  variablePointers: VkBool32 ,
  protectedMemory: VkBool32 ,
  samplerYcbcrConversion: VkBool32 ,
  shaderDrawParameters: VkBool32 ,
  ) : VkPhysicalDeviceVulkan11Features =
  result.sType = sType
  result.pNext = pNext
  result.storageBuffer16BitAccess = storageBuffer16BitAccess
  result.uniformAndStorageBuffer16BitAccess = uniformAndStorageBuffer16BitAccess
  result.storagePushConstant16 = storagePushConstant16
  result.storageInputOutput16 = storageInputOutput16
  result.multiview = multiview
  result.multiviewGeometryShader = multiviewGeometryShader
  result.multiviewTessellationShader = multiviewTessellationShader
  result.variablePointersStorageBuffer = variablePointersStorageBuffer
  result.variablePointers = variablePointers
  result.protectedMemory = protectedMemory
  result.samplerYcbcrConversion = samplerYcbcrConversion
  result.shaderDrawParameters = shaderDrawParameters

proc mkVkPhysicalDeviceVulkan11Properties*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES,
  pNext: pointer = nil,
  deviceUUID: array[VK_UUID_SIZE,uint8] ,
  driverUUID: array[VK_UUID_SIZE,uint8] ,
  deviceLUID: array[VK_LUID_SIZE,uint8] ,
  deviceNodeMask: uint32 ,
  deviceLUIDValid: VkBool32 ,
  subgroupSize: uint32 ,
  subgroupSupportedStages: VkShaderStageFlags ,
  subgroupSupportedOperations: VkSubgroupFeatureFlags ,
  subgroupQuadOperationsInAllStages: VkBool32 ,
  pointClippingBehavior: VkPointClippingBehavior ,
  maxMultiviewViewCount: uint32 ,
  maxMultiviewInstanceIndex: uint32 ,
  protectedNoFault: VkBool32 ,
  maxPerSetDescriptors: uint32 ,
  maxMemoryAllocationSize: VkDeviceSize ,
  ) : VkPhysicalDeviceVulkan11Properties =
  result.sType = sType
  result.pNext = pNext
  result.deviceUUID = deviceUUID
  result.driverUUID = driverUUID
  result.deviceLUID = deviceLUID
  result.deviceNodeMask = deviceNodeMask
  result.deviceLUIDValid = deviceLUIDValid
  result.subgroupSize = subgroupSize
  result.subgroupSupportedStages = subgroupSupportedStages
  result.subgroupSupportedOperations = subgroupSupportedOperations
  result.subgroupQuadOperationsInAllStages = subgroupQuadOperationsInAllStages
  result.pointClippingBehavior = pointClippingBehavior
  result.maxMultiviewViewCount = maxMultiviewViewCount
  result.maxMultiviewInstanceIndex = maxMultiviewInstanceIndex
  result.protectedNoFault = protectedNoFault
  result.maxPerSetDescriptors = maxPerSetDescriptors
  result.maxMemoryAllocationSize = maxMemoryAllocationSize

proc mkVkPhysicalDeviceVulkan12Features*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES,
  pNext: pointer = nil,
  samplerMirrorClampToEdge: VkBool32 ,
  drawIndirectCount: VkBool32 ,
  storageBuffer8BitAccess: VkBool32 ,
  uniformAndStorageBuffer8BitAccess: VkBool32 ,
  storagePushConstant8: VkBool32 ,
  shaderBufferInt64Atomics: VkBool32 ,
  shaderSharedInt64Atomics: VkBool32 ,
  shaderFloat16: VkBool32 ,
  shaderInt8: VkBool32 ,
  descriptorIndexing: VkBool32 ,
  shaderInputAttachmentArrayDynamicIndexing: VkBool32 ,
  shaderUniformTexelBufferArrayDynamicIndexing: VkBool32 ,
  shaderStorageTexelBufferArrayDynamicIndexing: VkBool32 ,
  shaderUniformBufferArrayNonUniformIndexing: VkBool32 ,
  shaderSampledImageArrayNonUniformIndexing: VkBool32 ,
  shaderStorageBufferArrayNonUniformIndexing: VkBool32 ,
  shaderStorageImageArrayNonUniformIndexing: VkBool32 ,
  shaderInputAttachmentArrayNonUniformIndexing: VkBool32 ,
  shaderUniformTexelBufferArrayNonUniformIndexing: VkBool32 ,
  shaderStorageTexelBufferArrayNonUniformIndexing: VkBool32 ,
  descriptorBindingUniformBufferUpdateAfterBind: VkBool32 ,
  descriptorBindingSampledImageUpdateAfterBind: VkBool32 ,
  descriptorBindingStorageImageUpdateAfterBind: VkBool32 ,
  descriptorBindingStorageBufferUpdateAfterBind: VkBool32 ,
  descriptorBindingUniformTexelBufferUpdateAfterBind: VkBool32 ,
  descriptorBindingStorageTexelBufferUpdateAfterBind: VkBool32 ,
  descriptorBindingUpdateUnusedWhilePending: VkBool32 ,
  descriptorBindingPartiallyBound: VkBool32 ,
  descriptorBindingVariableDescriptorCount: VkBool32 ,
  runtimeDescriptorArray: VkBool32 ,
  samplerFilterMinmax: VkBool32 ,
  scalarBlockLayout: VkBool32 ,
  imagelessFramebuffer: VkBool32 ,
  uniformBufferStandardLayout: VkBool32 ,
  shaderSubgroupExtendedTypes: VkBool32 ,
  separateDepthStencilLayouts: VkBool32 ,
  hostQueryReset: VkBool32 ,
  timelineSemaphore: VkBool32 ,
  bufferDeviceAddress: VkBool32 ,
  bufferDeviceAddressCaptureReplay: VkBool32 ,
  bufferDeviceAddressMultiDevice: VkBool32 ,
  vulkanMemoryModel: VkBool32 ,
  vulkanMemoryModelDeviceScope: VkBool32 ,
  vulkanMemoryModelAvailabilityVisibilityChains: VkBool32 ,
  shaderOutputViewportIndex: VkBool32 ,
  shaderOutputLayer: VkBool32 ,
  subgroupBroadcastDynamicId: VkBool32 ,
  ) : VkPhysicalDeviceVulkan12Features =
  result.sType = sType
  result.pNext = pNext
  result.samplerMirrorClampToEdge = samplerMirrorClampToEdge
  result.drawIndirectCount = drawIndirectCount
  result.storageBuffer8BitAccess = storageBuffer8BitAccess
  result.uniformAndStorageBuffer8BitAccess = uniformAndStorageBuffer8BitAccess
  result.storagePushConstant8 = storagePushConstant8
  result.shaderBufferInt64Atomics = shaderBufferInt64Atomics
  result.shaderSharedInt64Atomics = shaderSharedInt64Atomics
  result.shaderFloat16 = shaderFloat16
  result.shaderInt8 = shaderInt8
  result.descriptorIndexing = descriptorIndexing
  result.shaderInputAttachmentArrayDynamicIndexing = shaderInputAttachmentArrayDynamicIndexing
  result.shaderUniformTexelBufferArrayDynamicIndexing = shaderUniformTexelBufferArrayDynamicIndexing
  result.shaderStorageTexelBufferArrayDynamicIndexing = shaderStorageTexelBufferArrayDynamicIndexing
  result.shaderUniformBufferArrayNonUniformIndexing = shaderUniformBufferArrayNonUniformIndexing
  result.shaderSampledImageArrayNonUniformIndexing = shaderSampledImageArrayNonUniformIndexing
  result.shaderStorageBufferArrayNonUniformIndexing = shaderStorageBufferArrayNonUniformIndexing
  result.shaderStorageImageArrayNonUniformIndexing = shaderStorageImageArrayNonUniformIndexing
  result.shaderInputAttachmentArrayNonUniformIndexing = shaderInputAttachmentArrayNonUniformIndexing
  result.shaderUniformTexelBufferArrayNonUniformIndexing = shaderUniformTexelBufferArrayNonUniformIndexing
  result.shaderStorageTexelBufferArrayNonUniformIndexing = shaderStorageTexelBufferArrayNonUniformIndexing
  result.descriptorBindingUniformBufferUpdateAfterBind = descriptorBindingUniformBufferUpdateAfterBind
  result.descriptorBindingSampledImageUpdateAfterBind = descriptorBindingSampledImageUpdateAfterBind
  result.descriptorBindingStorageImageUpdateAfterBind = descriptorBindingStorageImageUpdateAfterBind
  result.descriptorBindingStorageBufferUpdateAfterBind = descriptorBindingStorageBufferUpdateAfterBind
  result.descriptorBindingUniformTexelBufferUpdateAfterBind = descriptorBindingUniformTexelBufferUpdateAfterBind
  result.descriptorBindingStorageTexelBufferUpdateAfterBind = descriptorBindingStorageTexelBufferUpdateAfterBind
  result.descriptorBindingUpdateUnusedWhilePending = descriptorBindingUpdateUnusedWhilePending
  result.descriptorBindingPartiallyBound = descriptorBindingPartiallyBound
  result.descriptorBindingVariableDescriptorCount = descriptorBindingVariableDescriptorCount
  result.runtimeDescriptorArray = runtimeDescriptorArray
  result.samplerFilterMinmax = samplerFilterMinmax
  result.scalarBlockLayout = scalarBlockLayout
  result.imagelessFramebuffer = imagelessFramebuffer
  result.uniformBufferStandardLayout = uniformBufferStandardLayout
  result.shaderSubgroupExtendedTypes = shaderSubgroupExtendedTypes
  result.separateDepthStencilLayouts = separateDepthStencilLayouts
  result.hostQueryReset = hostQueryReset
  result.timelineSemaphore = timelineSemaphore
  result.bufferDeviceAddress = bufferDeviceAddress
  result.bufferDeviceAddressCaptureReplay = bufferDeviceAddressCaptureReplay
  result.bufferDeviceAddressMultiDevice = bufferDeviceAddressMultiDevice
  result.vulkanMemoryModel = vulkanMemoryModel
  result.vulkanMemoryModelDeviceScope = vulkanMemoryModelDeviceScope
  result.vulkanMemoryModelAvailabilityVisibilityChains = vulkanMemoryModelAvailabilityVisibilityChains
  result.shaderOutputViewportIndex = shaderOutputViewportIndex
  result.shaderOutputLayer = shaderOutputLayer
  result.subgroupBroadcastDynamicId = subgroupBroadcastDynamicId

proc mkVkPhysicalDeviceVulkan12Properties*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES,
  pNext: pointer = nil,
  driverID: VkDriverId ,
  driverName: array[VK_MAX_DRIVER_NAME_SIZE,char] ,
  driverInfo: array[VK_MAX_DRIVER_INFO_SIZE,char] ,
  conformanceVersion: VkConformanceVersion ,
  denormBehaviorIndependence: VkShaderFloatControlsIndependence ,
  roundingModeIndependence: VkShaderFloatControlsIndependence ,
  shaderSignedZeroInfNanPreserveFloat16: VkBool32 ,
  shaderSignedZeroInfNanPreserveFloat32: VkBool32 ,
  shaderSignedZeroInfNanPreserveFloat64: VkBool32 ,
  shaderDenormPreserveFloat16: VkBool32 ,
  shaderDenormPreserveFloat32: VkBool32 ,
  shaderDenormPreserveFloat64: VkBool32 ,
  shaderDenormFlushToZeroFloat16: VkBool32 ,
  shaderDenormFlushToZeroFloat32: VkBool32 ,
  shaderDenormFlushToZeroFloat64: VkBool32 ,
  shaderRoundingModeRTEFloat16: VkBool32 ,
  shaderRoundingModeRTEFloat32: VkBool32 ,
  shaderRoundingModeRTEFloat64: VkBool32 ,
  shaderRoundingModeRTZFloat16: VkBool32 ,
  shaderRoundingModeRTZFloat32: VkBool32 ,
  shaderRoundingModeRTZFloat64: VkBool32 ,
  maxUpdateAfterBindDescriptorsInAllPools: uint32 ,
  shaderUniformBufferArrayNonUniformIndexingNative: VkBool32 ,
  shaderSampledImageArrayNonUniformIndexingNative: VkBool32 ,
  shaderStorageBufferArrayNonUniformIndexingNative: VkBool32 ,
  shaderStorageImageArrayNonUniformIndexingNative: VkBool32 ,
  shaderInputAttachmentArrayNonUniformIndexingNative: VkBool32 ,
  robustBufferAccessUpdateAfterBind: VkBool32 ,
  quadDivergentImplicitLod: VkBool32 ,
  maxPerStageDescriptorUpdateAfterBindSamplers: uint32 ,
  maxPerStageDescriptorUpdateAfterBindUniformBuffers: uint32 ,
  maxPerStageDescriptorUpdateAfterBindStorageBuffers: uint32 ,
  maxPerStageDescriptorUpdateAfterBindSampledImages: uint32 ,
  maxPerStageDescriptorUpdateAfterBindStorageImages: uint32 ,
  maxPerStageDescriptorUpdateAfterBindInputAttachments: uint32 ,
  maxPerStageUpdateAfterBindResources: uint32 ,
  maxDescriptorSetUpdateAfterBindSamplers: uint32 ,
  maxDescriptorSetUpdateAfterBindUniformBuffers: uint32 ,
  maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: uint32 ,
  maxDescriptorSetUpdateAfterBindStorageBuffers: uint32 ,
  maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: uint32 ,
  maxDescriptorSetUpdateAfterBindSampledImages: uint32 ,
  maxDescriptorSetUpdateAfterBindStorageImages: uint32 ,
  maxDescriptorSetUpdateAfterBindInputAttachments: uint32 ,
  supportedDepthResolveModes: VkResolveModeFlags ,
  supportedStencilResolveModes: VkResolveModeFlags ,
  independentResolveNone: VkBool32 ,
  independentResolve: VkBool32 ,
  filterMinmaxSingleComponentFormats: VkBool32 ,
  filterMinmaxImageComponentMapping: VkBool32 ,
  maxTimelineSemaphoreValueDifference: uint64 ,
  framebufferIntegerColorSampleCounts: VkSampleCountFlags = 0.VkSampleCountFlags,
  ) : VkPhysicalDeviceVulkan12Properties =
  result.sType = sType
  result.pNext = pNext
  result.driverID = driverID
  result.driverName = driverName
  result.driverInfo = driverInfo
  result.conformanceVersion = conformanceVersion
  result.denormBehaviorIndependence = denormBehaviorIndependence
  result.roundingModeIndependence = roundingModeIndependence
  result.shaderSignedZeroInfNanPreserveFloat16 = shaderSignedZeroInfNanPreserveFloat16
  result.shaderSignedZeroInfNanPreserveFloat32 = shaderSignedZeroInfNanPreserveFloat32
  result.shaderSignedZeroInfNanPreserveFloat64 = shaderSignedZeroInfNanPreserveFloat64
  result.shaderDenormPreserveFloat16 = shaderDenormPreserveFloat16
  result.shaderDenormPreserveFloat32 = shaderDenormPreserveFloat32
  result.shaderDenormPreserveFloat64 = shaderDenormPreserveFloat64
  result.shaderDenormFlushToZeroFloat16 = shaderDenormFlushToZeroFloat16
  result.shaderDenormFlushToZeroFloat32 = shaderDenormFlushToZeroFloat32
  result.shaderDenormFlushToZeroFloat64 = shaderDenormFlushToZeroFloat64
  result.shaderRoundingModeRTEFloat16 = shaderRoundingModeRTEFloat16
  result.shaderRoundingModeRTEFloat32 = shaderRoundingModeRTEFloat32
  result.shaderRoundingModeRTEFloat64 = shaderRoundingModeRTEFloat64
  result.shaderRoundingModeRTZFloat16 = shaderRoundingModeRTZFloat16
  result.shaderRoundingModeRTZFloat32 = shaderRoundingModeRTZFloat32
  result.shaderRoundingModeRTZFloat64 = shaderRoundingModeRTZFloat64
  result.maxUpdateAfterBindDescriptorsInAllPools = maxUpdateAfterBindDescriptorsInAllPools
  result.shaderUniformBufferArrayNonUniformIndexingNative = shaderUniformBufferArrayNonUniformIndexingNative
  result.shaderSampledImageArrayNonUniformIndexingNative = shaderSampledImageArrayNonUniformIndexingNative
  result.shaderStorageBufferArrayNonUniformIndexingNative = shaderStorageBufferArrayNonUniformIndexingNative
  result.shaderStorageImageArrayNonUniformIndexingNative = shaderStorageImageArrayNonUniformIndexingNative
  result.shaderInputAttachmentArrayNonUniformIndexingNative = shaderInputAttachmentArrayNonUniformIndexingNative
  result.robustBufferAccessUpdateAfterBind = robustBufferAccessUpdateAfterBind
  result.quadDivergentImplicitLod = quadDivergentImplicitLod
  result.maxPerStageDescriptorUpdateAfterBindSamplers = maxPerStageDescriptorUpdateAfterBindSamplers
  result.maxPerStageDescriptorUpdateAfterBindUniformBuffers = maxPerStageDescriptorUpdateAfterBindUniformBuffers
  result.maxPerStageDescriptorUpdateAfterBindStorageBuffers = maxPerStageDescriptorUpdateAfterBindStorageBuffers
  result.maxPerStageDescriptorUpdateAfterBindSampledImages = maxPerStageDescriptorUpdateAfterBindSampledImages
  result.maxPerStageDescriptorUpdateAfterBindStorageImages = maxPerStageDescriptorUpdateAfterBindStorageImages
  result.maxPerStageDescriptorUpdateAfterBindInputAttachments = maxPerStageDescriptorUpdateAfterBindInputAttachments
  result.maxPerStageUpdateAfterBindResources = maxPerStageUpdateAfterBindResources
  result.maxDescriptorSetUpdateAfterBindSamplers = maxDescriptorSetUpdateAfterBindSamplers
  result.maxDescriptorSetUpdateAfterBindUniformBuffers = maxDescriptorSetUpdateAfterBindUniformBuffers
  result.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic = maxDescriptorSetUpdateAfterBindUniformBuffersDynamic
  result.maxDescriptorSetUpdateAfterBindStorageBuffers = maxDescriptorSetUpdateAfterBindStorageBuffers
  result.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic = maxDescriptorSetUpdateAfterBindStorageBuffersDynamic
  result.maxDescriptorSetUpdateAfterBindSampledImages = maxDescriptorSetUpdateAfterBindSampledImages
  result.maxDescriptorSetUpdateAfterBindStorageImages = maxDescriptorSetUpdateAfterBindStorageImages
  result.maxDescriptorSetUpdateAfterBindInputAttachments = maxDescriptorSetUpdateAfterBindInputAttachments
  result.supportedDepthResolveModes = supportedDepthResolveModes
  result.supportedStencilResolveModes = supportedStencilResolveModes
  result.independentResolveNone = independentResolveNone
  result.independentResolve = independentResolve
  result.filterMinmaxSingleComponentFormats = filterMinmaxSingleComponentFormats
  result.filterMinmaxImageComponentMapping = filterMinmaxImageComponentMapping
  result.maxTimelineSemaphoreValueDifference = maxTimelineSemaphoreValueDifference
  result.framebufferIntegerColorSampleCounts = framebufferIntegerColorSampleCounts

proc mkVkPipelineCompilerControlCreateInfoAMD*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD,
  pNext: pointer = nil,
  compilerControlFlags: VkPipelineCompilerControlFlagsAMD = 0.VkPipelineCompilerControlFlagsAMD,
  ) : VkPipelineCompilerControlCreateInfoAMD =
  result.sType = sType
  result.pNext = pNext
  result.compilerControlFlags = compilerControlFlags

proc mkVkPhysicalDeviceCoherentMemoryFeaturesAMD*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD,
  pNext: pointer = nil,
  deviceCoherentMemory: VkBool32 ,
  ) : VkPhysicalDeviceCoherentMemoryFeaturesAMD =
  result.sType = sType
  result.pNext = pNext
  result.deviceCoherentMemory = deviceCoherentMemory

proc mkVkPhysicalDeviceToolPropertiesEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT,
  pNext: pointer = nil,
  name: array[VK_MAX_EXTENSION_NAME_SIZE,char] ,
  version: array[VK_MAX_EXTENSION_NAME_SIZE,char] ,
  purposes: VkToolPurposeFlagsEXT ,
  description: array[VK_MAX_DESCRIPTION_SIZE,char] ,
  layer: array[VK_MAX_EXTENSION_NAME_SIZE,char] ,
  ) : VkPhysicalDeviceToolPropertiesEXT =
  result.sType = sType
  result.pNext = pNext
  result.name = name
  result.version = version
  result.purposes = purposes
  result.description = description
  result.layer = layer

proc mkVkPhysicalDeviceCustomBorderColorFeaturesEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT,
  pNext: pointer = nil,
  customBorderColors: VkBool32 ,
  customBorderColorWithoutFormat: VkBool32 ,
  ) : VkPhysicalDeviceCustomBorderColorFeaturesEXT =
  result.sType = sType
  result.pNext = pNext
  result.customBorderColors = customBorderColors
  result.customBorderColorWithoutFormat = customBorderColorWithoutFormat

proc mkVkAccelerationStructureGeometryTrianglesDataKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR,
  pNext: pointer = nil,
  vertexFormat: VkFormat ,
  vertexData: VkDeviceOrHostAddressConstKHR ,
  vertexStride: VkDeviceSize ,
  indexType: VkIndexType ,
  indexData: VkDeviceOrHostAddressConstKHR = VkDeviceOrHostAddressConstKHR(deviceAddress: 0.VkDeviceAddress),
  transformData: VkDeviceOrHostAddressConstKHR = VkDeviceOrHostAddressConstKHR(deviceAddress: 0.VkDeviceAddress),
  ) : VkAccelerationStructureGeometryTrianglesDataKHR =
  result.sType = sType
  result.pNext = pNext
  result.vertexFormat = vertexFormat
  result.vertexData = vertexData
  result.vertexStride = vertexStride
  result.indexType = indexType
  result.indexData = indexData
  result.transformData = transformData

proc mkVkAccelerationStructureGeometryAabbsDataKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR,
  pNext: pointer = nil,
  data: VkDeviceOrHostAddressConstKHR ,
  stride: VkDeviceSize ,
  ) : VkAccelerationStructureGeometryAabbsDataKHR =
  result.sType = sType
  result.pNext = pNext
  result.data = data
  result.stride = stride

proc mkVkAccelerationStructureGeometryInstancesDataKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR,
  pNext: pointer = nil,
  arrayOfPointers: VkBool32 ,
  data: VkDeviceOrHostAddressConstKHR ,
  ) : VkAccelerationStructureGeometryInstancesDataKHR =
  result.sType = sType
  result.pNext = pNext
  result.arrayOfPointers = arrayOfPointers
  result.data = data

proc mkVkAccelerationStructureGeometryKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR,
  pNext: pointer = nil,
  geometryType: VkGeometryTypeKHR ,
  geometry: VkAccelerationStructureGeometryDataKHR ,
  flags: VkGeometryFlagsKHR = 0.VkGeometryFlagsKHR,
  ) : VkAccelerationStructureGeometryKHR =
  result.sType = sType
  result.pNext = pNext
  result.geometryType = geometryType
  result.geometry = geometry
  result.flags = flags

proc mkVkAccelerationStructureBuildGeometryInfoKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR,
  pNext: pointer = nil,
  `type`: VkAccelerationStructureTypeKHR ,
  flags: VkBuildAccelerationStructureFlagsKHR = 0.VkBuildAccelerationStructureFlagsKHR,
  update: VkBool32 ,
  srcAccelerationStructure: VkAccelerationStructureKHR = nil,
  dstAccelerationStructure: VkAccelerationStructureKHR ,
  geometryArrayOfPointers: VkBool32 ,
  geometryCount: uint32 = 0.uint32,
  ppGeometries: ptr ptr VkAccelerationStructureGeometryKHR ,
  scratchData: VkDeviceOrHostAddressKHR ,
  ) : VkAccelerationStructureBuildGeometryInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.`type` = `type`
  result.flags = flags
  result.update = update
  result.srcAccelerationStructure = srcAccelerationStructure
  result.dstAccelerationStructure = dstAccelerationStructure
  result.geometryArrayOfPointers = geometryArrayOfPointers
  result.geometryCount = geometryCount
  result.ppGeometries = ppGeometries
  result.scratchData = scratchData

proc mkVkAccelerationStructureCreateGeometryTypeInfoKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_GEOMETRY_TYPE_INFO_KHR,
  pNext: pointer = nil,
  geometryType: VkGeometryTypeKHR ,
  maxPrimitiveCount: uint32 ,
  indexType: VkIndexType ,
  maxVertexCount: uint32 = 0.uint32,
  vertexFormat: VkFormat = 0.VkFormat,
  allowsTransforms: VkBool32 = 0.VkBool32,
  ) : VkAccelerationStructureCreateGeometryTypeInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.geometryType = geometryType
  result.maxPrimitiveCount = maxPrimitiveCount
  result.indexType = indexType
  result.maxVertexCount = maxVertexCount
  result.vertexFormat = vertexFormat
  result.allowsTransforms = allowsTransforms

proc mkVkAccelerationStructureCreateInfoKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR,
  pNext: pointer = nil,
  compactedSize: VkDeviceSize ,
  `type`: VkAccelerationStructureTypeKHR ,
  flags: VkBuildAccelerationStructureFlagsKHR = 0.VkBuildAccelerationStructureFlagsKHR,
  maxGeometryCount: uint32 = 0.uint32,
  pGeometryInfos: ptr VkAccelerationStructureCreateGeometryTypeInfoKHR ,
  deviceAddress: VkDeviceAddress = 0.VkDeviceAddress,
  ) : VkAccelerationStructureCreateInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.compactedSize = compactedSize
  result.`type` = `type`
  result.flags = flags
  result.maxGeometryCount = maxGeometryCount
  result.pGeometryInfos = pGeometryInfos
  result.deviceAddress = deviceAddress

proc mkVkAccelerationStructureInstanceKHR*(
  transform: VkTransformMatrixKHR ,
  instanceCustomIndex: uint32 ,
  mask: uint32 ,
  instanceShaderBindingTableRecordOffset: uint32 ,
  flags: VkGeometryInstanceFlagsKHR = 0.VkGeometryInstanceFlagsKHR,
  accelerationStructureReference: uint64 ,
  ) : VkAccelerationStructureInstanceKHR =
  result.transform = transform
  result.instanceCustomIndex = instanceCustomIndex
  result.mask = mask
  result.instanceShaderBindingTableRecordOffset = instanceShaderBindingTableRecordOffset
  result.flags = flags
  result.accelerationStructureReference = accelerationStructureReference

proc mkVkCopyAccelerationStructureToMemoryInfoKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR,
  pNext: pointer = nil,
  src: VkAccelerationStructureKHR ,
  dst: VkDeviceOrHostAddressKHR ,
  mode: VkCopyAccelerationStructureModeKHR ,
  ) : VkCopyAccelerationStructureToMemoryInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.src = src
  result.dst = dst
  result.mode = mode

proc mkVkCopyMemoryToAccelerationStructureInfoKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR,
  pNext: pointer = nil,
  src: VkDeviceOrHostAddressConstKHR ,
  dst: VkAccelerationStructureKHR ,
  mode: VkCopyAccelerationStructureModeKHR ,
  ) : VkCopyMemoryToAccelerationStructureInfoKHR =
  result.sType = sType
  result.pNext = pNext
  result.src = src
  result.dst = dst
  result.mode = mode

proc mkVkPhysicalDeviceExtendedDynamicStateFeaturesEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT,
  pNext: pointer = nil,
  extendedDynamicState: VkBool32 ,
  ) : VkPhysicalDeviceExtendedDynamicStateFeaturesEXT =
  result.sType = sType
  result.pNext = pNext
  result.extendedDynamicState = extendedDynamicState

proc mkVkPhysicalDeviceDiagnosticsConfigFeaturesNV*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV,
  pNext: pointer = nil,
  diagnosticsConfig: VkBool32 ,
  ) : VkPhysicalDeviceDiagnosticsConfigFeaturesNV =
  result.sType = sType
  result.pNext = pNext
  result.diagnosticsConfig = diagnosticsConfig

proc mkVkDeviceDiagnosticsConfigCreateInfoNV*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV,
  pNext: pointer = nil,
  flags: VkDeviceDiagnosticsConfigFlagsNV = 0.VkDeviceDiagnosticsConfigFlagsNV,
  ) : VkDeviceDiagnosticsConfigCreateInfoNV =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags

proc mkVkPhysicalDeviceRobustness2FeaturesEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT,
  pNext: pointer = nil,
  robustBufferAccess2: VkBool32 ,
  robustImageAccess2: VkBool32 ,
  nullDescriptor: VkBool32 ,
  ) : VkPhysicalDeviceRobustness2FeaturesEXT =
  result.sType = sType
  result.pNext = pNext
  result.robustBufferAccess2 = robustBufferAccess2
  result.robustImageAccess2 = robustImageAccess2
  result.nullDescriptor = nullDescriptor

proc mkVkPhysicalDeviceRobustness2PropertiesEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT,
  pNext: pointer = nil,
  robustStorageBufferAccessSizeAlignment: VkDeviceSize ,
  robustUniformBufferAccessSizeAlignment: VkDeviceSize ,
  ) : VkPhysicalDeviceRobustness2PropertiesEXT =
  result.sType = sType
  result.pNext = pNext
  result.robustStorageBufferAccessSizeAlignment = robustStorageBufferAccessSizeAlignment
  result.robustUniformBufferAccessSizeAlignment = robustUniformBufferAccessSizeAlignment

proc mkVkPhysicalDeviceImageRobustnessFeaturesEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT,
  pNext: pointer = nil,
  robustImageAccess: VkBool32 ,
  ) : VkPhysicalDeviceImageRobustnessFeaturesEXT =
  result.sType = sType
  result.pNext = pNext
  result.robustImageAccess = robustImageAccess

proc mkVkPhysicalDevice4444FormatsFeaturesEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT,
  pNext: pointer = nil,
  formatA4R4G4B4: VkBool32 ,
  formatA4B4G4R4: VkBool32 ,
  ) : VkPhysicalDevice4444FormatsFeaturesEXT =
  result.sType = sType
  result.pNext = pNext
  result.formatA4R4G4B4 = formatA4R4G4B4
  result.formatA4B4G4R4 = formatA4B4G4R4

proc mkVkPhysicalDeviceProperties*(
  apiVersion: uint32 ,
  driverVersion: uint32 ,
  vendorID: uint32 ,
  deviceID: uint32 ,
  deviceType: VkPhysicalDeviceType ,
  deviceName: array[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE,char] ,
  pipelineCacheUUID: array[VK_UUID_SIZE,uint8] ,
  limits: VkPhysicalDeviceLimits ,
  sparseProperties: VkPhysicalDeviceSparseProperties ,
  ) : VkPhysicalDeviceProperties =
  result.apiVersion = apiVersion
  result.driverVersion = driverVersion
  result.vendorID = vendorID
  result.deviceID = deviceID
  result.deviceType = deviceType
  result.deviceName = deviceName
  result.pipelineCacheUUID = pipelineCacheUUID
  result.limits = limits
  result.sparseProperties = sparseProperties

proc mkVkDeviceCreateInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO,
  pNext: pointer = nil,
  flags: VkDeviceCreateFlags = 0.VkDeviceCreateFlags,
  queueCreateInfoCount: uint32 ,
  pQueueCreateInfos: ptr VkDeviceQueueCreateInfo ,
  enabledLayerCount: uint32 = 0.uint32,
  ppEnabledLayerNames: ptr ptr char ,
  enabledExtensionCount: uint32 = 0.uint32,
  ppEnabledExtensionNames: ptr ptr char ,
  pEnabledFeatures: ptr VkPhysicalDeviceFeatures = nil,
  ) : VkDeviceCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.queueCreateInfoCount = queueCreateInfoCount
  result.pQueueCreateInfos = pQueueCreateInfos
  result.enabledLayerCount = enabledLayerCount
  result.ppEnabledLayerNames = ppEnabledLayerNames
  result.enabledExtensionCount = enabledExtensionCount
  result.ppEnabledExtensionNames = ppEnabledExtensionNames
  result.pEnabledFeatures = pEnabledFeatures

proc mkVkPhysicalDeviceMemoryProperties*(
  memoryTypeCount: uint32 ,
  memoryTypes: array[VK_MAX_MEMORY_TYPES,VkMemoryType] ,
  memoryHeapCount: uint32 ,
  memoryHeaps: array[VK_MAX_MEMORY_HEAPS,VkMemoryHeap] ,
  ) : VkPhysicalDeviceMemoryProperties =
  result.memoryTypeCount = memoryTypeCount
  result.memoryTypes = memoryTypes
  result.memoryHeapCount = memoryHeapCount
  result.memoryHeaps = memoryHeaps

proc mkVkPhysicalDeviceProperties2*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2,
  pNext: pointer = nil,
  properties: VkPhysicalDeviceProperties ,
  ) : VkPhysicalDeviceProperties2 =
  result.sType = sType
  result.pNext = pNext
  result.properties = properties

proc mkVkPhysicalDeviceMemoryProperties2*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2,
  pNext: pointer = nil,
  memoryProperties: VkPhysicalDeviceMemoryProperties ,
  ) : VkPhysicalDeviceMemoryProperties2 =
  result.sType = sType
  result.pNext = pNext
  result.memoryProperties = memoryProperties

proc mkVkPresentRegionsKHR*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR,
  pNext: pointer = nil,
  swapchainCount: uint32 ,
  pRegions: ptr VkPresentRegionKHR = nil,
  ) : VkPresentRegionsKHR =
  result.sType = sType
  result.pNext = pNext
  result.swapchainCount = swapchainCount
  result.pRegions = pRegions

proc mkVkDebugUtilsMessengerCreateInfoEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT,
  pNext: pointer = nil,
  flags: VkDebugUtilsMessengerCreateFlagsEXT = 0.VkDebugUtilsMessengerCreateFlagsEXT,
  messageSeverity: VkDebugUtilsMessageSeverityFlagsEXT ,
  messageType: VkDebugUtilsMessageTypeFlagsEXT ,
  pfnUserCallback: PFN_vkDebugUtilsMessengerCallbackEXT ,
  pUserData: pointer = nil,
  ) : VkDebugUtilsMessengerCreateInfoEXT =
  result.sType = sType
  result.pNext = pNext
  result.flags = flags
  result.messageSeverity = messageSeverity
  result.messageType = messageType
  result.pfnUserCallback = pfnUserCallback
  result.pUserData = pUserData

proc mkVkDrmFormatModifierPropertiesListEXT*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT,
  pNext: pointer = nil,
  drmFormatModifierCount: uint32 = 0.uint32,
  pDrmFormatModifierProperties: ptr VkDrmFormatModifierPropertiesEXT ,
  ) : VkDrmFormatModifierPropertiesListEXT =
  result.sType = sType
  result.pNext = pNext
  result.drmFormatModifierCount = drmFormatModifierCount
  result.pDrmFormatModifierProperties = pDrmFormatModifierProperties

proc mkVkFramebufferAttachmentsCreateInfo*(
  sType: VkStructureType = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO,
  pNext: pointer = nil,
  attachmentImageInfoCount: uint32 = 0.uint32,
  pAttachmentImageInfos: ptr VkFramebufferAttachmentImageInfo ,
  ) : VkFramebufferAttachmentsCreateInfo =
  result.sType = sType
  result.pNext = pNext
  result.attachmentImageInfoCount = attachmentImageInfoCount
  result.pAttachmentImageInfos = pAttachmentImageInfos


# Loader
var loadProc*: proc(inst: VkInstance, procName: cstring): pointer

when not defined(vkCustomLoader):
  import dynlib

  when defined(windows):
    const vkDLL = "vulkan-1.dll"
  elif defined(macosx):
    const vkDLL = "libMoltenVK.dylib"
  else:
    const vkDLL = "libvulkan.so.1"

  let vkHandleDLL = loadLib(vkDLL)
  if isNil(vkHandleDLL):
    quit("could not load: " & vkDLL)

  let vkGetProcAddress = cast[proc(inst: VkInstance, s: cstring): pointer {.stdcall.}](symAddr(vkHandleDLL, "vkGetInstanceProcAddr"))
  if vkGetProcAddress == nil:
    quit("failed to load `vkGetInstanceProcAddr` from " & vkDLL)

  loadProc = proc(inst: VkInstance, procName: cstring): pointer =
    result = vkGetProcAddress(inst, procName)
    if result != nil:
      return
    result = symAddr(vkHandleDLL, procName)

proc loadProcs*(inst: VkInstance) =
  vkAcquireFullScreenExclusiveModeEXT = cast[proc (device: VkDevice, swapchain: VkSwapchainKHR): VkResult {.stdcall.}](loadProc(inst, "vkAcquireFullScreenExclusiveModeEXT"))
  vkAcquireNextImage2KHR = cast[proc (device: VkDevice, pAcquireInfo: ptr VkAcquireNextImageInfoKHR, pImageIndex: ptr uint32): VkResult {.stdcall.}](loadProc(inst, "vkAcquireNextImage2KHR"))
  vkAcquireNextImageKHR = cast[proc (device: VkDevice, swapchain: VkSwapchainKHR, timeout: uint64, semaphore: VkSemaphore, fence: VkFence, pImageIndex: ptr uint32): VkResult {.stdcall.}](loadProc(inst, "vkAcquireNextImageKHR"))
  vkAcquirePerformanceConfigurationINTEL = cast[proc (device: VkDevice, pAcquireInfo: ptr VkPerformanceConfigurationAcquireInfoINTEL, pConfiguration: ptr VkPerformanceConfigurationINTEL): VkResult {.stdcall.}](loadProc(inst, "vkAcquirePerformanceConfigurationINTEL"))
  vkAcquireProfilingLockKHR = cast[proc (device: VkDevice, pInfo: ptr VkAcquireProfilingLockInfoKHR): VkResult {.stdcall.}](loadProc(inst, "vkAcquireProfilingLockKHR"))
  vkAcquireXlibDisplayEXT = cast[proc (physicalDevice: VkPhysicalDevice, dpy: ptr Display, display: VkDisplayKHR): VkResult {.stdcall.}](loadProc(inst, "vkAcquireXlibDisplayEXT"))
  vkAllocateCommandBuffers = cast[proc (device: VkDevice, pAllocateInfo: ptr VkCommandBufferAllocateInfo, pCommandBuffers: ptr VkCommandBuffer): VkResult {.stdcall.}](loadProc(inst, "vkAllocateCommandBuffers"))
  vkAllocateDescriptorSets = cast[proc (device: VkDevice, pAllocateInfo: ptr VkDescriptorSetAllocateInfo, pDescriptorSets: ptr VkDescriptorSet): VkResult {.stdcall.}](loadProc(inst, "vkAllocateDescriptorSets"))
  vkAllocateMemory = cast[proc (device: VkDevice, pAllocateInfo: ptr VkMemoryAllocateInfo, pAllocator: ptr VkAllocationCallbacks, pMemory: ptr VkDeviceMemory): VkResult {.stdcall.}](loadProc(inst, "vkAllocateMemory"))
  vkBeginCommandBuffer = cast[proc (commandBuffer: VkCommandBuffer, pBeginInfo: ptr VkCommandBufferBeginInfo): VkResult {.stdcall.}](loadProc(inst, "vkBeginCommandBuffer"))
  vkBindAccelerationStructureMemoryKHR = cast[proc (device: VkDevice, bindInfoCount: uint32, pBindInfos: ptr VkBindAccelerationStructureMemoryInfoKHR): VkResult {.stdcall.}](loadProc(inst, "vkBindAccelerationStructureMemoryKHR"))
  vkBindBufferMemory = cast[proc (device: VkDevice, buffer: VkBuffer, memory: VkDeviceMemory, memoryOffset: VkDeviceSize): VkResult {.stdcall.}](loadProc(inst, "vkBindBufferMemory"))
  vkBindBufferMemory2 = cast[proc (device: VkDevice, bindInfoCount: uint32, pBindInfos: ptr VkBindBufferMemoryInfo): VkResult {.stdcall.}](loadProc(inst, "vkBindBufferMemory2"))
  vkBindImageMemory = cast[proc (device: VkDevice, image: VkImage, memory: VkDeviceMemory, memoryOffset: VkDeviceSize): VkResult {.stdcall.}](loadProc(inst, "vkBindImageMemory"))
  vkBindImageMemory2 = cast[proc (device: VkDevice, bindInfoCount: uint32, pBindInfos: ptr VkBindImageMemoryInfo): VkResult {.stdcall.}](loadProc(inst, "vkBindImageMemory2"))
  vkBuildAccelerationStructureKHR = cast[proc (device: VkDevice, infoCount: uint32, pInfos: ptr VkAccelerationStructureBuildGeometryInfoKHR, ppOffsetInfos: ptr ptr VkAccelerationStructureBuildOffsetInfoKHR): VkResult {.stdcall.}](loadProc(inst, "vkBuildAccelerationStructureKHR"))
  vkCmdBeginConditionalRenderingEXT = cast[proc (commandBuffer: VkCommandBuffer, pConditionalRenderingBegin: ptr VkConditionalRenderingBeginInfoEXT): void {.stdcall.}](loadProc(inst, "vkCmdBeginConditionalRenderingEXT"))
  vkCmdBeginDebugUtilsLabelEXT = cast[proc (commandBuffer: VkCommandBuffer, pLabelInfo: ptr VkDebugUtilsLabelEXT): void {.stdcall.}](loadProc(inst, "vkCmdBeginDebugUtilsLabelEXT"))
  vkCmdBeginQuery = cast[proc (commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, query: uint32, flags: VkQueryControlFlags): void {.stdcall.}](loadProc(inst, "vkCmdBeginQuery"))
  vkCmdBeginQueryIndexedEXT = cast[proc (commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, query: uint32, flags: VkQueryControlFlags, index: uint32): void {.stdcall.}](loadProc(inst, "vkCmdBeginQueryIndexedEXT"))
  vkCmdBeginRenderPass = cast[proc (commandBuffer: VkCommandBuffer, pRenderPassBegin: ptr VkRenderPassBeginInfo, contents: VkSubpassContents): void {.stdcall.}](loadProc(inst, "vkCmdBeginRenderPass"))
  vkCmdBeginRenderPass2 = cast[proc (commandBuffer: VkCommandBuffer, pRenderPassBegin: ptr VkRenderPassBeginInfo, pSubpassBeginInfo: ptr VkSubpassBeginInfo): void {.stdcall.}](loadProc(inst, "vkCmdBeginRenderPass2"))
  vkCmdBeginTransformFeedbackEXT = cast[proc (commandBuffer: VkCommandBuffer, firstCounterBuffer: uint32, counterBufferCount: uint32, pCounterBuffers: ptr VkBuffer, pCounterBufferOffsets: ptr VkDeviceSize): void {.stdcall.}](loadProc(inst, "vkCmdBeginTransformFeedbackEXT"))
  vkCmdBindDescriptorSets = cast[proc (commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, layout: VkPipelineLayout, firstSet: uint32, descriptorSetCount: uint32, pDescriptorSets: ptr VkDescriptorSet, dynamicOffsetCount: uint32, pDynamicOffsets: ptr uint32): void {.stdcall.}](loadProc(inst, "vkCmdBindDescriptorSets"))
  vkCmdBindIndexBuffer = cast[proc (commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, indexType: VkIndexType): void {.stdcall.}](loadProc(inst, "vkCmdBindIndexBuffer"))
  vkCmdBindPipeline = cast[proc (commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, pipeline: VkPipeline): void {.stdcall.}](loadProc(inst, "vkCmdBindPipeline"))
  vkCmdBindPipelineShaderGroupNV = cast[proc (commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, pipeline: VkPipeline, groupIndex: uint32): void {.stdcall.}](loadProc(inst, "vkCmdBindPipelineShaderGroupNV"))
  vkCmdBindShadingRateImageNV = cast[proc (commandBuffer: VkCommandBuffer, imageView: VkImageView, imageLayout: VkImageLayout): void {.stdcall.}](loadProc(inst, "vkCmdBindShadingRateImageNV"))
  vkCmdBindTransformFeedbackBuffersEXT = cast[proc (commandBuffer: VkCommandBuffer, firstBinding: uint32, bindingCount: uint32, pBuffers: ptr VkBuffer, pOffsets: ptr VkDeviceSize, pSizes: ptr VkDeviceSize): void {.stdcall.}](loadProc(inst, "vkCmdBindTransformFeedbackBuffersEXT"))
  vkCmdBindVertexBuffers = cast[proc (commandBuffer: VkCommandBuffer, firstBinding: uint32, bindingCount: uint32, pBuffers: ptr VkBuffer, pOffsets: ptr VkDeviceSize): void {.stdcall.}](loadProc(inst, "vkCmdBindVertexBuffers"))
  vkCmdBindVertexBuffers2EXT = cast[proc (commandBuffer: VkCommandBuffer, firstBinding: uint32, bindingCount: uint32, pBuffers: ptr VkBuffer, pOffsets: ptr VkDeviceSize, pSizes: ptr VkDeviceSize, pStrides: ptr VkDeviceSize): void {.stdcall.}](loadProc(inst, "vkCmdBindVertexBuffers2EXT"))
  vkCmdBlitImage = cast[proc (commandBuffer: VkCommandBuffer, srcImage: VkImage, srcImageLayout: VkImageLayout, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: uint32, pRegions: ptr VkImageBlit, filter: VkFilter): void {.stdcall.}](loadProc(inst, "vkCmdBlitImage"))
  vkCmdBuildAccelerationStructureIndirectKHR = cast[proc (commandBuffer: VkCommandBuffer, pInfo: ptr VkAccelerationStructureBuildGeometryInfoKHR, indirectBuffer: VkBuffer, indirectOffset: VkDeviceSize, indirectStride: uint32): void {.stdcall.}](loadProc(inst, "vkCmdBuildAccelerationStructureIndirectKHR"))
  vkCmdBuildAccelerationStructureKHR = cast[proc (commandBuffer: VkCommandBuffer, infoCount: uint32, pInfos: ptr VkAccelerationStructureBuildGeometryInfoKHR, ppOffsetInfos: ptr ptr VkAccelerationStructureBuildOffsetInfoKHR): void {.stdcall.}](loadProc(inst, "vkCmdBuildAccelerationStructureKHR"))
  vkCmdBuildAccelerationStructureNV = cast[proc (commandBuffer: VkCommandBuffer, pInfo: ptr VkAccelerationStructureInfoNV, instanceData: VkBuffer, instanceOffset: VkDeviceSize, update: VkBool32, dst: VkAccelerationStructureKHR, src: VkAccelerationStructureKHR, scratch: VkBuffer, scratchOffset: VkDeviceSize): void {.stdcall.}](loadProc(inst, "vkCmdBuildAccelerationStructureNV"))
  vkCmdClearAttachments = cast[proc (commandBuffer: VkCommandBuffer, attachmentCount: uint32, pAttachments: ptr VkClearAttachment, rectCount: uint32, pRects: ptr VkClearRect): void {.stdcall.}](loadProc(inst, "vkCmdClearAttachments"))
  vkCmdClearColorImage = cast[proc (commandBuffer: VkCommandBuffer, image: VkImage, imageLayout: VkImageLayout, pColor: ptr VkClearColorValue, rangeCount: uint32, pRanges: ptr VkImageSubresourceRange): void {.stdcall.}](loadProc(inst, "vkCmdClearColorImage"))
  vkCmdClearDepthStencilImage = cast[proc (commandBuffer: VkCommandBuffer, image: VkImage, imageLayout: VkImageLayout, pDepthStencil: ptr VkClearDepthStencilValue, rangeCount: uint32, pRanges: ptr VkImageSubresourceRange): void {.stdcall.}](loadProc(inst, "vkCmdClearDepthStencilImage"))
  vkCmdCopyAccelerationStructureKHR = cast[proc (commandBuffer: VkCommandBuffer, pInfo: ptr VkCopyAccelerationStructureInfoKHR): void {.stdcall.}](loadProc(inst, "vkCmdCopyAccelerationStructureKHR"))
  vkCmdCopyAccelerationStructureNV = cast[proc (commandBuffer: VkCommandBuffer, dst: VkAccelerationStructureKHR, src: VkAccelerationStructureKHR, mode: VkCopyAccelerationStructureModeKHR): void {.stdcall.}](loadProc(inst, "vkCmdCopyAccelerationStructureNV"))
  vkCmdCopyAccelerationStructureToMemoryKHR = cast[proc (commandBuffer: VkCommandBuffer, pInfo: ptr VkCopyAccelerationStructureToMemoryInfoKHR): void {.stdcall.}](loadProc(inst, "vkCmdCopyAccelerationStructureToMemoryKHR"))
  vkCmdCopyBuffer = cast[proc (commandBuffer: VkCommandBuffer, srcBuffer: VkBuffer, dstBuffer: VkBuffer, regionCount: uint32, pRegions: ptr VkBufferCopy): void {.stdcall.}](loadProc(inst, "vkCmdCopyBuffer"))
  vkCmdCopyBufferToImage = cast[proc (commandBuffer: VkCommandBuffer, srcBuffer: VkBuffer, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: uint32, pRegions: ptr VkBufferImageCopy): void {.stdcall.}](loadProc(inst, "vkCmdCopyBufferToImage"))
  vkCmdCopyImage = cast[proc (commandBuffer: VkCommandBuffer, srcImage: VkImage, srcImageLayout: VkImageLayout, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: uint32, pRegions: ptr VkImageCopy): void {.stdcall.}](loadProc(inst, "vkCmdCopyImage"))
  vkCmdCopyImageToBuffer = cast[proc (commandBuffer: VkCommandBuffer, srcImage: VkImage, srcImageLayout: VkImageLayout, dstBuffer: VkBuffer, regionCount: uint32, pRegions: ptr VkBufferImageCopy): void {.stdcall.}](loadProc(inst, "vkCmdCopyImageToBuffer"))
  vkCmdCopyMemoryToAccelerationStructureKHR = cast[proc (commandBuffer: VkCommandBuffer, pInfo: ptr VkCopyMemoryToAccelerationStructureInfoKHR): void {.stdcall.}](loadProc(inst, "vkCmdCopyMemoryToAccelerationStructureKHR"))
  vkCmdCopyQueryPoolResults = cast[proc (commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, firstQuery: uint32, queryCount: uint32, dstBuffer: VkBuffer, dstOffset: VkDeviceSize, stride: VkDeviceSize, flags: VkQueryResultFlags): void {.stdcall.}](loadProc(inst, "vkCmdCopyQueryPoolResults"))
  vkCmdDebugMarkerBeginEXT = cast[proc (commandBuffer: VkCommandBuffer, pMarkerInfo: ptr VkDebugMarkerMarkerInfoEXT): void {.stdcall.}](loadProc(inst, "vkCmdDebugMarkerBeginEXT"))
  vkCmdDebugMarkerEndEXT = cast[proc (commandBuffer: VkCommandBuffer): void {.stdcall.}](loadProc(inst, "vkCmdDebugMarkerEndEXT"))
  vkCmdDebugMarkerInsertEXT = cast[proc (commandBuffer: VkCommandBuffer, pMarkerInfo: ptr VkDebugMarkerMarkerInfoEXT): void {.stdcall.}](loadProc(inst, "vkCmdDebugMarkerInsertEXT"))
  vkCmdDispatch = cast[proc (commandBuffer: VkCommandBuffer, groupCountX: uint32, groupCountY: uint32, groupCountZ: uint32): void {.stdcall.}](loadProc(inst, "vkCmdDispatch"))
  vkCmdDispatchBase = cast[proc (commandBuffer: VkCommandBuffer, baseGroupX: uint32, baseGroupY: uint32, baseGroupZ: uint32, groupCountX: uint32, groupCountY: uint32, groupCountZ: uint32): void {.stdcall.}](loadProc(inst, "vkCmdDispatchBase"))
  vkCmdDispatchIndirect = cast[proc (commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize): void {.stdcall.}](loadProc(inst, "vkCmdDispatchIndirect"))
  vkCmdDraw = cast[proc (commandBuffer: VkCommandBuffer, vertexCount: uint32, instanceCount: uint32, firstVertex: uint32, firstInstance: uint32): void {.stdcall.}](loadProc(inst, "vkCmdDraw"))
  vkCmdDrawIndexed = cast[proc (commandBuffer: VkCommandBuffer, indexCount: uint32, instanceCount: uint32, firstIndex: uint32, vertexOffset: int32, firstInstance: uint32): void {.stdcall.}](loadProc(inst, "vkCmdDrawIndexed"))
  vkCmdDrawIndexedIndirect = cast[proc (commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, drawCount: uint32, stride: uint32): void {.stdcall.}](loadProc(inst, "vkCmdDrawIndexedIndirect"))
  vkCmdDrawIndexedIndirectCount = cast[proc (commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: uint32, stride: uint32): void {.stdcall.}](loadProc(inst, "vkCmdDrawIndexedIndirectCount"))
  vkCmdDrawIndirect = cast[proc (commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, drawCount: uint32, stride: uint32): void {.stdcall.}](loadProc(inst, "vkCmdDrawIndirect"))
  vkCmdDrawIndirectByteCountEXT = cast[proc (commandBuffer: VkCommandBuffer, instanceCount: uint32, firstInstance: uint32, counterBuffer: VkBuffer, counterBufferOffset: VkDeviceSize, counterOffset: uint32, vertexStride: uint32): void {.stdcall.}](loadProc(inst, "vkCmdDrawIndirectByteCountEXT"))
  vkCmdDrawIndirectCount = cast[proc (commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: uint32, stride: uint32): void {.stdcall.}](loadProc(inst, "vkCmdDrawIndirectCount"))
  vkCmdDrawMeshTasksIndirectCountNV = cast[proc (commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: uint32, stride: uint32): void {.stdcall.}](loadProc(inst, "vkCmdDrawMeshTasksIndirectCountNV"))
  vkCmdDrawMeshTasksIndirectNV = cast[proc (commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, drawCount: uint32, stride: uint32): void {.stdcall.}](loadProc(inst, "vkCmdDrawMeshTasksIndirectNV"))
  vkCmdDrawMeshTasksNV = cast[proc (commandBuffer: VkCommandBuffer, taskCount: uint32, firstTask: uint32): void {.stdcall.}](loadProc(inst, "vkCmdDrawMeshTasksNV"))
  vkCmdEndConditionalRenderingEXT = cast[proc (commandBuffer: VkCommandBuffer): void {.stdcall.}](loadProc(inst, "vkCmdEndConditionalRenderingEXT"))
  vkCmdEndDebugUtilsLabelEXT = cast[proc (commandBuffer: VkCommandBuffer): void {.stdcall.}](loadProc(inst, "vkCmdEndDebugUtilsLabelEXT"))
  vkCmdEndQuery = cast[proc (commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, query: uint32): void {.stdcall.}](loadProc(inst, "vkCmdEndQuery"))
  vkCmdEndQueryIndexedEXT = cast[proc (commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, query: uint32, index: uint32): void {.stdcall.}](loadProc(inst, "vkCmdEndQueryIndexedEXT"))
  vkCmdEndRenderPass = cast[proc (commandBuffer: VkCommandBuffer): void {.stdcall.}](loadProc(inst, "vkCmdEndRenderPass"))
  vkCmdEndRenderPass2 = cast[proc (commandBuffer: VkCommandBuffer, pSubpassEndInfo: ptr VkSubpassEndInfo): void {.stdcall.}](loadProc(inst, "vkCmdEndRenderPass2"))
  vkCmdEndTransformFeedbackEXT = cast[proc (commandBuffer: VkCommandBuffer, firstCounterBuffer: uint32, counterBufferCount: uint32, pCounterBuffers: ptr VkBuffer, pCounterBufferOffsets: ptr VkDeviceSize): void {.stdcall.}](loadProc(inst, "vkCmdEndTransformFeedbackEXT"))
  vkCmdExecuteCommands = cast[proc (commandBuffer: VkCommandBuffer, commandBufferCount: uint32, pCommandBuffers: ptr VkCommandBuffer): void {.stdcall.}](loadProc(inst, "vkCmdExecuteCommands"))
  vkCmdExecuteGeneratedCommandsNV = cast[proc (commandBuffer: VkCommandBuffer, isPreprocessed: VkBool32, pGeneratedCommandsInfo: ptr VkGeneratedCommandsInfoNV): void {.stdcall.}](loadProc(inst, "vkCmdExecuteGeneratedCommandsNV"))
  vkCmdFillBuffer = cast[proc (commandBuffer: VkCommandBuffer, dstBuffer: VkBuffer, dstOffset: VkDeviceSize, size: VkDeviceSize, data: uint32): void {.stdcall.}](loadProc(inst, "vkCmdFillBuffer"))
  vkCmdInsertDebugUtilsLabelEXT = cast[proc (commandBuffer: VkCommandBuffer, pLabelInfo: ptr VkDebugUtilsLabelEXT): void {.stdcall.}](loadProc(inst, "vkCmdInsertDebugUtilsLabelEXT"))
  vkCmdNextSubpass = cast[proc (commandBuffer: VkCommandBuffer, contents: VkSubpassContents): void {.stdcall.}](loadProc(inst, "vkCmdNextSubpass"))
  vkCmdNextSubpass2 = cast[proc (commandBuffer: VkCommandBuffer, pSubpassBeginInfo: ptr VkSubpassBeginInfo, pSubpassEndInfo: ptr VkSubpassEndInfo): void {.stdcall.}](loadProc(inst, "vkCmdNextSubpass2"))
  vkCmdPipelineBarrier = cast[proc (commandBuffer: VkCommandBuffer, srcStageMask: VkPipelineStageFlags, dstStageMask: VkPipelineStageFlags, dependencyFlags: VkDependencyFlags, memoryBarrierCount: uint32, pMemoryBarriers: ptr VkMemoryBarrier, bufferMemoryBarrierCount: uint32, pBufferMemoryBarriers: ptr VkBufferMemoryBarrier, imageMemoryBarrierCount: uint32, pImageMemoryBarriers: ptr VkImageMemoryBarrier): void {.stdcall.}](loadProc(inst, "vkCmdPipelineBarrier"))
  vkCmdPreprocessGeneratedCommandsNV = cast[proc (commandBuffer: VkCommandBuffer, pGeneratedCommandsInfo: ptr VkGeneratedCommandsInfoNV): void {.stdcall.}](loadProc(inst, "vkCmdPreprocessGeneratedCommandsNV"))
  vkCmdPushConstants = cast[proc (commandBuffer: VkCommandBuffer, layout: VkPipelineLayout, stageFlags: VkShaderStageFlags, offset: uint32, size: uint32, pValues: pointer): void {.stdcall.}](loadProc(inst, "vkCmdPushConstants"))
  vkCmdPushDescriptorSetKHR = cast[proc (commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, layout: VkPipelineLayout, set: uint32, descriptorWriteCount: uint32, pDescriptorWrites: ptr VkWriteDescriptorSet): void {.stdcall.}](loadProc(inst, "vkCmdPushDescriptorSetKHR"))
  vkCmdPushDescriptorSetWithTemplateKHR = cast[proc (commandBuffer: VkCommandBuffer, descriptorUpdateTemplate: VkDescriptorUpdateTemplate, layout: VkPipelineLayout, set: uint32, pData: pointer): void {.stdcall.}](loadProc(inst, "vkCmdPushDescriptorSetWithTemplateKHR"))
  vkCmdResetEvent = cast[proc (commandBuffer: VkCommandBuffer, event: VkEvent, stageMask: VkPipelineStageFlags): void {.stdcall.}](loadProc(inst, "vkCmdResetEvent"))
  vkCmdResetQueryPool = cast[proc (commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, firstQuery: uint32, queryCount: uint32): void {.stdcall.}](loadProc(inst, "vkCmdResetQueryPool"))
  vkCmdResolveImage = cast[proc (commandBuffer: VkCommandBuffer, srcImage: VkImage, srcImageLayout: VkImageLayout, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: uint32, pRegions: ptr VkImageResolve): void {.stdcall.}](loadProc(inst, "vkCmdResolveImage"))
  vkCmdSetBlendConstants = cast[proc (commandBuffer: VkCommandBuffer, blendConstants: array[4,float32]): void {.stdcall.}](loadProc(inst, "vkCmdSetBlendConstants"))
  vkCmdSetCheckpointNV = cast[proc (commandBuffer: VkCommandBuffer, pCheckpointMarker: pointer): void {.stdcall.}](loadProc(inst, "vkCmdSetCheckpointNV"))
  vkCmdSetCoarseSampleOrderNV = cast[proc (commandBuffer: VkCommandBuffer, sampleOrderType: VkCoarseSampleOrderTypeNV, customSampleOrderCount: uint32, pCustomSampleOrders: ptr VkCoarseSampleOrderCustomNV): void {.stdcall.}](loadProc(inst, "vkCmdSetCoarseSampleOrderNV"))
  vkCmdSetCullModeEXT = cast[proc (commandBuffer: VkCommandBuffer, cullMode: VkCullModeFlags): void {.stdcall.}](loadProc(inst, "vkCmdSetCullModeEXT"))
  vkCmdSetDepthBias = cast[proc (commandBuffer: VkCommandBuffer, depthBiasConstantFactor: float32, depthBiasClamp: float32, depthBiasSlopeFactor: float32): void {.stdcall.}](loadProc(inst, "vkCmdSetDepthBias"))
  vkCmdSetDepthBounds = cast[proc (commandBuffer: VkCommandBuffer, minDepthBounds: float32, maxDepthBounds: float32): void {.stdcall.}](loadProc(inst, "vkCmdSetDepthBounds"))
  vkCmdSetDepthBoundsTestEnableEXT = cast[proc (commandBuffer: VkCommandBuffer, depthBoundsTestEnable: VkBool32): void {.stdcall.}](loadProc(inst, "vkCmdSetDepthBoundsTestEnableEXT"))
  vkCmdSetDepthCompareOpEXT = cast[proc (commandBuffer: VkCommandBuffer, depthCompareOp: VkCompareOp): void {.stdcall.}](loadProc(inst, "vkCmdSetDepthCompareOpEXT"))
  vkCmdSetDepthTestEnableEXT = cast[proc (commandBuffer: VkCommandBuffer, depthTestEnable: VkBool32): void {.stdcall.}](loadProc(inst, "vkCmdSetDepthTestEnableEXT"))
  vkCmdSetDepthWriteEnableEXT = cast[proc (commandBuffer: VkCommandBuffer, depthWriteEnable: VkBool32): void {.stdcall.}](loadProc(inst, "vkCmdSetDepthWriteEnableEXT"))
  vkCmdSetDeviceMask = cast[proc (commandBuffer: VkCommandBuffer, deviceMask: uint32): void {.stdcall.}](loadProc(inst, "vkCmdSetDeviceMask"))
  vkCmdSetDiscardRectangleEXT = cast[proc (commandBuffer: VkCommandBuffer, firstDiscardRectangle: uint32, discardRectangleCount: uint32, pDiscardRectangles: ptr VkRect2D): void {.stdcall.}](loadProc(inst, "vkCmdSetDiscardRectangleEXT"))
  vkCmdSetEvent = cast[proc (commandBuffer: VkCommandBuffer, event: VkEvent, stageMask: VkPipelineStageFlags): void {.stdcall.}](loadProc(inst, "vkCmdSetEvent"))
  vkCmdSetExclusiveScissorNV = cast[proc (commandBuffer: VkCommandBuffer, firstExclusiveScissor: uint32, exclusiveScissorCount: uint32, pExclusiveScissors: ptr VkRect2D): void {.stdcall.}](loadProc(inst, "vkCmdSetExclusiveScissorNV"))
  vkCmdSetFrontFaceEXT = cast[proc (commandBuffer: VkCommandBuffer, frontFace: VkFrontFace): void {.stdcall.}](loadProc(inst, "vkCmdSetFrontFaceEXT"))
  vkCmdSetLineStippleEXT = cast[proc (commandBuffer: VkCommandBuffer, lineStippleFactor: uint32, lineStipplePattern: uint16): void {.stdcall.}](loadProc(inst, "vkCmdSetLineStippleEXT"))
  vkCmdSetLineWidth = cast[proc (commandBuffer: VkCommandBuffer, lineWidth: float32): void {.stdcall.}](loadProc(inst, "vkCmdSetLineWidth"))
  vkCmdSetPerformanceMarkerINTEL = cast[proc (commandBuffer: VkCommandBuffer, pMarkerInfo: ptr VkPerformanceMarkerInfoINTEL): VkResult {.stdcall.}](loadProc(inst, "vkCmdSetPerformanceMarkerINTEL"))
  vkCmdSetPerformanceOverrideINTEL = cast[proc (commandBuffer: VkCommandBuffer, pOverrideInfo: ptr VkPerformanceOverrideInfoINTEL): VkResult {.stdcall.}](loadProc(inst, "vkCmdSetPerformanceOverrideINTEL"))
  vkCmdSetPerformanceStreamMarkerINTEL = cast[proc (commandBuffer: VkCommandBuffer, pMarkerInfo: ptr VkPerformanceStreamMarkerInfoINTEL): VkResult {.stdcall.}](loadProc(inst, "vkCmdSetPerformanceStreamMarkerINTEL"))
  vkCmdSetPrimitiveTopologyEXT = cast[proc (commandBuffer: VkCommandBuffer, primitiveTopology: VkPrimitiveTopology): void {.stdcall.}](loadProc(inst, "vkCmdSetPrimitiveTopologyEXT"))
  vkCmdSetSampleLocationsEXT = cast[proc (commandBuffer: VkCommandBuffer, pSampleLocationsInfo: ptr VkSampleLocationsInfoEXT): void {.stdcall.}](loadProc(inst, "vkCmdSetSampleLocationsEXT"))
  vkCmdSetScissor = cast[proc (commandBuffer: VkCommandBuffer, firstScissor: uint32, scissorCount: uint32, pScissors: ptr VkRect2D): void {.stdcall.}](loadProc(inst, "vkCmdSetScissor"))
  vkCmdSetScissorWithCountEXT = cast[proc (commandBuffer: VkCommandBuffer, scissorCount: uint32, pScissors: ptr VkRect2D): void {.stdcall.}](loadProc(inst, "vkCmdSetScissorWithCountEXT"))
  vkCmdSetStencilCompareMask = cast[proc (commandBuffer: VkCommandBuffer, faceMask: VkStencilFaceFlags, compareMask: uint32): void {.stdcall.}](loadProc(inst, "vkCmdSetStencilCompareMask"))
  vkCmdSetStencilOpEXT = cast[proc (commandBuffer: VkCommandBuffer, faceMask: VkStencilFaceFlags, failOp: VkStencilOp, passOp: VkStencilOp, depthFailOp: VkStencilOp, compareOp: VkCompareOp): void {.stdcall.}](loadProc(inst, "vkCmdSetStencilOpEXT"))
  vkCmdSetStencilReference = cast[proc (commandBuffer: VkCommandBuffer, faceMask: VkStencilFaceFlags, reference: uint32): void {.stdcall.}](loadProc(inst, "vkCmdSetStencilReference"))
  vkCmdSetStencilTestEnableEXT = cast[proc (commandBuffer: VkCommandBuffer, stencilTestEnable: VkBool32): void {.stdcall.}](loadProc(inst, "vkCmdSetStencilTestEnableEXT"))
  vkCmdSetStencilWriteMask = cast[proc (commandBuffer: VkCommandBuffer, faceMask: VkStencilFaceFlags, writeMask: uint32): void {.stdcall.}](loadProc(inst, "vkCmdSetStencilWriteMask"))
  vkCmdSetViewport = cast[proc (commandBuffer: VkCommandBuffer, firstViewport: uint32, viewportCount: uint32, pViewports: ptr VkViewport): void {.stdcall.}](loadProc(inst, "vkCmdSetViewport"))
  vkCmdSetViewportShadingRatePaletteNV = cast[proc (commandBuffer: VkCommandBuffer, firstViewport: uint32, viewportCount: uint32, pShadingRatePalettes: ptr VkShadingRatePaletteNV): void {.stdcall.}](loadProc(inst, "vkCmdSetViewportShadingRatePaletteNV"))
  vkCmdSetViewportWScalingNV = cast[proc (commandBuffer: VkCommandBuffer, firstViewport: uint32, viewportCount: uint32, pViewportWScalings: ptr VkViewportWScalingNV): void {.stdcall.}](loadProc(inst, "vkCmdSetViewportWScalingNV"))
  vkCmdSetViewportWithCountEXT = cast[proc (commandBuffer: VkCommandBuffer, viewportCount: uint32, pViewports: ptr VkViewport): void {.stdcall.}](loadProc(inst, "vkCmdSetViewportWithCountEXT"))
  vkCmdTraceRaysIndirectKHR = cast[proc (commandBuffer: VkCommandBuffer, pRaygenShaderBindingTable: ptr VkStridedBufferRegionKHR, pMissShaderBindingTable: ptr VkStridedBufferRegionKHR, pHitShaderBindingTable: ptr VkStridedBufferRegionKHR, pCallableShaderBindingTable: ptr VkStridedBufferRegionKHR, buffer: VkBuffer, offset: VkDeviceSize): void {.stdcall.}](loadProc(inst, "vkCmdTraceRaysIndirectKHR"))
  vkCmdTraceRaysKHR = cast[proc (commandBuffer: VkCommandBuffer, pRaygenShaderBindingTable: ptr VkStridedBufferRegionKHR, pMissShaderBindingTable: ptr VkStridedBufferRegionKHR, pHitShaderBindingTable: ptr VkStridedBufferRegionKHR, pCallableShaderBindingTable: ptr VkStridedBufferRegionKHR, width: uint32, height: uint32, depth: uint32): void {.stdcall.}](loadProc(inst, "vkCmdTraceRaysKHR"))
  vkCmdTraceRaysNV = cast[proc (commandBuffer: VkCommandBuffer, raygenShaderBindingTableBuffer: VkBuffer, raygenShaderBindingOffset: VkDeviceSize, missShaderBindingTableBuffer: VkBuffer, missShaderBindingOffset: VkDeviceSize, missShaderBindingStride: VkDeviceSize, hitShaderBindingTableBuffer: VkBuffer, hitShaderBindingOffset: VkDeviceSize, hitShaderBindingStride: VkDeviceSize, callableShaderBindingTableBuffer: VkBuffer, callableShaderBindingOffset: VkDeviceSize, callableShaderBindingStride: VkDeviceSize, width: uint32, height: uint32, depth: uint32): void {.stdcall.}](loadProc(inst, "vkCmdTraceRaysNV"))
  vkCmdUpdateBuffer = cast[proc (commandBuffer: VkCommandBuffer, dstBuffer: VkBuffer, dstOffset: VkDeviceSize, dataSize: VkDeviceSize, pData: pointer): void {.stdcall.}](loadProc(inst, "vkCmdUpdateBuffer"))
  vkCmdWaitEvents = cast[proc (commandBuffer: VkCommandBuffer, eventCount: uint32, pEvents: ptr VkEvent, srcStageMask: VkPipelineStageFlags, dstStageMask: VkPipelineStageFlags, memoryBarrierCount: uint32, pMemoryBarriers: ptr VkMemoryBarrier, bufferMemoryBarrierCount: uint32, pBufferMemoryBarriers: ptr VkBufferMemoryBarrier, imageMemoryBarrierCount: uint32, pImageMemoryBarriers: ptr VkImageMemoryBarrier): void {.stdcall.}](loadProc(inst, "vkCmdWaitEvents"))
  vkCmdWriteAccelerationStructuresPropertiesKHR = cast[proc (commandBuffer: VkCommandBuffer, accelerationStructureCount: uint32, pAccelerationStructures: ptr VkAccelerationStructureKHR, queryType: VkQueryType, queryPool: VkQueryPool, firstQuery: uint32): void {.stdcall.}](loadProc(inst, "vkCmdWriteAccelerationStructuresPropertiesKHR"))
  vkCmdWriteBufferMarkerAMD = cast[proc (commandBuffer: VkCommandBuffer, pipelineStage: VkPipelineStageFlagBits, dstBuffer: VkBuffer, dstOffset: VkDeviceSize, marker: uint32): void {.stdcall.}](loadProc(inst, "vkCmdWriteBufferMarkerAMD"))
  vkCmdWriteTimestamp = cast[proc (commandBuffer: VkCommandBuffer, pipelineStage: VkPipelineStageFlagBits, queryPool: VkQueryPool, query: uint32): void {.stdcall.}](loadProc(inst, "vkCmdWriteTimestamp"))
  vkCompileDeferredNV = cast[proc (device: VkDevice, pipeline: VkPipeline, shader: uint32): VkResult {.stdcall.}](loadProc(inst, "vkCompileDeferredNV"))
  vkCopyAccelerationStructureKHR = cast[proc (device: VkDevice, pInfo: ptr VkCopyAccelerationStructureInfoKHR): VkResult {.stdcall.}](loadProc(inst, "vkCopyAccelerationStructureKHR"))
  vkCopyAccelerationStructureToMemoryKHR = cast[proc (device: VkDevice, pInfo: ptr VkCopyAccelerationStructureToMemoryInfoKHR): VkResult {.stdcall.}](loadProc(inst, "vkCopyAccelerationStructureToMemoryKHR"))
  vkCopyMemoryToAccelerationStructureKHR = cast[proc (device: VkDevice, pInfo: ptr VkCopyMemoryToAccelerationStructureInfoKHR): VkResult {.stdcall.}](loadProc(inst, "vkCopyMemoryToAccelerationStructureKHR"))
  vkCreateAccelerationStructureKHR = cast[proc (device: VkDevice, pCreateInfo: ptr VkAccelerationStructureCreateInfoKHR, pAllocator: ptr VkAllocationCallbacks, pAccelerationStructure: ptr VkAccelerationStructureKHR): VkResult {.stdcall.}](loadProc(inst, "vkCreateAccelerationStructureKHR"))
  vkCreateAccelerationStructureNV = cast[proc (device: VkDevice, pCreateInfo: ptr VkAccelerationStructureCreateInfoNV, pAllocator: ptr VkAllocationCallbacks, pAccelerationStructure: ptr VkAccelerationStructureNV): VkResult {.stdcall.}](loadProc(inst, "vkCreateAccelerationStructureNV"))
  vkCreateAndroidSurfaceKHR = cast[proc (instance: VkInstance, pCreateInfo: ptr VkAndroidSurfaceCreateInfoKHR, pAllocator: ptr VkAllocationCallbacks, pSurface: ptr VkSurfaceKHR): VkResult {.stdcall.}](loadProc(inst, "vkCreateAndroidSurfaceKHR"))
  vkCreateBuffer = cast[proc (device: VkDevice, pCreateInfo: ptr VkBufferCreateInfo, pAllocator: ptr VkAllocationCallbacks, pBuffer: ptr VkBuffer): VkResult {.stdcall.}](loadProc(inst, "vkCreateBuffer"))
  vkCreateBufferView = cast[proc (device: VkDevice, pCreateInfo: ptr VkBufferViewCreateInfo, pAllocator: ptr VkAllocationCallbacks, pView: ptr VkBufferView): VkResult {.stdcall.}](loadProc(inst, "vkCreateBufferView"))
  vkCreateCommandPool = cast[proc (device: VkDevice, pCreateInfo: ptr VkCommandPoolCreateInfo, pAllocator: ptr VkAllocationCallbacks, pCommandPool: ptr VkCommandPool): VkResult {.stdcall.}](loadProc(inst, "vkCreateCommandPool"))
  vkCreateComputePipelines = cast[proc (device: VkDevice, pipelineCache: VkPipelineCache, createInfoCount: uint32, pCreateInfos: ptr VkComputePipelineCreateInfo, pAllocator: ptr VkAllocationCallbacks, pPipelines: ptr VkPipeline): VkResult {.stdcall.}](loadProc(inst, "vkCreateComputePipelines"))
  vkCreateDebugReportCallbackEXT = cast[proc (instance: VkInstance, pCreateInfo: ptr VkDebugReportCallbackCreateInfoEXT, pAllocator: ptr VkAllocationCallbacks, pCallback: ptr VkDebugReportCallbackEXT): VkResult {.stdcall.}](loadProc(inst, "vkCreateDebugReportCallbackEXT"))
  vkCreateDebugUtilsMessengerEXT = cast[proc (instance: VkInstance, pCreateInfo: ptr VkDebugUtilsMessengerCreateInfoEXT, pAllocator: ptr VkAllocationCallbacks, pMessenger: ptr VkDebugUtilsMessengerEXT): VkResult {.stdcall.}](loadProc(inst, "vkCreateDebugUtilsMessengerEXT"))
  vkCreateDeferredOperationKHR = cast[proc (device: VkDevice, pAllocator: ptr VkAllocationCallbacks, pDeferredOperation: ptr VkDeferredOperationKHR): VkResult {.stdcall.}](loadProc(inst, "vkCreateDeferredOperationKHR"))
  vkCreateDescriptorPool = cast[proc (device: VkDevice, pCreateInfo: ptr VkDescriptorPoolCreateInfo, pAllocator: ptr VkAllocationCallbacks, pDescriptorPool: ptr VkDescriptorPool): VkResult {.stdcall.}](loadProc(inst, "vkCreateDescriptorPool"))
  vkCreateDescriptorSetLayout = cast[proc (device: VkDevice, pCreateInfo: ptr VkDescriptorSetLayoutCreateInfo, pAllocator: ptr VkAllocationCallbacks, pSetLayout: ptr VkDescriptorSetLayout): VkResult {.stdcall.}](loadProc(inst, "vkCreateDescriptorSetLayout"))
  vkCreateDescriptorUpdateTemplate = cast[proc (device: VkDevice, pCreateInfo: ptr VkDescriptorUpdateTemplateCreateInfo, pAllocator: ptr VkAllocationCallbacks, pDescriptorUpdateTemplate: ptr VkDescriptorUpdateTemplate): VkResult {.stdcall.}](loadProc(inst, "vkCreateDescriptorUpdateTemplate"))
  vkCreateDevice = cast[proc (physicalDevice: VkPhysicalDevice, pCreateInfo: ptr VkDeviceCreateInfo, pAllocator: ptr VkAllocationCallbacks, pDevice: ptr VkDevice): VkResult {.stdcall.}](loadProc(inst, "vkCreateDevice"))
  vkCreateDirectFBSurfaceEXT = cast[proc (instance: VkInstance, pCreateInfo: ptr VkDirectFBSurfaceCreateInfoEXT, pAllocator: ptr VkAllocationCallbacks, pSurface: ptr VkSurfaceKHR): VkResult {.stdcall.}](loadProc(inst, "vkCreateDirectFBSurfaceEXT"))
  vkCreateDisplayModeKHR = cast[proc (physicalDevice: VkPhysicalDevice, display: VkDisplayKHR, pCreateInfo: ptr VkDisplayModeCreateInfoKHR, pAllocator: ptr VkAllocationCallbacks, pMode: ptr VkDisplayModeKHR): VkResult {.stdcall.}](loadProc(inst, "vkCreateDisplayModeKHR"))
  vkCreateDisplayPlaneSurfaceKHR = cast[proc (instance: VkInstance, pCreateInfo: ptr VkDisplaySurfaceCreateInfoKHR, pAllocator: ptr VkAllocationCallbacks, pSurface: ptr VkSurfaceKHR): VkResult {.stdcall.}](loadProc(inst, "vkCreateDisplayPlaneSurfaceKHR"))
  vkCreateEvent = cast[proc (device: VkDevice, pCreateInfo: ptr VkEventCreateInfo, pAllocator: ptr VkAllocationCallbacks, pEvent: ptr VkEvent): VkResult {.stdcall.}](loadProc(inst, "vkCreateEvent"))
  vkCreateFence = cast[proc (device: VkDevice, pCreateInfo: ptr VkFenceCreateInfo, pAllocator: ptr VkAllocationCallbacks, pFence: ptr VkFence): VkResult {.stdcall.}](loadProc(inst, "vkCreateFence"))
  vkCreateFramebuffer = cast[proc (device: VkDevice, pCreateInfo: ptr VkFramebufferCreateInfo, pAllocator: ptr VkAllocationCallbacks, pFramebuffer: ptr VkFramebuffer): VkResult {.stdcall.}](loadProc(inst, "vkCreateFramebuffer"))
  vkCreateGraphicsPipelines = cast[proc (device: VkDevice, pipelineCache: VkPipelineCache, createInfoCount: uint32, pCreateInfos: ptr VkGraphicsPipelineCreateInfo, pAllocator: ptr VkAllocationCallbacks, pPipelines: ptr VkPipeline): VkResult {.stdcall.}](loadProc(inst, "vkCreateGraphicsPipelines"))
  vkCreateHeadlessSurfaceEXT = cast[proc (instance: VkInstance, pCreateInfo: ptr VkHeadlessSurfaceCreateInfoEXT, pAllocator: ptr VkAllocationCallbacks, pSurface: ptr VkSurfaceKHR): VkResult {.stdcall.}](loadProc(inst, "vkCreateHeadlessSurfaceEXT"))
  vkCreateIOSSurfaceMVK = cast[proc (instance: VkInstance, pCreateInfo: ptr VkIOSSurfaceCreateInfoMVK, pAllocator: ptr VkAllocationCallbacks, pSurface: ptr VkSurfaceKHR): VkResult {.stdcall.}](loadProc(inst, "vkCreateIOSSurfaceMVK"))
  vkCreateImage = cast[proc (device: VkDevice, pCreateInfo: ptr VkImageCreateInfo, pAllocator: ptr VkAllocationCallbacks, pImage: ptr VkImage): VkResult {.stdcall.}](loadProc(inst, "vkCreateImage"))
  vkCreateImagePipeSurfaceFUCHSIA = cast[proc (instance: VkInstance, pCreateInfo: ptr VkImagePipeSurfaceCreateInfoFUCHSIA, pAllocator: ptr VkAllocationCallbacks, pSurface: ptr VkSurfaceKHR): VkResult {.stdcall.}](loadProc(inst, "vkCreateImagePipeSurfaceFUCHSIA"))
  vkCreateImageView = cast[proc (device: VkDevice, pCreateInfo: ptr VkImageViewCreateInfo, pAllocator: ptr VkAllocationCallbacks, pView: ptr VkImageView): VkResult {.stdcall.}](loadProc(inst, "vkCreateImageView"))
  vkCreateIndirectCommandsLayoutNV = cast[proc (device: VkDevice, pCreateInfo: ptr VkIndirectCommandsLayoutCreateInfoNV, pAllocator: ptr VkAllocationCallbacks, pIndirectCommandsLayout: ptr VkIndirectCommandsLayoutNV): VkResult {.stdcall.}](loadProc(inst, "vkCreateIndirectCommandsLayoutNV"))
  vkCreateInstance = cast[proc (pCreateInfo: ptr VkInstanceCreateInfo, pAllocator: ptr VkAllocationCallbacks, pInstance: ptr VkInstance): VkResult {.stdcall.}](loadProc(inst, "vkCreateInstance"))
  vkCreateMacOSSurfaceMVK = cast[proc (instance: VkInstance, pCreateInfo: ptr VkMacOSSurfaceCreateInfoMVK, pAllocator: ptr VkAllocationCallbacks, pSurface: ptr VkSurfaceKHR): VkResult {.stdcall.}](loadProc(inst, "vkCreateMacOSSurfaceMVK"))
  vkCreateMetalSurfaceEXT = cast[proc (instance: VkInstance, pCreateInfo: ptr VkMetalSurfaceCreateInfoEXT, pAllocator: ptr VkAllocationCallbacks, pSurface: ptr VkSurfaceKHR): VkResult {.stdcall.}](loadProc(inst, "vkCreateMetalSurfaceEXT"))
  vkCreatePipelineCache = cast[proc (device: VkDevice, pCreateInfo: ptr VkPipelineCacheCreateInfo, pAllocator: ptr VkAllocationCallbacks, pPipelineCache: ptr VkPipelineCache): VkResult {.stdcall.}](loadProc(inst, "vkCreatePipelineCache"))
  vkCreatePipelineLayout = cast[proc (device: VkDevice, pCreateInfo: ptr VkPipelineLayoutCreateInfo, pAllocator: ptr VkAllocationCallbacks, pPipelineLayout: ptr VkPipelineLayout): VkResult {.stdcall.}](loadProc(inst, "vkCreatePipelineLayout"))
  vkCreatePrivateDataSlotEXT = cast[proc (device: VkDevice, pCreateInfo: ptr VkPrivateDataSlotCreateInfoEXT, pAllocator: ptr VkAllocationCallbacks, pPrivateDataSlot: ptr VkPrivateDataSlotEXT): VkResult {.stdcall.}](loadProc(inst, "vkCreatePrivateDataSlotEXT"))
  vkCreateQueryPool = cast[proc (device: VkDevice, pCreateInfo: ptr VkQueryPoolCreateInfo, pAllocator: ptr VkAllocationCallbacks, pQueryPool: ptr VkQueryPool): VkResult {.stdcall.}](loadProc(inst, "vkCreateQueryPool"))
  vkCreateRayTracingPipelinesKHR = cast[proc (device: VkDevice, pipelineCache: VkPipelineCache, createInfoCount: uint32, pCreateInfos: ptr VkRayTracingPipelineCreateInfoKHR, pAllocator: ptr VkAllocationCallbacks, pPipelines: ptr VkPipeline): VkResult {.stdcall.}](loadProc(inst, "vkCreateRayTracingPipelinesKHR"))
  vkCreateRayTracingPipelinesNV = cast[proc (device: VkDevice, pipelineCache: VkPipelineCache, createInfoCount: uint32, pCreateInfos: ptr VkRayTracingPipelineCreateInfoNV, pAllocator: ptr VkAllocationCallbacks, pPipelines: ptr VkPipeline): VkResult {.stdcall.}](loadProc(inst, "vkCreateRayTracingPipelinesNV"))
  vkCreateRenderPass = cast[proc (device: VkDevice, pCreateInfo: ptr VkRenderPassCreateInfo, pAllocator: ptr VkAllocationCallbacks, pRenderPass: ptr VkRenderPass): VkResult {.stdcall.}](loadProc(inst, "vkCreateRenderPass"))
  vkCreateRenderPass2 = cast[proc (device: VkDevice, pCreateInfo: ptr VkRenderPassCreateInfo2, pAllocator: ptr VkAllocationCallbacks, pRenderPass: ptr VkRenderPass): VkResult {.stdcall.}](loadProc(inst, "vkCreateRenderPass2"))
  vkCreateSampler = cast[proc (device: VkDevice, pCreateInfo: ptr VkSamplerCreateInfo, pAllocator: ptr VkAllocationCallbacks, pSampler: ptr VkSampler): VkResult {.stdcall.}](loadProc(inst, "vkCreateSampler"))
  vkCreateSamplerYcbcrConversion = cast[proc (device: VkDevice, pCreateInfo: ptr VkSamplerYcbcrConversionCreateInfo, pAllocator: ptr VkAllocationCallbacks, pYcbcrConversion: ptr VkSamplerYcbcrConversion): VkResult {.stdcall.}](loadProc(inst, "vkCreateSamplerYcbcrConversion"))
  vkCreateSemaphore = cast[proc (device: VkDevice, pCreateInfo: ptr VkSemaphoreCreateInfo, pAllocator: ptr VkAllocationCallbacks, pSemaphore: ptr VkSemaphore): VkResult {.stdcall.}](loadProc(inst, "vkCreateSemaphore"))
  vkCreateShaderModule = cast[proc (device: VkDevice, pCreateInfo: ptr VkShaderModuleCreateInfo, pAllocator: ptr VkAllocationCallbacks, pShaderModule: ptr VkShaderModule): VkResult {.stdcall.}](loadProc(inst, "vkCreateShaderModule"))
  vkCreateSharedSwapchainsKHR = cast[proc (device: VkDevice, swapchainCount: uint32, pCreateInfos: ptr VkSwapchainCreateInfoKHR, pAllocator: ptr VkAllocationCallbacks, pSwapchains: ptr VkSwapchainKHR): VkResult {.stdcall.}](loadProc(inst, "vkCreateSharedSwapchainsKHR"))
  vkCreateStreamDescriptorSurfaceGGP = cast[proc (instance: VkInstance, pCreateInfo: ptr VkStreamDescriptorSurfaceCreateInfoGGP, pAllocator: ptr VkAllocationCallbacks, pSurface: ptr VkSurfaceKHR): VkResult {.stdcall.}](loadProc(inst, "vkCreateStreamDescriptorSurfaceGGP"))
  vkCreateSwapchainKHR = cast[proc (device: VkDevice, pCreateInfo: ptr VkSwapchainCreateInfoKHR, pAllocator: ptr VkAllocationCallbacks, pSwapchain: ptr VkSwapchainKHR): VkResult {.stdcall.}](loadProc(inst, "vkCreateSwapchainKHR"))
  vkCreateValidationCacheEXT = cast[proc (device: VkDevice, pCreateInfo: ptr VkValidationCacheCreateInfoEXT, pAllocator: ptr VkAllocationCallbacks, pValidationCache: ptr VkValidationCacheEXT): VkResult {.stdcall.}](loadProc(inst, "vkCreateValidationCacheEXT"))
  vkCreateViSurfaceNN = cast[proc (instance: VkInstance, pCreateInfo: ptr VkViSurfaceCreateInfoNN, pAllocator: ptr VkAllocationCallbacks, pSurface: ptr VkSurfaceKHR): VkResult {.stdcall.}](loadProc(inst, "vkCreateViSurfaceNN"))
  vkCreateWaylandSurfaceKHR = cast[proc (instance: VkInstance, pCreateInfo: ptr VkWaylandSurfaceCreateInfoKHR, pAllocator: ptr VkAllocationCallbacks, pSurface: ptr VkSurfaceKHR): VkResult {.stdcall.}](loadProc(inst, "vkCreateWaylandSurfaceKHR"))
  vkCreateWin32SurfaceKHR = cast[proc (instance: VkInstance, pCreateInfo: ptr VkWin32SurfaceCreateInfoKHR, pAllocator: ptr VkAllocationCallbacks, pSurface: ptr VkSurfaceKHR): VkResult {.stdcall.}](loadProc(inst, "vkCreateWin32SurfaceKHR"))
  vkCreateXcbSurfaceKHR = cast[proc (instance: VkInstance, pCreateInfo: ptr VkXcbSurfaceCreateInfoKHR, pAllocator: ptr VkAllocationCallbacks, pSurface: ptr VkSurfaceKHR): VkResult {.stdcall.}](loadProc(inst, "vkCreateXcbSurfaceKHR"))
  vkCreateXlibSurfaceKHR = cast[proc (instance: VkInstance, pCreateInfo: ptr VkXlibSurfaceCreateInfoKHR, pAllocator: ptr VkAllocationCallbacks, pSurface: ptr VkSurfaceKHR): VkResult {.stdcall.}](loadProc(inst, "vkCreateXlibSurfaceKHR"))
  vkDebugMarkerSetObjectNameEXT = cast[proc (device: VkDevice, pNameInfo: ptr VkDebugMarkerObjectNameInfoEXT): VkResult {.stdcall.}](loadProc(inst, "vkDebugMarkerSetObjectNameEXT"))
  vkDebugMarkerSetObjectTagEXT = cast[proc (device: VkDevice, pTagInfo: ptr VkDebugMarkerObjectTagInfoEXT): VkResult {.stdcall.}](loadProc(inst, "vkDebugMarkerSetObjectTagEXT"))
  vkDebugReportMessageEXT = cast[proc (instance: VkInstance, flags: VkDebugReportFlagsEXT, objectType: VkDebugReportObjectTypeEXT, `object`: uint64, location: uint, messageCode: int32, pLayerPrefix: cstring, pMessage: cstring): void {.stdcall.}](loadProc(inst, "vkDebugReportMessageEXT"))
  vkDeferredOperationJoinKHR = cast[proc (device: VkDevice, operation: VkDeferredOperationKHR): VkResult {.stdcall.}](loadProc(inst, "vkDeferredOperationJoinKHR"))
  vkDestroyAccelerationStructureKHR = cast[proc (device: VkDevice, accelerationStructure: VkAccelerationStructureKHR, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkDestroyAccelerationStructureKHR"))
  vkDestroyBuffer = cast[proc (device: VkDevice, buffer: VkBuffer, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkDestroyBuffer"))
  vkDestroyBufferView = cast[proc (device: VkDevice, bufferView: VkBufferView, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkDestroyBufferView"))
  vkDestroyCommandPool = cast[proc (device: VkDevice, commandPool: VkCommandPool, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkDestroyCommandPool"))
  vkDestroyDebugReportCallbackEXT = cast[proc (instance: VkInstance, callback: VkDebugReportCallbackEXT, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkDestroyDebugReportCallbackEXT"))
  vkDestroyDebugUtilsMessengerEXT = cast[proc (instance: VkInstance, messenger: VkDebugUtilsMessengerEXT, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkDestroyDebugUtilsMessengerEXT"))
  vkDestroyDeferredOperationKHR = cast[proc (device: VkDevice, operation: VkDeferredOperationKHR, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkDestroyDeferredOperationKHR"))
  vkDestroyDescriptorPool = cast[proc (device: VkDevice, descriptorPool: VkDescriptorPool, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkDestroyDescriptorPool"))
  vkDestroyDescriptorSetLayout = cast[proc (device: VkDevice, descriptorSetLayout: VkDescriptorSetLayout, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkDestroyDescriptorSetLayout"))
  vkDestroyDescriptorUpdateTemplate = cast[proc (device: VkDevice, descriptorUpdateTemplate: VkDescriptorUpdateTemplate, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkDestroyDescriptorUpdateTemplate"))
  vkDestroyDevice = cast[proc (device: VkDevice, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkDestroyDevice"))
  vkDestroyEvent = cast[proc (device: VkDevice, event: VkEvent, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkDestroyEvent"))
  vkDestroyFence = cast[proc (device: VkDevice, fence: VkFence, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkDestroyFence"))
  vkDestroyFramebuffer = cast[proc (device: VkDevice, framebuffer: VkFramebuffer, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkDestroyFramebuffer"))
  vkDestroyImage = cast[proc (device: VkDevice, image: VkImage, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkDestroyImage"))
  vkDestroyImageView = cast[proc (device: VkDevice, imageView: VkImageView, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkDestroyImageView"))
  vkDestroyIndirectCommandsLayoutNV = cast[proc (device: VkDevice, indirectCommandsLayout: VkIndirectCommandsLayoutNV, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkDestroyIndirectCommandsLayoutNV"))
  vkDestroyInstance = cast[proc (instance: VkInstance, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkDestroyInstance"))
  vkDestroyPipeline = cast[proc (device: VkDevice, pipeline: VkPipeline, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkDestroyPipeline"))
  vkDestroyPipelineCache = cast[proc (device: VkDevice, pipelineCache: VkPipelineCache, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkDestroyPipelineCache"))
  vkDestroyPipelineLayout = cast[proc (device: VkDevice, pipelineLayout: VkPipelineLayout, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkDestroyPipelineLayout"))
  vkDestroyPrivateDataSlotEXT = cast[proc (device: VkDevice, privateDataSlot: VkPrivateDataSlotEXT, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkDestroyPrivateDataSlotEXT"))
  vkDestroyQueryPool = cast[proc (device: VkDevice, queryPool: VkQueryPool, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkDestroyQueryPool"))
  vkDestroyRenderPass = cast[proc (device: VkDevice, renderPass: VkRenderPass, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkDestroyRenderPass"))
  vkDestroySampler = cast[proc (device: VkDevice, sampler: VkSampler, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkDestroySampler"))
  vkDestroySamplerYcbcrConversion = cast[proc (device: VkDevice, ycbcrConversion: VkSamplerYcbcrConversion, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkDestroySamplerYcbcrConversion"))
  vkDestroySemaphore = cast[proc (device: VkDevice, semaphore: VkSemaphore, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkDestroySemaphore"))
  vkDestroyShaderModule = cast[proc (device: VkDevice, shaderModule: VkShaderModule, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkDestroyShaderModule"))
  vkDestroySurfaceKHR = cast[proc (instance: VkInstance, surface: VkSurfaceKHR, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkDestroySurfaceKHR"))
  vkDestroySwapchainKHR = cast[proc (device: VkDevice, swapchain: VkSwapchainKHR, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkDestroySwapchainKHR"))
  vkDestroyValidationCacheEXT = cast[proc (device: VkDevice, validationCache: VkValidationCacheEXT, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkDestroyValidationCacheEXT"))
  vkDeviceWaitIdle = cast[proc (device: VkDevice): VkResult {.stdcall.}](loadProc(inst, "vkDeviceWaitIdle"))
  vkDisplayPowerControlEXT = cast[proc (device: VkDevice, display: VkDisplayKHR, pDisplayPowerInfo: ptr VkDisplayPowerInfoEXT): VkResult {.stdcall.}](loadProc(inst, "vkDisplayPowerControlEXT"))
  vkEndCommandBuffer = cast[proc (commandBuffer: VkCommandBuffer): VkResult {.stdcall.}](loadProc(inst, "vkEndCommandBuffer"))
  vkEnumerateDeviceExtensionProperties = cast[proc (physicalDevice: VkPhysicalDevice, pLayerName: cstring, pPropertyCount: ptr uint32, pProperties: ptr VkExtensionProperties): VkResult {.stdcall.}](loadProc(inst, "vkEnumerateDeviceExtensionProperties"))
  vkEnumerateDeviceLayerProperties = cast[proc (physicalDevice: VkPhysicalDevice, pPropertyCount: ptr uint32, pProperties: ptr VkLayerProperties): VkResult {.stdcall.}](loadProc(inst, "vkEnumerateDeviceLayerProperties"))
  vkEnumerateInstanceExtensionProperties = cast[proc (pLayerName: cstring, pPropertyCount: ptr uint32, pProperties: ptr VkExtensionProperties): VkResult {.stdcall.}](loadProc(inst, "vkEnumerateInstanceExtensionProperties"))
  vkEnumerateInstanceLayerProperties = cast[proc (pPropertyCount: ptr uint32, pProperties: ptr VkLayerProperties): VkResult {.stdcall.}](loadProc(inst, "vkEnumerateInstanceLayerProperties"))
  vkEnumerateInstanceVersion = cast[proc (pApiVersion: ptr uint32): VkResult {.stdcall.}](loadProc(inst, "vkEnumerateInstanceVersion"))
  vkEnumeratePhysicalDeviceGroups = cast[proc (instance: VkInstance, pPhysicalDeviceGroupCount: ptr uint32, pPhysicalDeviceGroupProperties: ptr VkPhysicalDeviceGroupProperties): VkResult {.stdcall.}](loadProc(inst, "vkEnumeratePhysicalDeviceGroups"))
  vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = cast[proc (physicalDevice: VkPhysicalDevice, queueFamilyIndex: uint32, pCounterCount: ptr uint32, pCounters: ptr VkPerformanceCounterKHR, pCounterDescriptions: ptr VkPerformanceCounterDescriptionKHR): VkResult {.stdcall.}](loadProc(inst, "vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR"))
  vkEnumeratePhysicalDevices = cast[proc (instance: VkInstance, pPhysicalDeviceCount: ptr uint32, pPhysicalDevices: ptr VkPhysicalDevice): VkResult {.stdcall.}](loadProc(inst, "vkEnumeratePhysicalDevices"))
  vkFlushMappedMemoryRanges = cast[proc (device: VkDevice, memoryRangeCount: uint32, pMemoryRanges: ptr VkMappedMemoryRange): VkResult {.stdcall.}](loadProc(inst, "vkFlushMappedMemoryRanges"))
  vkFreeCommandBuffers = cast[proc (device: VkDevice, commandPool: VkCommandPool, commandBufferCount: uint32, pCommandBuffers: ptr VkCommandBuffer): void {.stdcall.}](loadProc(inst, "vkFreeCommandBuffers"))
  vkFreeDescriptorSets = cast[proc (device: VkDevice, descriptorPool: VkDescriptorPool, descriptorSetCount: uint32, pDescriptorSets: ptr VkDescriptorSet): VkResult {.stdcall.}](loadProc(inst, "vkFreeDescriptorSets"))
  vkFreeMemory = cast[proc (device: VkDevice, memory: VkDeviceMemory, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](loadProc(inst, "vkFreeMemory"))
  vkGetAccelerationStructureDeviceAddressKHR = cast[proc (device: VkDevice, pInfo: ptr VkAccelerationStructureDeviceAddressInfoKHR): VkDeviceAddress {.stdcall.}](loadProc(inst, "vkGetAccelerationStructureDeviceAddressKHR"))
  vkGetAccelerationStructureHandleNV = cast[proc (device: VkDevice, accelerationStructure: VkAccelerationStructureKHR, dataSize: uint, pData: pointer): VkResult {.stdcall.}](loadProc(inst, "vkGetAccelerationStructureHandleNV"))
  vkGetAccelerationStructureMemoryRequirementsKHR = cast[proc (device: VkDevice, pInfo: ptr VkAccelerationStructureMemoryRequirementsInfoKHR, pMemoryRequirements: ptr VkMemoryRequirements2): void {.stdcall.}](loadProc(inst, "vkGetAccelerationStructureMemoryRequirementsKHR"))
  vkGetAccelerationStructureMemoryRequirementsNV = cast[proc (device: VkDevice, pInfo: ptr VkAccelerationStructureMemoryRequirementsInfoNV, pMemoryRequirements: ptr VkMemoryRequirements2KHR): void {.stdcall.}](loadProc(inst, "vkGetAccelerationStructureMemoryRequirementsNV"))
  vkGetAndroidHardwareBufferPropertiesANDROID = cast[proc (device: VkDevice, buffer: ptr AHardwareBuffer, pProperties: ptr VkAndroidHardwareBufferPropertiesANDROID): VkResult {.stdcall.}](loadProc(inst, "vkGetAndroidHardwareBufferPropertiesANDROID"))
  vkGetBufferDeviceAddress = cast[proc (device: VkDevice, pInfo: ptr VkBufferDeviceAddressInfo): VkDeviceAddress {.stdcall.}](loadProc(inst, "vkGetBufferDeviceAddress"))
  vkGetBufferMemoryRequirements = cast[proc (device: VkDevice, buffer: VkBuffer, pMemoryRequirements: ptr VkMemoryRequirements): void {.stdcall.}](loadProc(inst, "vkGetBufferMemoryRequirements"))
  vkGetBufferMemoryRequirements2 = cast[proc (device: VkDevice, pInfo: ptr VkBufferMemoryRequirementsInfo2, pMemoryRequirements: ptr VkMemoryRequirements2): void {.stdcall.}](loadProc(inst, "vkGetBufferMemoryRequirements2"))
  vkGetBufferOpaqueCaptureAddress = cast[proc (device: VkDevice, pInfo: ptr VkBufferDeviceAddressInfo): uint64 {.stdcall.}](loadProc(inst, "vkGetBufferOpaqueCaptureAddress"))
  vkGetCalibratedTimestampsEXT = cast[proc (device: VkDevice, timestampCount: uint32, pTimestampInfos: ptr VkCalibratedTimestampInfoEXT, pTimestamps: ptr uint64, pMaxDeviation: ptr uint64): VkResult {.stdcall.}](loadProc(inst, "vkGetCalibratedTimestampsEXT"))
  vkGetDeferredOperationMaxConcurrencyKHR = cast[proc (device: VkDevice, operation: VkDeferredOperationKHR): uint32 {.stdcall.}](loadProc(inst, "vkGetDeferredOperationMaxConcurrencyKHR"))
  vkGetDeferredOperationResultKHR = cast[proc (device: VkDevice, operation: VkDeferredOperationKHR): VkResult {.stdcall.}](loadProc(inst, "vkGetDeferredOperationResultKHR"))
  vkGetDescriptorSetLayoutSupport = cast[proc (device: VkDevice, pCreateInfo: ptr VkDescriptorSetLayoutCreateInfo, pSupport: ptr VkDescriptorSetLayoutSupport): void {.stdcall.}](loadProc(inst, "vkGetDescriptorSetLayoutSupport"))
  vkGetDeviceAccelerationStructureCompatibilityKHR = cast[proc (device: VkDevice, version: ptr VkAccelerationStructureVersionKHR): VkResult {.stdcall.}](loadProc(inst, "vkGetDeviceAccelerationStructureCompatibilityKHR"))
  vkGetDeviceGroupPeerMemoryFeatures = cast[proc (device: VkDevice, heapIndex: uint32, localDeviceIndex: uint32, remoteDeviceIndex: uint32, pPeerMemoryFeatures: ptr VkPeerMemoryFeatureFlags): void {.stdcall.}](loadProc(inst, "vkGetDeviceGroupPeerMemoryFeatures"))
  vkGetDeviceGroupPresentCapabilitiesKHR = cast[proc (device: VkDevice, pDeviceGroupPresentCapabilities: ptr VkDeviceGroupPresentCapabilitiesKHR): VkResult {.stdcall.}](loadProc(inst, "vkGetDeviceGroupPresentCapabilitiesKHR"))
  vkGetDeviceGroupSurfacePresentModes2EXT = cast[proc (device: VkDevice, pSurfaceInfo: ptr VkPhysicalDeviceSurfaceInfo2KHR, pModes: ptr VkDeviceGroupPresentModeFlagsKHR): VkResult {.stdcall.}](loadProc(inst, "vkGetDeviceGroupSurfacePresentModes2EXT"))
  vkGetDeviceGroupSurfacePresentModesKHR = cast[proc (device: VkDevice, surface: VkSurfaceKHR, pModes: ptr VkDeviceGroupPresentModeFlagsKHR): VkResult {.stdcall.}](loadProc(inst, "vkGetDeviceGroupSurfacePresentModesKHR"))
  vkGetDeviceMemoryCommitment = cast[proc (device: VkDevice, memory: VkDeviceMemory, pCommittedMemoryInBytes: ptr VkDeviceSize): void {.stdcall.}](loadProc(inst, "vkGetDeviceMemoryCommitment"))
  vkGetDeviceMemoryOpaqueCaptureAddress = cast[proc (device: VkDevice, pInfo: ptr VkDeviceMemoryOpaqueCaptureAddressInfo): uint64 {.stdcall.}](loadProc(inst, "vkGetDeviceMemoryOpaqueCaptureAddress"))
  vkGetDeviceProcAddr = cast[proc (device: VkDevice, pName: cstring): PFN_vkVoidFunction {.stdcall.}](loadProc(inst, "vkGetDeviceProcAddr"))
  vkGetDeviceQueue = cast[proc (device: VkDevice, queueFamilyIndex: uint32, queueIndex: uint32, pQueue: ptr VkQueue): void {.stdcall.}](loadProc(inst, "vkGetDeviceQueue"))
  vkGetDeviceQueue2 = cast[proc (device: VkDevice, pQueueInfo: ptr VkDeviceQueueInfo2, pQueue: ptr VkQueue): void {.stdcall.}](loadProc(inst, "vkGetDeviceQueue2"))
  vkGetDisplayModeProperties2KHR = cast[proc (physicalDevice: VkPhysicalDevice, display: VkDisplayKHR, pPropertyCount: ptr uint32, pProperties: ptr VkDisplayModeProperties2KHR): VkResult {.stdcall.}](loadProc(inst, "vkGetDisplayModeProperties2KHR"))
  vkGetDisplayModePropertiesKHR = cast[proc (physicalDevice: VkPhysicalDevice, display: VkDisplayKHR, pPropertyCount: ptr uint32, pProperties: ptr VkDisplayModePropertiesKHR): VkResult {.stdcall.}](loadProc(inst, "vkGetDisplayModePropertiesKHR"))
  vkGetDisplayPlaneCapabilities2KHR = cast[proc (physicalDevice: VkPhysicalDevice, pDisplayPlaneInfo: ptr VkDisplayPlaneInfo2KHR, pCapabilities: ptr VkDisplayPlaneCapabilities2KHR): VkResult {.stdcall.}](loadProc(inst, "vkGetDisplayPlaneCapabilities2KHR"))
  vkGetDisplayPlaneCapabilitiesKHR = cast[proc (physicalDevice: VkPhysicalDevice, mode: VkDisplayModeKHR, planeIndex: uint32, pCapabilities: ptr VkDisplayPlaneCapabilitiesKHR): VkResult {.stdcall.}](loadProc(inst, "vkGetDisplayPlaneCapabilitiesKHR"))
  vkGetDisplayPlaneSupportedDisplaysKHR = cast[proc (physicalDevice: VkPhysicalDevice, planeIndex: uint32, pDisplayCount: ptr uint32, pDisplays: ptr VkDisplayKHR): VkResult {.stdcall.}](loadProc(inst, "vkGetDisplayPlaneSupportedDisplaysKHR"))
  vkGetEventStatus = cast[proc (device: VkDevice, event: VkEvent): VkResult {.stdcall.}](loadProc(inst, "vkGetEventStatus"))
  vkGetFenceFdKHR = cast[proc (device: VkDevice, pGetFdInfo: ptr VkFenceGetFdInfoKHR, pFd: ptr cint): VkResult {.stdcall.}](loadProc(inst, "vkGetFenceFdKHR"))
  vkGetFenceStatus = cast[proc (device: VkDevice, fence: VkFence): VkResult {.stdcall.}](loadProc(inst, "vkGetFenceStatus"))
  vkGetFenceWin32HandleKHR = cast[proc (device: VkDevice, pGetWin32HandleInfo: ptr VkFenceGetWin32HandleInfoKHR, pHandle: ptr HANDLE): VkResult {.stdcall.}](loadProc(inst, "vkGetFenceWin32HandleKHR"))
  vkGetGeneratedCommandsMemoryRequirementsNV = cast[proc (device: VkDevice, pInfo: ptr VkGeneratedCommandsMemoryRequirementsInfoNV, pMemoryRequirements: ptr VkMemoryRequirements2): void {.stdcall.}](loadProc(inst, "vkGetGeneratedCommandsMemoryRequirementsNV"))
  vkGetImageDrmFormatModifierPropertiesEXT = cast[proc (device: VkDevice, image: VkImage, pProperties: ptr VkImageDrmFormatModifierPropertiesEXT): VkResult {.stdcall.}](loadProc(inst, "vkGetImageDrmFormatModifierPropertiesEXT"))
  vkGetImageMemoryRequirements = cast[proc (device: VkDevice, image: VkImage, pMemoryRequirements: ptr VkMemoryRequirements): void {.stdcall.}](loadProc(inst, "vkGetImageMemoryRequirements"))
  vkGetImageMemoryRequirements2 = cast[proc (device: VkDevice, pInfo: ptr VkImageMemoryRequirementsInfo2, pMemoryRequirements: ptr VkMemoryRequirements2): void {.stdcall.}](loadProc(inst, "vkGetImageMemoryRequirements2"))
  vkGetImageSparseMemoryRequirements = cast[proc (device: VkDevice, image: VkImage, pSparseMemoryRequirementCount: ptr uint32, pSparseMemoryRequirements: ptr VkSparseImageMemoryRequirements): void {.stdcall.}](loadProc(inst, "vkGetImageSparseMemoryRequirements"))
  vkGetImageSparseMemoryRequirements2 = cast[proc (device: VkDevice, pInfo: ptr VkImageSparseMemoryRequirementsInfo2, pSparseMemoryRequirementCount: ptr uint32, pSparseMemoryRequirements: ptr VkSparseImageMemoryRequirements2): void {.stdcall.}](loadProc(inst, "vkGetImageSparseMemoryRequirements2"))
  vkGetImageSubresourceLayout = cast[proc (device: VkDevice, image: VkImage, pSubresource: ptr VkImageSubresource, pLayout: ptr VkSubresourceLayout): void {.stdcall.}](loadProc(inst, "vkGetImageSubresourceLayout"))
  vkGetImageViewAddressNVX = cast[proc (device: VkDevice, imageView: VkImageView, pProperties: ptr VkImageViewAddressPropertiesNVX): VkResult {.stdcall.}](loadProc(inst, "vkGetImageViewAddressNVX"))
  vkGetImageViewHandleNVX = cast[proc (device: VkDevice, pInfo: ptr VkImageViewHandleInfoNVX): uint32 {.stdcall.}](loadProc(inst, "vkGetImageViewHandleNVX"))
  vkGetInstanceProcAddr = cast[proc (instance: VkInstance, pName: cstring): PFN_vkVoidFunction {.stdcall.}](loadProc(inst, "vkGetInstanceProcAddr"))
  vkGetMemoryAndroidHardwareBufferANDROID = cast[proc (device: VkDevice, pInfo: ptr VkMemoryGetAndroidHardwareBufferInfoANDROID, pBuffer: ptr ptr AHardwareBuffer): VkResult {.stdcall.}](loadProc(inst, "vkGetMemoryAndroidHardwareBufferANDROID"))
  vkGetMemoryFdKHR = cast[proc (device: VkDevice, pGetFdInfo: ptr VkMemoryGetFdInfoKHR, pFd: ptr cint): VkResult {.stdcall.}](loadProc(inst, "vkGetMemoryFdKHR"))
  vkGetMemoryFdPropertiesKHR = cast[proc (device: VkDevice, handleType: VkExternalMemoryHandleTypeFlagBits, fd: cint, pMemoryFdProperties: ptr VkMemoryFdPropertiesKHR): VkResult {.stdcall.}](loadProc(inst, "vkGetMemoryFdPropertiesKHR"))
  vkGetMemoryHostPointerPropertiesEXT = cast[proc (device: VkDevice, handleType: VkExternalMemoryHandleTypeFlagBits, pHostPointer: pointer, pMemoryHostPointerProperties: ptr VkMemoryHostPointerPropertiesEXT): VkResult {.stdcall.}](loadProc(inst, "vkGetMemoryHostPointerPropertiesEXT"))
  vkGetMemoryWin32HandleKHR = cast[proc (device: VkDevice, pGetWin32HandleInfo: ptr VkMemoryGetWin32HandleInfoKHR, pHandle: ptr HANDLE): VkResult {.stdcall.}](loadProc(inst, "vkGetMemoryWin32HandleKHR"))
  vkGetMemoryWin32HandleNV = cast[proc (device: VkDevice, memory: VkDeviceMemory, handleType: VkExternalMemoryHandleTypeFlagsNV, pHandle: ptr HANDLE): VkResult {.stdcall.}](loadProc(inst, "vkGetMemoryWin32HandleNV"))
  vkGetMemoryWin32HandlePropertiesKHR = cast[proc (device: VkDevice, handleType: VkExternalMemoryHandleTypeFlagBits, handle: HANDLE, pMemoryWin32HandleProperties: ptr VkMemoryWin32HandlePropertiesKHR): VkResult {.stdcall.}](loadProc(inst, "vkGetMemoryWin32HandlePropertiesKHR"))
  vkGetPastPresentationTimingGOOGLE = cast[proc (device: VkDevice, swapchain: VkSwapchainKHR, pPresentationTimingCount: ptr uint32, pPresentationTimings: ptr VkPastPresentationTimingGOOGLE): VkResult {.stdcall.}](loadProc(inst, "vkGetPastPresentationTimingGOOGLE"))
  vkGetPerformanceParameterINTEL = cast[proc (device: VkDevice, parameter: VkPerformanceParameterTypeINTEL, pValue: ptr VkPerformanceValueINTEL): VkResult {.stdcall.}](loadProc(inst, "vkGetPerformanceParameterINTEL"))
  vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = cast[proc (physicalDevice: VkPhysicalDevice, pTimeDomainCount: ptr uint32, pTimeDomains: ptr VkTimeDomainEXT): VkResult {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceCalibrateableTimeDomainsEXT"))
  vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = cast[proc (physicalDevice: VkPhysicalDevice, pPropertyCount: ptr uint32, pProperties: ptr VkCooperativeMatrixPropertiesNV): VkResult {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceCooperativeMatrixPropertiesNV"))
  vkGetPhysicalDeviceDirectFBPresentationSupportEXT = cast[proc (physicalDevice: VkPhysicalDevice, queueFamilyIndex: uint32, dfb: ptr IDirectFB): VkBool32 {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceDirectFBPresentationSupportEXT"))
  vkGetPhysicalDeviceDisplayPlaneProperties2KHR = cast[proc (physicalDevice: VkPhysicalDevice, pPropertyCount: ptr uint32, pProperties: ptr VkDisplayPlaneProperties2KHR): VkResult {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceDisplayPlaneProperties2KHR"))
  vkGetPhysicalDeviceDisplayPlanePropertiesKHR = cast[proc (physicalDevice: VkPhysicalDevice, pPropertyCount: ptr uint32, pProperties: ptr VkDisplayPlanePropertiesKHR): VkResult {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceDisplayPlanePropertiesKHR"))
  vkGetPhysicalDeviceDisplayProperties2KHR = cast[proc (physicalDevice: VkPhysicalDevice, pPropertyCount: ptr uint32, pProperties: ptr VkDisplayProperties2KHR): VkResult {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceDisplayProperties2KHR"))
  vkGetPhysicalDeviceDisplayPropertiesKHR = cast[proc (physicalDevice: VkPhysicalDevice, pPropertyCount: ptr uint32, pProperties: ptr VkDisplayPropertiesKHR): VkResult {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceDisplayPropertiesKHR"))
  vkGetPhysicalDeviceExternalBufferProperties = cast[proc (physicalDevice: VkPhysicalDevice, pExternalBufferInfo: ptr VkPhysicalDeviceExternalBufferInfo, pExternalBufferProperties: ptr VkExternalBufferProperties): void {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceExternalBufferProperties"))
  vkGetPhysicalDeviceExternalFenceProperties = cast[proc (physicalDevice: VkPhysicalDevice, pExternalFenceInfo: ptr VkPhysicalDeviceExternalFenceInfo, pExternalFenceProperties: ptr VkExternalFenceProperties): void {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceExternalFenceProperties"))
  vkGetPhysicalDeviceExternalImageFormatPropertiesNV = cast[proc (physicalDevice: VkPhysicalDevice, format: VkFormat, `type`: VkImageType, tiling: VkImageTiling, usage: VkImageUsageFlags, flags: VkImageCreateFlags, externalHandleType: VkExternalMemoryHandleTypeFlagsNV, pExternalImageFormatProperties: ptr VkExternalImageFormatPropertiesNV): VkResult {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceExternalImageFormatPropertiesNV"))
  vkGetPhysicalDeviceExternalSemaphoreProperties = cast[proc (physicalDevice: VkPhysicalDevice, pExternalSemaphoreInfo: ptr VkPhysicalDeviceExternalSemaphoreInfo, pExternalSemaphoreProperties: ptr VkExternalSemaphoreProperties): void {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceExternalSemaphoreProperties"))
  vkGetPhysicalDeviceFeatures = cast[proc (physicalDevice: VkPhysicalDevice, pFeatures: ptr VkPhysicalDeviceFeatures): void {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceFeatures"))
  vkGetPhysicalDeviceFeatures2 = cast[proc (physicalDevice: VkPhysicalDevice, pFeatures: ptr VkPhysicalDeviceFeatures2): void {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceFeatures2"))
  vkGetPhysicalDeviceFormatProperties = cast[proc (physicalDevice: VkPhysicalDevice, format: VkFormat, pFormatProperties: ptr VkFormatProperties): void {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceFormatProperties"))
  vkGetPhysicalDeviceFormatProperties2 = cast[proc (physicalDevice: VkPhysicalDevice, format: VkFormat, pFormatProperties: ptr VkFormatProperties2): void {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceFormatProperties2"))
  vkGetPhysicalDeviceImageFormatProperties = cast[proc (physicalDevice: VkPhysicalDevice, format: VkFormat, `type`: VkImageType, tiling: VkImageTiling, usage: VkImageUsageFlags, flags: VkImageCreateFlags, pImageFormatProperties: ptr VkImageFormatProperties): VkResult {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceImageFormatProperties"))
  vkGetPhysicalDeviceImageFormatProperties2 = cast[proc (physicalDevice: VkPhysicalDevice, pImageFormatInfo: ptr VkPhysicalDeviceImageFormatInfo2, pImageFormatProperties: ptr VkImageFormatProperties2): VkResult {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceImageFormatProperties2"))
  vkGetPhysicalDeviceMemoryProperties = cast[proc (physicalDevice: VkPhysicalDevice, pMemoryProperties: ptr VkPhysicalDeviceMemoryProperties): void {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceMemoryProperties"))
  vkGetPhysicalDeviceMemoryProperties2 = cast[proc (physicalDevice: VkPhysicalDevice, pMemoryProperties: ptr VkPhysicalDeviceMemoryProperties2): void {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceMemoryProperties2"))
  vkGetPhysicalDeviceMultisamplePropertiesEXT = cast[proc (physicalDevice: VkPhysicalDevice, samples: VkSampleCountFlagBits, pMultisampleProperties: ptr VkMultisamplePropertiesEXT): void {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceMultisamplePropertiesEXT"))
  vkGetPhysicalDevicePresentRectanglesKHR = cast[proc (physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pRectCount: ptr uint32, pRects: ptr VkRect2D): VkResult {.stdcall.}](loadProc(inst, "vkGetPhysicalDevicePresentRectanglesKHR"))
  vkGetPhysicalDeviceProperties = cast[proc (physicalDevice: VkPhysicalDevice, pProperties: ptr VkPhysicalDeviceProperties): void {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceProperties"))
  vkGetPhysicalDeviceProperties2 = cast[proc (physicalDevice: VkPhysicalDevice, pProperties: ptr VkPhysicalDeviceProperties2): void {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceProperties2"))
  vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = cast[proc (physicalDevice: VkPhysicalDevice, pPerformanceQueryCreateInfo: ptr VkQueryPoolPerformanceCreateInfoKHR, pNumPasses: ptr uint32): void {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR"))
  vkGetPhysicalDeviceQueueFamilyProperties = cast[proc (physicalDevice: VkPhysicalDevice, pQueueFamilyPropertyCount: ptr uint32, pQueueFamilyProperties: ptr VkQueueFamilyProperties): void {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceQueueFamilyProperties"))
  vkGetPhysicalDeviceQueueFamilyProperties2 = cast[proc (physicalDevice: VkPhysicalDevice, pQueueFamilyPropertyCount: ptr uint32, pQueueFamilyProperties: ptr VkQueueFamilyProperties2): void {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceQueueFamilyProperties2"))
  vkGetPhysicalDeviceSparseImageFormatProperties = cast[proc (physicalDevice: VkPhysicalDevice, format: VkFormat, `type`: VkImageType, samples: VkSampleCountFlagBits, usage: VkImageUsageFlags, tiling: VkImageTiling, pPropertyCount: ptr uint32, pProperties: ptr VkSparseImageFormatProperties): void {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceSparseImageFormatProperties"))
  vkGetPhysicalDeviceSparseImageFormatProperties2 = cast[proc (physicalDevice: VkPhysicalDevice, pFormatInfo: ptr VkPhysicalDeviceSparseImageFormatInfo2, pPropertyCount: ptr uint32, pProperties: ptr VkSparseImageFormatProperties2): void {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceSparseImageFormatProperties2"))
  vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = cast[proc (physicalDevice: VkPhysicalDevice, pCombinationCount: ptr uint32, pCombinations: ptr VkFramebufferMixedSamplesCombinationNV): VkResult {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV"))
  vkGetPhysicalDeviceSurfaceCapabilities2EXT = cast[proc (physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pSurfaceCapabilities: ptr VkSurfaceCapabilities2EXT): VkResult {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceSurfaceCapabilities2EXT"))
  vkGetPhysicalDeviceSurfaceCapabilities2KHR = cast[proc (physicalDevice: VkPhysicalDevice, pSurfaceInfo: ptr VkPhysicalDeviceSurfaceInfo2KHR, pSurfaceCapabilities: ptr VkSurfaceCapabilities2KHR): VkResult {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceSurfaceCapabilities2KHR"))
  vkGetPhysicalDeviceSurfaceCapabilitiesKHR = cast[proc (physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pSurfaceCapabilities: ptr VkSurfaceCapabilitiesKHR): VkResult {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceSurfaceCapabilitiesKHR"))
  vkGetPhysicalDeviceSurfaceFormats2KHR = cast[proc (physicalDevice: VkPhysicalDevice, pSurfaceInfo: ptr VkPhysicalDeviceSurfaceInfo2KHR, pSurfaceFormatCount: ptr uint32, pSurfaceFormats: ptr VkSurfaceFormat2KHR): VkResult {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceSurfaceFormats2KHR"))
  vkGetPhysicalDeviceSurfaceFormatsKHR = cast[proc (physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pSurfaceFormatCount: ptr uint32, pSurfaceFormats: ptr VkSurfaceFormatKHR): VkResult {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceSurfaceFormatsKHR"))
  vkGetPhysicalDeviceSurfacePresentModes2EXT = cast[proc (physicalDevice: VkPhysicalDevice, pSurfaceInfo: ptr VkPhysicalDeviceSurfaceInfo2KHR, pPresentModeCount: ptr uint32, pPresentModes: ptr VkPresentModeKHR): VkResult {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceSurfacePresentModes2EXT"))
  vkGetPhysicalDeviceSurfacePresentModesKHR = cast[proc (physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pPresentModeCount: ptr uint32, pPresentModes: ptr VkPresentModeKHR): VkResult {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceSurfacePresentModesKHR"))
  vkGetPhysicalDeviceSurfaceSupportKHR = cast[proc (physicalDevice: VkPhysicalDevice, queueFamilyIndex: uint32, surface: VkSurfaceKHR, pSupported: ptr VkBool32): VkResult {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceSurfaceSupportKHR"))
  vkGetPhysicalDeviceToolPropertiesEXT = cast[proc (physicalDevice: VkPhysicalDevice, pToolCount: ptr uint32, pToolProperties: ptr VkPhysicalDeviceToolPropertiesEXT): VkResult {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceToolPropertiesEXT"))
  vkGetPhysicalDeviceWaylandPresentationSupportKHR = cast[proc (physicalDevice: VkPhysicalDevice, queueFamilyIndex: uint32, display: ptr wl_display): VkBool32 {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceWaylandPresentationSupportKHR"))
  vkGetPhysicalDeviceWin32PresentationSupportKHR = cast[proc (physicalDevice: VkPhysicalDevice, queueFamilyIndex: uint32): VkBool32 {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceWin32PresentationSupportKHR"))
  vkGetPhysicalDeviceXcbPresentationSupportKHR = cast[proc (physicalDevice: VkPhysicalDevice, queueFamilyIndex: uint32, connection: ptr xcb_connection_t, visual_id: xcb_visualid_t): VkBool32 {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceXcbPresentationSupportKHR"))
  vkGetPhysicalDeviceXlibPresentationSupportKHR = cast[proc (physicalDevice: VkPhysicalDevice, queueFamilyIndex: uint32, dpy: ptr Display, visualID: VisualID): VkBool32 {.stdcall.}](loadProc(inst, "vkGetPhysicalDeviceXlibPresentationSupportKHR"))
  vkGetPipelineCacheData = cast[proc (device: VkDevice, pipelineCache: VkPipelineCache, pDataSize: ptr uint, pData: pointer): VkResult {.stdcall.}](loadProc(inst, "vkGetPipelineCacheData"))
  vkGetPipelineExecutableInternalRepresentationsKHR = cast[proc (device: VkDevice, pExecutableInfo: ptr VkPipelineExecutableInfoKHR, pInternalRepresentationCount: ptr uint32, pInternalRepresentations: ptr VkPipelineExecutableInternalRepresentationKHR): VkResult {.stdcall.}](loadProc(inst, "vkGetPipelineExecutableInternalRepresentationsKHR"))
  vkGetPipelineExecutablePropertiesKHR = cast[proc (device: VkDevice, pPipelineInfo: ptr VkPipelineInfoKHR, pExecutableCount: ptr uint32, pProperties: ptr VkPipelineExecutablePropertiesKHR): VkResult {.stdcall.}](loadProc(inst, "vkGetPipelineExecutablePropertiesKHR"))
  vkGetPipelineExecutableStatisticsKHR = cast[proc (device: VkDevice, pExecutableInfo: ptr VkPipelineExecutableInfoKHR, pStatisticCount: ptr uint32, pStatistics: ptr VkPipelineExecutableStatisticKHR): VkResult {.stdcall.}](loadProc(inst, "vkGetPipelineExecutableStatisticsKHR"))
  vkGetPrivateDataEXT = cast[proc (device: VkDevice, objectType: VkObjectType, objectHandle: uint64, privateDataSlot: VkPrivateDataSlotEXT, pData: ptr uint64): void {.stdcall.}](loadProc(inst, "vkGetPrivateDataEXT"))
  vkGetQueryPoolResults = cast[proc (device: VkDevice, queryPool: VkQueryPool, firstQuery: uint32, queryCount: uint32, dataSize: uint, pData: pointer, stride: VkDeviceSize, flags: VkQueryResultFlags): VkResult {.stdcall.}](loadProc(inst, "vkGetQueryPoolResults"))
  vkGetQueueCheckpointDataNV = cast[proc (queue: VkQueue, pCheckpointDataCount: ptr uint32, pCheckpointData: ptr VkCheckpointDataNV): void {.stdcall.}](loadProc(inst, "vkGetQueueCheckpointDataNV"))
  vkGetRandROutputDisplayEXT = cast[proc (physicalDevice: VkPhysicalDevice, dpy: ptr Display, rrOutput: RROutput, pDisplay: ptr VkDisplayKHR): VkResult {.stdcall.}](loadProc(inst, "vkGetRandROutputDisplayEXT"))
  vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = cast[proc (device: VkDevice, pipeline: VkPipeline, firstGroup: uint32, groupCount: uint32, dataSize: uint, pData: pointer): VkResult {.stdcall.}](loadProc(inst, "vkGetRayTracingCaptureReplayShaderGroupHandlesKHR"))
  vkGetRayTracingShaderGroupHandlesKHR = cast[proc (device: VkDevice, pipeline: VkPipeline, firstGroup: uint32, groupCount: uint32, dataSize: uint, pData: pointer): VkResult {.stdcall.}](loadProc(inst, "vkGetRayTracingShaderGroupHandlesKHR"))
  vkGetRefreshCycleDurationGOOGLE = cast[proc (device: VkDevice, swapchain: VkSwapchainKHR, pDisplayTimingProperties: ptr VkRefreshCycleDurationGOOGLE): VkResult {.stdcall.}](loadProc(inst, "vkGetRefreshCycleDurationGOOGLE"))
  vkGetRenderAreaGranularity = cast[proc (device: VkDevice, renderPass: VkRenderPass, pGranularity: ptr VkExtent2D): void {.stdcall.}](loadProc(inst, "vkGetRenderAreaGranularity"))
  vkGetSemaphoreCounterValue = cast[proc (device: VkDevice, semaphore: VkSemaphore, pValue: ptr uint64): VkResult {.stdcall.}](loadProc(inst, "vkGetSemaphoreCounterValue"))
  vkGetSemaphoreFdKHR = cast[proc (device: VkDevice, pGetFdInfo: ptr VkSemaphoreGetFdInfoKHR, pFd: ptr cint): VkResult {.stdcall.}](loadProc(inst, "vkGetSemaphoreFdKHR"))
  vkGetSemaphoreWin32HandleKHR = cast[proc (device: VkDevice, pGetWin32HandleInfo: ptr VkSemaphoreGetWin32HandleInfoKHR, pHandle: ptr HANDLE): VkResult {.stdcall.}](loadProc(inst, "vkGetSemaphoreWin32HandleKHR"))
  vkGetShaderInfoAMD = cast[proc (device: VkDevice, pipeline: VkPipeline, shaderStage: VkShaderStageFlagBits, infoType: VkShaderInfoTypeAMD, pInfoSize: ptr uint, pInfo: pointer): VkResult {.stdcall.}](loadProc(inst, "vkGetShaderInfoAMD"))
  vkGetSwapchainCounterEXT = cast[proc (device: VkDevice, swapchain: VkSwapchainKHR, counter: VkSurfaceCounterFlagBitsEXT, pCounterValue: ptr uint64): VkResult {.stdcall.}](loadProc(inst, "vkGetSwapchainCounterEXT"))
  vkGetSwapchainImagesKHR = cast[proc (device: VkDevice, swapchain: VkSwapchainKHR, pSwapchainImageCount: ptr uint32, pSwapchainImages: ptr VkImage): VkResult {.stdcall.}](loadProc(inst, "vkGetSwapchainImagesKHR"))
  vkGetSwapchainStatusKHR = cast[proc (device: VkDevice, swapchain: VkSwapchainKHR): VkResult {.stdcall.}](loadProc(inst, "vkGetSwapchainStatusKHR"))
  vkGetValidationCacheDataEXT = cast[proc (device: VkDevice, validationCache: VkValidationCacheEXT, pDataSize: ptr uint, pData: pointer): VkResult {.stdcall.}](loadProc(inst, "vkGetValidationCacheDataEXT"))
  vkImportFenceFdKHR = cast[proc (device: VkDevice, pImportFenceFdInfo: ptr VkImportFenceFdInfoKHR): VkResult {.stdcall.}](loadProc(inst, "vkImportFenceFdKHR"))
  vkImportFenceWin32HandleKHR = cast[proc (device: VkDevice, pImportFenceWin32HandleInfo: ptr VkImportFenceWin32HandleInfoKHR): VkResult {.stdcall.}](loadProc(inst, "vkImportFenceWin32HandleKHR"))
  vkImportSemaphoreFdKHR = cast[proc (device: VkDevice, pImportSemaphoreFdInfo: ptr VkImportSemaphoreFdInfoKHR): VkResult {.stdcall.}](loadProc(inst, "vkImportSemaphoreFdKHR"))
  vkImportSemaphoreWin32HandleKHR = cast[proc (device: VkDevice, pImportSemaphoreWin32HandleInfo: ptr VkImportSemaphoreWin32HandleInfoKHR): VkResult {.stdcall.}](loadProc(inst, "vkImportSemaphoreWin32HandleKHR"))
  vkInitializePerformanceApiINTEL = cast[proc (device: VkDevice, pInitializeInfo: ptr VkInitializePerformanceApiInfoINTEL): VkResult {.stdcall.}](loadProc(inst, "vkInitializePerformanceApiINTEL"))
  vkInvalidateMappedMemoryRanges = cast[proc (device: VkDevice, memoryRangeCount: uint32, pMemoryRanges: ptr VkMappedMemoryRange): VkResult {.stdcall.}](loadProc(inst, "vkInvalidateMappedMemoryRanges"))
  vkMapMemory = cast[proc (device: VkDevice, memory: VkDeviceMemory, offset: VkDeviceSize, size: VkDeviceSize, flags: VkMemoryMapFlags, ppData: pointer): VkResult {.stdcall.}](loadProc(inst, "vkMapMemory"))
  vkMergePipelineCaches = cast[proc (device: VkDevice, dstCache: VkPipelineCache, srcCacheCount: uint32, pSrcCaches: ptr VkPipelineCache): VkResult {.stdcall.}](loadProc(inst, "vkMergePipelineCaches"))
  vkMergeValidationCachesEXT = cast[proc (device: VkDevice, dstCache: VkValidationCacheEXT, srcCacheCount: uint32, pSrcCaches: ptr VkValidationCacheEXT): VkResult {.stdcall.}](loadProc(inst, "vkMergeValidationCachesEXT"))
  vkQueueBeginDebugUtilsLabelEXT = cast[proc (queue: VkQueue, pLabelInfo: ptr VkDebugUtilsLabelEXT): void {.stdcall.}](loadProc(inst, "vkQueueBeginDebugUtilsLabelEXT"))
  vkQueueBindSparse = cast[proc (queue: VkQueue, bindInfoCount: uint32, pBindInfo: ptr VkBindSparseInfo, fence: VkFence): VkResult {.stdcall.}](loadProc(inst, "vkQueueBindSparse"))
  vkQueueEndDebugUtilsLabelEXT = cast[proc (queue: VkQueue): void {.stdcall.}](loadProc(inst, "vkQueueEndDebugUtilsLabelEXT"))
  vkQueueInsertDebugUtilsLabelEXT = cast[proc (queue: VkQueue, pLabelInfo: ptr VkDebugUtilsLabelEXT): void {.stdcall.}](loadProc(inst, "vkQueueInsertDebugUtilsLabelEXT"))
  vkQueuePresentKHR = cast[proc (queue: VkQueue, pPresentInfo: ptr VkPresentInfoKHR): VkResult {.stdcall.}](loadProc(inst, "vkQueuePresentKHR"))
  vkQueueSetPerformanceConfigurationINTEL = cast[proc (queue: VkQueue, configuration: VkPerformanceConfigurationINTEL): VkResult {.stdcall.}](loadProc(inst, "vkQueueSetPerformanceConfigurationINTEL"))
  vkQueueSubmit = cast[proc (queue: VkQueue, submitCount: uint32, pSubmits: ptr VkSubmitInfo, fence: VkFence): VkResult {.stdcall.}](loadProc(inst, "vkQueueSubmit"))
  vkQueueWaitIdle = cast[proc (queue: VkQueue): VkResult {.stdcall.}](loadProc(inst, "vkQueueWaitIdle"))
  vkRegisterDeviceEventEXT = cast[proc (device: VkDevice, pDeviceEventInfo: ptr VkDeviceEventInfoEXT, pAllocator: ptr VkAllocationCallbacks, pFence: ptr VkFence): VkResult {.stdcall.}](loadProc(inst, "vkRegisterDeviceEventEXT"))
  vkRegisterDisplayEventEXT = cast[proc (device: VkDevice, display: VkDisplayKHR, pDisplayEventInfo: ptr VkDisplayEventInfoEXT, pAllocator: ptr VkAllocationCallbacks, pFence: ptr VkFence): VkResult {.stdcall.}](loadProc(inst, "vkRegisterDisplayEventEXT"))
  vkReleaseDisplayEXT = cast[proc (physicalDevice: VkPhysicalDevice, display: VkDisplayKHR): VkResult {.stdcall.}](loadProc(inst, "vkReleaseDisplayEXT"))
  vkReleaseFullScreenExclusiveModeEXT = cast[proc (device: VkDevice, swapchain: VkSwapchainKHR): VkResult {.stdcall.}](loadProc(inst, "vkReleaseFullScreenExclusiveModeEXT"))
  vkReleasePerformanceConfigurationINTEL = cast[proc (device: VkDevice, configuration: VkPerformanceConfigurationINTEL): VkResult {.stdcall.}](loadProc(inst, "vkReleasePerformanceConfigurationINTEL"))
  vkReleaseProfilingLockKHR = cast[proc (device: VkDevice): void {.stdcall.}](loadProc(inst, "vkReleaseProfilingLockKHR"))
  vkResetCommandBuffer = cast[proc (commandBuffer: VkCommandBuffer, flags: VkCommandBufferResetFlags): VkResult {.stdcall.}](loadProc(inst, "vkResetCommandBuffer"))
  vkResetCommandPool = cast[proc (device: VkDevice, commandPool: VkCommandPool, flags: VkCommandPoolResetFlags): VkResult {.stdcall.}](loadProc(inst, "vkResetCommandPool"))
  vkResetDescriptorPool = cast[proc (device: VkDevice, descriptorPool: VkDescriptorPool, flags: VkDescriptorPoolResetFlags): VkResult {.stdcall.}](loadProc(inst, "vkResetDescriptorPool"))
  vkResetEvent = cast[proc (device: VkDevice, event: VkEvent): VkResult {.stdcall.}](loadProc(inst, "vkResetEvent"))
  vkResetFences = cast[proc (device: VkDevice, fenceCount: uint32, pFences: ptr VkFence): VkResult {.stdcall.}](loadProc(inst, "vkResetFences"))
  vkResetQueryPool = cast[proc (device: VkDevice, queryPool: VkQueryPool, firstQuery: uint32, queryCount: uint32): void {.stdcall.}](loadProc(inst, "vkResetQueryPool"))
  vkSetDebugUtilsObjectNameEXT = cast[proc (device: VkDevice, pNameInfo: ptr VkDebugUtilsObjectNameInfoEXT): VkResult {.stdcall.}](loadProc(inst, "vkSetDebugUtilsObjectNameEXT"))
  vkSetDebugUtilsObjectTagEXT = cast[proc (device: VkDevice, pTagInfo: ptr VkDebugUtilsObjectTagInfoEXT): VkResult {.stdcall.}](loadProc(inst, "vkSetDebugUtilsObjectTagEXT"))
  vkSetEvent = cast[proc (device: VkDevice, event: VkEvent): VkResult {.stdcall.}](loadProc(inst, "vkSetEvent"))
  vkSetHdrMetadataEXT = cast[proc (device: VkDevice, swapchainCount: uint32, pSwapchains: ptr VkSwapchainKHR, pMetadata: ptr VkHdrMetadataEXT): void {.stdcall.}](loadProc(inst, "vkSetHdrMetadataEXT"))
  vkSetLocalDimmingAMD = cast[proc (device: VkDevice, swapChain: VkSwapchainKHR, localDimmingEnable: VkBool32): void {.stdcall.}](loadProc(inst, "vkSetLocalDimmingAMD"))
  vkSetPrivateDataEXT = cast[proc (device: VkDevice, objectType: VkObjectType, objectHandle: uint64, privateDataSlot: VkPrivateDataSlotEXT, data: uint64): VkResult {.stdcall.}](loadProc(inst, "vkSetPrivateDataEXT"))
  vkSignalSemaphore = cast[proc (device: VkDevice, pSignalInfo: ptr VkSemaphoreSignalInfo): VkResult {.stdcall.}](loadProc(inst, "vkSignalSemaphore"))
  vkSubmitDebugUtilsMessageEXT = cast[proc (instance: VkInstance, messageSeverity: VkDebugUtilsMessageSeverityFlagBitsEXT, messageTypes: VkDebugUtilsMessageTypeFlagsEXT, pCallbackData: ptr VkDebugUtilsMessengerCallbackDataEXT): void {.stdcall.}](loadProc(inst, "vkSubmitDebugUtilsMessageEXT"))
  vkTrimCommandPool = cast[proc (device: VkDevice, commandPool: VkCommandPool, flags: VkCommandPoolTrimFlags): void {.stdcall.}](loadProc(inst, "vkTrimCommandPool"))
  vkUninitializePerformanceApiINTEL = cast[proc (device: VkDevice): void {.stdcall.}](loadProc(inst, "vkUninitializePerformanceApiINTEL"))
  vkUnmapMemory = cast[proc (device: VkDevice, memory: VkDeviceMemory): void {.stdcall.}](loadProc(inst, "vkUnmapMemory"))
  vkUpdateDescriptorSetWithTemplate = cast[proc (device: VkDevice, descriptorSet: VkDescriptorSet, descriptorUpdateTemplate: VkDescriptorUpdateTemplate, pData: pointer): void {.stdcall.}](loadProc(inst, "vkUpdateDescriptorSetWithTemplate"))
  vkUpdateDescriptorSets = cast[proc (device: VkDevice, descriptorWriteCount: uint32, pDescriptorWrites: ptr VkWriteDescriptorSet, descriptorCopyCount: uint32, pDescriptorCopies: ptr VkCopyDescriptorSet): void {.stdcall.}](loadProc(inst, "vkUpdateDescriptorSets"))
  vkWaitForFences = cast[proc (device: VkDevice, fenceCount: uint32, pFences: ptr VkFence, waitAll: VkBool32, timeout: uint64): VkResult {.stdcall.}](loadProc(inst, "vkWaitForFences"))
  vkWaitSemaphores = cast[proc (device: VkDevice, pWaitInfo: ptr VkSemaphoreWaitInfo, timeout: uint64): VkResult {.stdcall.}](loadProc(inst, "vkWaitSemaphores"))
  vkWriteAccelerationStructuresPropertiesKHR = cast[proc (device: VkDevice, accelerationStructureCount: uint32, pAccelerationStructures: ptr VkAccelerationStructureKHR, queryType: VkQueryType, dataSize: uint, pData: pointer, stride: uint): VkResult {.stdcall.}](loadProc(inst, "vkWriteAccelerationStructuresPropertiesKHR"))

# Enumerations
const
  VK_AMD_BUFFER_MARKER_EXTENSION_NAME* = "VK_AMD_buffer_marker".cstring
  VK_AMD_BUFFER_MARKER_SPEC_VERSION* = 1.cuint
  VK_AMD_DEVICE_COHERENT_MEMORY_EXTENSION_NAME* = "VK_AMD_device_coherent_memory".cstring
  VK_AMD_DEVICE_COHERENT_MEMORY_SPEC_VERSION* = 1.cuint
  VK_AMD_DISPLAY_NATIVE_HDR_EXTENSION_NAME* = "VK_AMD_display_native_hdr".cstring
  VK_AMD_DISPLAY_NATIVE_HDR_SPEC_VERSION* = 1.cuint
  VK_AMD_DRAW_INDIRECT_COUNT_EXTENSION_NAME* = "VK_AMD_draw_indirect_count".cstring
  VK_AMD_DRAW_INDIRECT_COUNT_SPEC_VERSION* = 2.cuint
  VK_AMD_GCN_SHADER_EXTENSION_NAME* = "VK_AMD_gcn_shader".cstring
  VK_AMD_GCN_SHADER_SPEC_VERSION* = 1.cuint
  VK_AMD_GPU_SHADER_HALF_FLOAT_EXTENSION_NAME* = "VK_AMD_gpu_shader_half_float".cstring
  VK_AMD_GPU_SHADER_HALF_FLOAT_SPEC_VERSION* = 2.cuint
  VK_AMD_GPU_SHADER_INT16_EXTENSION_NAME* = "VK_AMD_gpu_shader_int16".cstring
  VK_AMD_GPU_SHADER_INT16_SPEC_VERSION* = 2.cuint
  VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_EXTENSION_NAME* = "VK_AMD_memory_overallocation_behavior".cstring
  VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_SPEC_VERSION* = 1.cuint
  VK_AMD_MIXED_ATTACHMENT_SAMPLES_EXTENSION_NAME* = "VK_AMD_mixed_attachment_samples".cstring
  VK_AMD_MIXED_ATTACHMENT_SAMPLES_SPEC_VERSION* = 1.cuint
  VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_EXTENSION_NAME* = "VK_AMD_negative_viewport_height".cstring
  VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_SPEC_VERSION* = 1.cuint
  VK_AMD_PIPELINE_COMPILER_CONTROL_EXTENSION_NAME* = "VK_AMD_pipeline_compiler_control".cstring
  VK_AMD_PIPELINE_COMPILER_CONTROL_SPEC_VERSION* = 1.cuint
  VK_AMD_RASTERIZATION_ORDER_EXTENSION_NAME* = "VK_AMD_rasterization_order".cstring
  VK_AMD_RASTERIZATION_ORDER_SPEC_VERSION* = 1.cuint
  VK_AMD_SHADER_BALLOT_EXTENSION_NAME* = "VK_AMD_shader_ballot".cstring
  VK_AMD_SHADER_BALLOT_SPEC_VERSION* = 1.cuint
  VK_AMD_SHADER_CORE_PROPERTIES_2_EXTENSION_NAME* = "VK_AMD_shader_core_properties2".cstring
  VK_AMD_SHADER_CORE_PROPERTIES_2_SPEC_VERSION* = 1.cuint
  VK_AMD_SHADER_CORE_PROPERTIES_EXTENSION_NAME* = "VK_AMD_shader_core_properties".cstring
  VK_AMD_SHADER_CORE_PROPERTIES_SPEC_VERSION* = 2.cuint
  VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_EXTENSION_NAME* = "VK_AMD_shader_explicit_vertex_parameter".cstring
  VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_SPEC_VERSION* = 1.cuint
  VK_AMD_SHADER_FRAGMENT_MASK_EXTENSION_NAME* = "VK_AMD_shader_fragment_mask".cstring
  VK_AMD_SHADER_FRAGMENT_MASK_SPEC_VERSION* = 1.cuint
  VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_EXTENSION_NAME* = "VK_AMD_shader_image_load_store_lod".cstring
  VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_SPEC_VERSION* = 1.cuint
  VK_AMD_SHADER_INFO_EXTENSION_NAME* = "VK_AMD_shader_info".cstring
  VK_AMD_SHADER_INFO_SPEC_VERSION* = 1.cuint
  VK_AMD_SHADER_TRINARY_MINMAX_EXTENSION_NAME* = "VK_AMD_shader_trinary_minmax".cstring
  VK_AMD_SHADER_TRINARY_MINMAX_SPEC_VERSION* = 1.cuint
  VK_AMD_TEXTURE_GATHER_BIAS_LOD_EXTENSION_NAME* = "VK_AMD_texture_gather_bias_lod".cstring
  VK_AMD_TEXTURE_GATHER_BIAS_LOD_SPEC_VERSION* = 1.cuint
  VK_ANDROID_EXTERNAL_MEMORY_ANDROID_HARDWARE_BUFFER_EXTENSION_NAME* = "VK_ANDROID_external_memory_android_hardware_buffer".cstring
  VK_ANDROID_EXTERNAL_MEMORY_ANDROID_HARDWARE_BUFFER_SPEC_VERSION* = 3.cuint
  VK_ATTACHMENT_UNUSED* = not 0U32.cuint
  VK_EXT_4444_FORMATS_EXTENSION_NAME* = "VK_EXT_4444_formats".cstring
  VK_EXT_4444_FORMATS_SPEC_VERSION* = 1.cuint
  VK_EXT_ACQUIRE_XLIB_DISPLAY_EXTENSION_NAME* = "VK_EXT_acquire_xlib_display".cstring
  VK_EXT_ACQUIRE_XLIB_DISPLAY_SPEC_VERSION* = 1.cuint
  VK_EXT_ASTC_DECODE_MODE_EXTENSION_NAME* = "VK_EXT_astc_decode_mode".cstring
  VK_EXT_ASTC_DECODE_MODE_SPEC_VERSION* = 1.cuint
  VK_EXT_BLEND_OPERATION_ADVANCED_EXTENSION_NAME* = "VK_EXT_blend_operation_advanced".cstring
  VK_EXT_BLEND_OPERATION_ADVANCED_SPEC_VERSION* = 2.cuint
  VK_EXT_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME* = "VK_EXT_buffer_device_address".cstring
  VK_EXT_BUFFER_DEVICE_ADDRESS_SPEC_VERSION* = 2.cuint
  VK_EXT_CALIBRATED_TIMESTAMPS_EXTENSION_NAME* = "VK_EXT_calibrated_timestamps".cstring
  VK_EXT_CALIBRATED_TIMESTAMPS_SPEC_VERSION* = 1.cuint
  VK_EXT_CONDITIONAL_RENDERING_EXTENSION_NAME* = "VK_EXT_conditional_rendering".cstring
  VK_EXT_CONDITIONAL_RENDERING_SPEC_VERSION* = 2.cuint
  VK_EXT_CONSERVATIVE_RASTERIZATION_EXTENSION_NAME* = "VK_EXT_conservative_rasterization".cstring
  VK_EXT_CONSERVATIVE_RASTERIZATION_SPEC_VERSION* = 1.cuint
  VK_EXT_CUSTOM_BORDER_COLOR_EXTENSION_NAME* = "VK_EXT_custom_border_color".cstring
  VK_EXT_CUSTOM_BORDER_COLOR_SPEC_VERSION* = 12.cuint
  VK_EXT_DEBUG_MARKER_EXTENSION_NAME* = "VK_EXT_debug_marker".cstring
  VK_EXT_DEBUG_MARKER_SPEC_VERSION* = 4.cuint
  VK_EXT_DEBUG_REPORT_EXTENSION_NAME* = "VK_EXT_debug_report".cstring
  VK_EXT_DEBUG_REPORT_SPEC_VERSION* = 9.cuint
  VK_EXT_DEBUG_UTILS_EXTENSION_NAME* = "VK_EXT_debug_utils".cstring
  VK_EXT_DEBUG_UTILS_SPEC_VERSION* = 2.cuint
  VK_EXT_DEPTH_CLIP_ENABLE_EXTENSION_NAME* = "VK_EXT_depth_clip_enable".cstring
  VK_EXT_DEPTH_CLIP_ENABLE_SPEC_VERSION* = 1.cuint
  VK_EXT_DEPTH_RANGE_UNRESTRICTED_EXTENSION_NAME* = "VK_EXT_depth_range_unrestricted".cstring
  VK_EXT_DEPTH_RANGE_UNRESTRICTED_SPEC_VERSION* = 1.cuint
  VK_EXT_DESCRIPTOR_INDEXING_EXTENSION_NAME* = "VK_EXT_descriptor_indexing".cstring
  VK_EXT_DESCRIPTOR_INDEXING_SPEC_VERSION* = 2.cuint
  VK_EXT_DIRECTFB_SURFACE_EXTENSION_NAME* = "VK_EXT_directfb_surface".cstring
  VK_EXT_DIRECTFB_SURFACE_SPEC_VERSION* = 1.cuint
  VK_EXT_DIRECT_MODE_DISPLAY_EXTENSION_NAME* = "VK_EXT_direct_mode_display".cstring
  VK_EXT_DIRECT_MODE_DISPLAY_SPEC_VERSION* = 1.cuint
  VK_EXT_DISCARD_RECTANGLES_EXTENSION_NAME* = "VK_EXT_discard_rectangles".cstring
  VK_EXT_DISCARD_RECTANGLES_SPEC_VERSION* = 1.cuint
  VK_EXT_DISPLAY_CONTROL_EXTENSION_NAME* = "VK_EXT_display_control".cstring
  VK_EXT_DISPLAY_CONTROL_SPEC_VERSION* = 1.cuint
  VK_EXT_DISPLAY_SURFACE_COUNTER_EXTENSION_NAME* = "VK_EXT_display_surface_counter".cstring
  VK_EXT_DISPLAY_SURFACE_COUNTER_SPEC_VERSION* = 1.cuint
  VK_EXT_EXTENDED_DYNAMIC_STATE_EXTENSION_NAME* = "VK_EXT_extended_dynamic_state".cstring
  VK_EXT_EXTENDED_DYNAMIC_STATE_SPEC_VERSION* = 1.cuint
  VK_EXT_EXTERNAL_MEMORY_DMA_BUF_EXTENSION_NAME* = "VK_EXT_external_memory_dma_buf".cstring
  VK_EXT_EXTERNAL_MEMORY_DMA_BUF_SPEC_VERSION* = 1.cuint
  VK_EXT_EXTERNAL_MEMORY_HOST_EXTENSION_NAME* = "VK_EXT_external_memory_host".cstring
  VK_EXT_EXTERNAL_MEMORY_HOST_SPEC_VERSION* = 1.cuint
  VK_EXT_FILTER_CUBIC_EXTENSION_NAME* = "VK_EXT_filter_cubic".cstring
  VK_EXT_FILTER_CUBIC_SPEC_VERSION* = 3.cuint
  VK_EXT_FRAGMENT_DENSITY_MAP_2_EXTENSION_NAME* = "VK_EXT_fragment_density_map2".cstring
  VK_EXT_FRAGMENT_DENSITY_MAP_2_SPEC_VERSION* = 1.cuint
  VK_EXT_FRAGMENT_DENSITY_MAP_EXTENSION_NAME* = "VK_EXT_fragment_density_map".cstring
  VK_EXT_FRAGMENT_DENSITY_MAP_SPEC_VERSION* = 1.cuint
  VK_EXT_FRAGMENT_SHADER_INTERLOCK_EXTENSION_NAME* = "VK_EXT_fragment_shader_interlock".cstring
  VK_EXT_FRAGMENT_SHADER_INTERLOCK_SPEC_VERSION* = 1.cuint
  VK_EXT_FULL_SCREEN_EXCLUSIVE_EXTENSION_NAME* = "VK_EXT_full_screen_exclusive".cstring
  VK_EXT_FULL_SCREEN_EXCLUSIVE_SPEC_VERSION* = 4.cuint
  VK_EXT_GLOBAL_PRIORITY_EXTENSION_NAME* = "VK_EXT_global_priority".cstring
  VK_EXT_GLOBAL_PRIORITY_SPEC_VERSION* = 2.cuint
  VK_EXT_HDR_METADATA_EXTENSION_NAME* = "VK_EXT_hdr_metadata".cstring
  VK_EXT_HDR_METADATA_SPEC_VERSION* = 2.cuint
  VK_EXT_HEADLESS_SURFACE_EXTENSION_NAME* = "VK_EXT_headless_surface".cstring
  VK_EXT_HEADLESS_SURFACE_SPEC_VERSION* = 1.cuint
  VK_EXT_HOST_QUERY_RESET_EXTENSION_NAME* = "VK_EXT_host_query_reset".cstring
  VK_EXT_HOST_QUERY_RESET_SPEC_VERSION* = 1.cuint
  VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_EXTENSION_NAME* = "VK_EXT_image_drm_format_modifier".cstring
  VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_SPEC_VERSION* = 1.cuint
  VK_EXT_IMAGE_ROBUSTNESS_EXTENSION_NAME* = "VK_EXT_image_robustness".cstring
  VK_EXT_IMAGE_ROBUSTNESS_SPEC_VERSION* = 1.cuint
  VK_EXT_INDEX_TYPE_UINT8_EXTENSION_NAME* = "VK_EXT_index_type_uint8".cstring
  VK_EXT_INDEX_TYPE_UINT8_SPEC_VERSION* = 1.cuint
  VK_EXT_INLINE_UNIFORM_BLOCK_EXTENSION_NAME* = "VK_EXT_inline_uniform_block".cstring
  VK_EXT_INLINE_UNIFORM_BLOCK_SPEC_VERSION* = 1.cuint
  VK_EXT_LINE_RASTERIZATION_EXTENSION_NAME* = "VK_EXT_line_rasterization".cstring
  VK_EXT_LINE_RASTERIZATION_SPEC_VERSION* = 1.cuint
  VK_EXT_MEMORY_BUDGET_EXTENSION_NAME* = "VK_EXT_memory_budget".cstring
  VK_EXT_MEMORY_BUDGET_SPEC_VERSION* = 1.cuint
  VK_EXT_MEMORY_PRIORITY_EXTENSION_NAME* = "VK_EXT_memory_priority".cstring
  VK_EXT_MEMORY_PRIORITY_SPEC_VERSION* = 1.cuint
  VK_EXT_METAL_SURFACE_EXTENSION_NAME* = "VK_EXT_metal_surface".cstring
  VK_EXT_METAL_SURFACE_SPEC_VERSION* = 1.cuint
  VK_EXT_PCI_BUS_INFO_EXTENSION_NAME* = "VK_EXT_pci_bus_info".cstring
  VK_EXT_PCI_BUS_INFO_SPEC_VERSION* = 2.cuint
  VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_EXTENSION_NAME* = "VK_EXT_pipeline_creation_cache_control".cstring
  VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_SPEC_VERSION* = 3.cuint
  VK_EXT_PIPELINE_CREATION_FEEDBACK_EXTENSION_NAME* = "VK_EXT_pipeline_creation_feedback".cstring
  VK_EXT_PIPELINE_CREATION_FEEDBACK_SPEC_VERSION* = 1.cuint
  VK_EXT_POST_DEPTH_COVERAGE_EXTENSION_NAME* = "VK_EXT_post_depth_coverage".cstring
  VK_EXT_POST_DEPTH_COVERAGE_SPEC_VERSION* = 1.cuint
  VK_EXT_PRIVATE_DATA_EXTENSION_NAME* = "VK_EXT_private_data".cstring
  VK_EXT_PRIVATE_DATA_SPEC_VERSION* = 1.cuint
  VK_EXT_QUEUE_FAMILY_FOREIGN_EXTENSION_NAME* = "VK_EXT_queue_family_foreign".cstring
  VK_EXT_QUEUE_FAMILY_FOREIGN_SPEC_VERSION* = 1.cuint
  VK_EXT_ROBUSTNESS_2_EXTENSION_NAME* = "VK_EXT_robustness2".cstring
  VK_EXT_ROBUSTNESS_2_SPEC_VERSION* = 1.cuint
  VK_EXT_SAMPLER_FILTER_MINMAX_EXTENSION_NAME* = "VK_EXT_sampler_filter_minmax".cstring
  VK_EXT_SAMPLER_FILTER_MINMAX_SPEC_VERSION* = 2.cuint
  VK_EXT_SAMPLE_LOCATIONS_EXTENSION_NAME* = "VK_EXT_sample_locations".cstring
  VK_EXT_SAMPLE_LOCATIONS_SPEC_VERSION* = 1.cuint
  VK_EXT_SCALAR_BLOCK_LAYOUT_EXTENSION_NAME* = "VK_EXT_scalar_block_layout".cstring
  VK_EXT_SCALAR_BLOCK_LAYOUT_SPEC_VERSION* = 1.cuint
  VK_EXT_SEPARATE_STENCIL_USAGE_EXTENSION_NAME* = "VK_EXT_separate_stencil_usage".cstring
  VK_EXT_SEPARATE_STENCIL_USAGE_SPEC_VERSION* = 1.cuint
  VK_EXT_SHADER_ATOMIC_FLOAT_EXTENSION_NAME* = "VK_EXT_shader_atomic_float".cstring
  VK_EXT_SHADER_ATOMIC_FLOAT_SPEC_VERSION* = 1.cuint
  VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_EXTENSION_NAME* = "VK_EXT_shader_demote_to_helper_invocation".cstring
  VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_SPEC_VERSION* = 1.cuint
  VK_EXT_SHADER_STENCIL_EXPORT_EXTENSION_NAME* = "VK_EXT_shader_stencil_export".cstring
  VK_EXT_SHADER_STENCIL_EXPORT_SPEC_VERSION* = 1.cuint
  VK_EXT_SHADER_SUBGROUP_BALLOT_EXTENSION_NAME* = "VK_EXT_shader_subgroup_ballot".cstring
  VK_EXT_SHADER_SUBGROUP_BALLOT_SPEC_VERSION* = 1.cuint
  VK_EXT_SHADER_SUBGROUP_VOTE_EXTENSION_NAME* = "VK_EXT_shader_subgroup_vote".cstring
  VK_EXT_SHADER_SUBGROUP_VOTE_SPEC_VERSION* = 1.cuint
  VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_EXTENSION_NAME* = "VK_EXT_shader_viewport_index_layer".cstring
  VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_SPEC_VERSION* = 1.cuint
  VK_EXT_SUBGROUP_SIZE_CONTROL_EXTENSION_NAME* = "VK_EXT_subgroup_size_control".cstring
  VK_EXT_SUBGROUP_SIZE_CONTROL_SPEC_VERSION* = 2.cuint
  VK_EXT_SWAPCHAIN_COLOR_SPACE_EXTENSION_NAME* = "VK_EXT_swapchain_colorspace".cstring
  VK_EXT_SWAPCHAIN_COLOR_SPACE_SPEC_VERSION* = 4.cuint
  VK_EXT_TEXEL_BUFFER_ALIGNMENT_EXTENSION_NAME* = "VK_EXT_texel_buffer_alignment".cstring
  VK_EXT_TEXEL_BUFFER_ALIGNMENT_SPEC_VERSION* = 1.cuint
  VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_EXTENSION_NAME* = "VK_EXT_texture_compression_astc_hdr".cstring
  VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_SPEC_VERSION* = 1.cuint
  VK_EXT_TOOLING_INFO_EXTENSION_NAME* = "VK_EXT_tooling_info".cstring
  VK_EXT_TOOLING_INFO_SPEC_VERSION* = 1.cuint
  VK_EXT_TRANSFORM_FEEDBACK_EXTENSION_NAME* = "VK_EXT_transform_feedback".cstring
  VK_EXT_TRANSFORM_FEEDBACK_SPEC_VERSION* = 1.cuint
  VK_EXT_VALIDATION_CACHE_EXTENSION_NAME* = "VK_EXT_validation_cache".cstring
  VK_EXT_VALIDATION_CACHE_SPEC_VERSION* = 1.cuint
  VK_EXT_VALIDATION_FEATURES_EXTENSION_NAME* = "VK_EXT_validation_features".cstring
  VK_EXT_VALIDATION_FEATURES_SPEC_VERSION* = 4.cuint
  VK_EXT_VALIDATION_FLAGS_EXTENSION_NAME* = "VK_EXT_validation_flags".cstring
  VK_EXT_VALIDATION_FLAGS_SPEC_VERSION* = 2.cuint
  VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME* = "VK_EXT_vertex_attribute_divisor".cstring
  VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION* = 3.cuint
  VK_EXT_YCBCR_IMAGE_ARRAYS_EXTENSION_NAME* = "VK_EXT_ycbcr_image_arrays".cstring
  VK_EXT_YCBCR_IMAGE_ARRAYS_SPEC_VERSION* = 1.cuint
  VK_FALSE* = 0.VkBool32
  VK_FUCHSIA_IMAGEPIPE_SURFACE_EXTENSION_NAME* = "VK_FUCHSIA_imagepipe_surface".cstring
  VK_FUCHSIA_IMAGEPIPE_SURFACE_SPEC_VERSION* = 1.cuint
  VK_GGP_FRAME_TOKEN_EXTENSION_NAME* = "VK_GGP_frame_token".cstring
  VK_GGP_FRAME_TOKEN_SPEC_VERSION* = 1.cuint
  VK_GGP_STREAM_DESCRIPTOR_SURFACE_EXTENSION_NAME* = "VK_GGP_stream_descriptor_surface".cstring
  VK_GGP_STREAM_DESCRIPTOR_SURFACE_SPEC_VERSION* = 1.cuint
  VK_GOOGLE_DECORATE_STRING_EXTENSION_NAME* = "VK_GOOGLE_decorate_string".cstring
  VK_GOOGLE_DECORATE_STRING_SPEC_VERSION* = 1.cuint
  VK_GOOGLE_DISPLAY_TIMING_EXTENSION_NAME* = "VK_GOOGLE_display_timing".cstring
  VK_GOOGLE_DISPLAY_TIMING_SPEC_VERSION* = 1.cuint
  VK_GOOGLE_HLSL_FUNCTIONALITY1_EXTENSION_NAME* = "VK_GOOGLE_hlsl_functionality1".cstring
  VK_GOOGLE_HLSL_FUNCTIONALITY1_SPEC_VERSION* = 1.cuint
  VK_GOOGLE_USER_TYPE_EXTENSION_NAME* = "VK_GOOGLE_user_type".cstring
  VK_GOOGLE_USER_TYPE_SPEC_VERSION* = 1.cuint
  VK_IMG_FILTER_CUBIC_EXTENSION_NAME* = "VK_IMG_filter_cubic".cstring
  VK_IMG_FILTER_CUBIC_SPEC_VERSION* = 1.cuint
  VK_IMG_FORMAT_PVRTC_EXTENSION_NAME* = "VK_IMG_format_pvrtc".cstring
  VK_IMG_FORMAT_PVRTC_SPEC_VERSION* = 1.cuint
  VK_INTEL_PERFORMANCE_QUERY_EXTENSION_NAME* = "VK_INTEL_performance_query".cstring
  VK_INTEL_PERFORMANCE_QUERY_SPEC_VERSION* = 2.cuint
  VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_EXTENSION_NAME* = "VK_INTEL_shader_integer_functions2".cstring
  VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_SPEC_VERSION* = 1.cuint
  VK_KHR_16BIT_STORAGE_EXTENSION_NAME* = "VK_KHR_16bit_storage".cstring
  VK_KHR_16BIT_STORAGE_SPEC_VERSION* = 1.cuint
  VK_KHR_8BIT_STORAGE_EXTENSION_NAME* = "VK_KHR_8bit_storage".cstring
  VK_KHR_8BIT_STORAGE_SPEC_VERSION* = 1.cuint
  VK_KHR_ANDROID_SURFACE_EXTENSION_NAME* = "VK_KHR_android_surface".cstring
  VK_KHR_ANDROID_SURFACE_SPEC_VERSION* = 6.cuint
  VK_KHR_BIND_MEMORY_2_EXTENSION_NAME* = "VK_KHR_bind_memory2".cstring
  VK_KHR_BIND_MEMORY_2_SPEC_VERSION* = 1.cuint
  VK_KHR_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME* = "VK_KHR_buffer_device_address".cstring
  VK_KHR_BUFFER_DEVICE_ADDRESS_SPEC_VERSION* = 1.cuint
  VK_KHR_CREATE_RENDERPASS_2_EXTENSION_NAME* = "VK_KHR_create_renderpass2".cstring
  VK_KHR_CREATE_RENDERPASS_2_SPEC_VERSION* = 1.cuint
  VK_KHR_DEDICATED_ALLOCATION_EXTENSION_NAME* = "VK_KHR_dedicated_allocation".cstring
  VK_KHR_DEDICATED_ALLOCATION_SPEC_VERSION* = 3.cuint
  VK_KHR_DEFERRED_HOST_OPERATIONS_EXTENSION_NAME* = "VK_KHR_deferred_host_operations".cstring
  VK_KHR_DEFERRED_HOST_OPERATIONS_SPEC_VERSION* = 3.cuint
  VK_KHR_DEPTH_STENCIL_RESOLVE_EXTENSION_NAME* = "VK_KHR_depth_stencil_resolve".cstring
  VK_KHR_DEPTH_STENCIL_RESOLVE_SPEC_VERSION* = 1.cuint
  VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_EXTENSION_NAME* = "VK_KHR_descriptor_update_template".cstring
  VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_SPEC_VERSION* = 1.cuint
  VK_KHR_DEVICE_GROUP_CREATION_EXTENSION_NAME* = "VK_KHR_device_group_creation".cstring
  VK_KHR_DEVICE_GROUP_CREATION_SPEC_VERSION* = 1.cuint
  VK_KHR_DEVICE_GROUP_EXTENSION_NAME* = "VK_KHR_device_group".cstring
  VK_KHR_DEVICE_GROUP_SPEC_VERSION* = 4.cuint
  VK_KHR_DISPLAY_EXTENSION_NAME* = "VK_KHR_display".cstring
  VK_KHR_DISPLAY_SPEC_VERSION* = 23.cuint
  VK_KHR_DISPLAY_SWAPCHAIN_EXTENSION_NAME* = "VK_KHR_display_swapchain".cstring
  VK_KHR_DISPLAY_SWAPCHAIN_SPEC_VERSION* = 10.cuint
  VK_KHR_DRAW_INDIRECT_COUNT_EXTENSION_NAME* = "VK_KHR_draw_indirect_count".cstring
  VK_KHR_DRAW_INDIRECT_COUNT_SPEC_VERSION* = 1.cuint
  VK_KHR_DRIVER_PROPERTIES_EXTENSION_NAME* = "VK_KHR_driver_properties".cstring
  VK_KHR_DRIVER_PROPERTIES_SPEC_VERSION* = 1.cuint
  VK_KHR_EXTERNAL_FENCE_CAPABILITIES_EXTENSION_NAME* = "VK_KHR_external_fence_capabilities".cstring
  VK_KHR_EXTERNAL_FENCE_CAPABILITIES_SPEC_VERSION* = 1.cuint
  VK_KHR_EXTERNAL_FENCE_EXTENSION_NAME* = "VK_KHR_external_fence".cstring
  VK_KHR_EXTERNAL_FENCE_FD_EXTENSION_NAME* = "VK_KHR_external_fence_fd".cstring
  VK_KHR_EXTERNAL_FENCE_FD_SPEC_VERSION* = 1.cuint
  VK_KHR_EXTERNAL_FENCE_SPEC_VERSION* = 1.cuint
  VK_KHR_EXTERNAL_FENCE_WIN32_EXTENSION_NAME* = "VK_KHR_external_fence_win32".cstring
  VK_KHR_EXTERNAL_FENCE_WIN32_SPEC_VERSION* = 1.cuint
  VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME* = "VK_KHR_external_memory_capabilities".cstring
  VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION* = 1.cuint
  VK_KHR_EXTERNAL_MEMORY_EXTENSION_NAME* = "VK_KHR_external_memory".cstring
  VK_KHR_EXTERNAL_MEMORY_FD_EXTENSION_NAME* = "VK_KHR_external_memory_fd".cstring
  VK_KHR_EXTERNAL_MEMORY_FD_SPEC_VERSION* = 1.cuint
  VK_KHR_EXTERNAL_MEMORY_SPEC_VERSION* = 1.cuint
  VK_KHR_EXTERNAL_MEMORY_WIN32_EXTENSION_NAME* = "VK_KHR_external_memory_win32".cstring
  VK_KHR_EXTERNAL_MEMORY_WIN32_SPEC_VERSION* = 1.cuint
  VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_EXTENSION_NAME* = "VK_KHR_external_semaphore_capabilities".cstring
  VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_SPEC_VERSION* = 1.cuint
  VK_KHR_EXTERNAL_SEMAPHORE_EXTENSION_NAME* = "VK_KHR_external_semaphore".cstring
  VK_KHR_EXTERNAL_SEMAPHORE_FD_EXTENSION_NAME* = "VK_KHR_external_semaphore_fd".cstring
  VK_KHR_EXTERNAL_SEMAPHORE_FD_SPEC_VERSION* = 1.cuint
  VK_KHR_EXTERNAL_SEMAPHORE_SPEC_VERSION* = 1.cuint
  VK_KHR_EXTERNAL_SEMAPHORE_WIN32_EXTENSION_NAME* = "VK_KHR_external_semaphore_win32".cstring
  VK_KHR_EXTERNAL_SEMAPHORE_WIN32_SPEC_VERSION* = 1.cuint
  VK_KHR_GET_DISPLAY_PROPERTIES_2_EXTENSION_NAME* = "VK_KHR_get_display_properties2".cstring
  VK_KHR_GET_DISPLAY_PROPERTIES_2_SPEC_VERSION* = 1.cuint
  VK_KHR_GET_MEMORY_REQUIREMENTS_2_EXTENSION_NAME* = "VK_KHR_get_memory_requirements2".cstring
  VK_KHR_GET_MEMORY_REQUIREMENTS_2_SPEC_VERSION* = 1.cuint
  VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME* = "VK_KHR_get_physical_device_properties2".cstring
  VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_SPEC_VERSION* = 2.cuint
  VK_KHR_GET_SURFACE_CAPABILITIES_2_EXTENSION_NAME* = "VK_KHR_get_surface_capabilities2".cstring
  VK_KHR_GET_SURFACE_CAPABILITIES_2_SPEC_VERSION* = 1.cuint
  VK_KHR_IMAGELESS_FRAMEBUFFER_EXTENSION_NAME* = "VK_KHR_imageless_framebuffer".cstring
  VK_KHR_IMAGELESS_FRAMEBUFFER_SPEC_VERSION* = 1.cuint
  VK_KHR_IMAGE_FORMAT_LIST_EXTENSION_NAME* = "VK_KHR_image_format_list".cstring
  VK_KHR_IMAGE_FORMAT_LIST_SPEC_VERSION* = 1.cuint
  VK_KHR_INCREMENTAL_PRESENT_EXTENSION_NAME* = "VK_KHR_incremental_present".cstring
  VK_KHR_INCREMENTAL_PRESENT_SPEC_VERSION* = 1.cuint
  VK_KHR_MAINTENANCE1_EXTENSION_NAME* = "VK_KHR_maintenance1".cstring
  VK_KHR_MAINTENANCE1_SPEC_VERSION* = 2.cuint
  VK_KHR_MAINTENANCE2_EXTENSION_NAME* = "VK_KHR_maintenance2".cstring
  VK_KHR_MAINTENANCE2_SPEC_VERSION* = 1.cuint
  VK_KHR_MAINTENANCE3_EXTENSION_NAME* = "VK_KHR_maintenance3".cstring
  VK_KHR_MAINTENANCE3_SPEC_VERSION* = 1.cuint
  VK_KHR_MULTIVIEW_EXTENSION_NAME* = "VK_KHR_multiview".cstring
  VK_KHR_MULTIVIEW_SPEC_VERSION* = 1.cuint
  VK_KHR_PERFORMANCE_QUERY_EXTENSION_NAME* = "VK_KHR_performance_query".cstring
  VK_KHR_PERFORMANCE_QUERY_SPEC_VERSION* = 1.cuint
  VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_EXTENSION_NAME* = "VK_KHR_pipeline_executable_properties".cstring
  VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_SPEC_VERSION* = 1.cuint
  VK_KHR_PIPELINE_LIBRARY_EXTENSION_NAME* = "VK_KHR_pipeline_library".cstring
  VK_KHR_PIPELINE_LIBRARY_SPEC_VERSION* = 1.cuint
  VK_KHR_PUSH_DESCRIPTOR_EXTENSION_NAME* = "VK_KHR_push_descriptor".cstring
  VK_KHR_PUSH_DESCRIPTOR_SPEC_VERSION* = 2.cuint
  VK_KHR_RAY_TRACING_EXTENSION_NAME* = "VK_KHR_ray_tracing".cstring
  VK_KHR_RAY_TRACING_SPEC_VERSION* = 8.cuint
  VK_KHR_RELAXED_BLOCK_LAYOUT_EXTENSION_NAME* = "VK_KHR_relaxed_block_layout".cstring
  VK_KHR_RELAXED_BLOCK_LAYOUT_SPEC_VERSION* = 1.cuint
  VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_EXTENSION_NAME* = "VK_KHR_sampler_mirror_clamp_to_edge".cstring
  VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_SPEC_VERSION* = 3.cuint
  VK_KHR_SAMPLER_YCBCR_CONVERSION_EXTENSION_NAME* = "VK_KHR_sampler_ycbcr_conversion".cstring
  VK_KHR_SAMPLER_YCBCR_CONVERSION_SPEC_VERSION* = 14.cuint
  VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_EXTENSION_NAME* = "VK_KHR_separate_depth_stencil_layouts".cstring
  VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_SPEC_VERSION* = 1.cuint
  VK_KHR_SHADER_ATOMIC_INT64_EXTENSION_NAME* = "VK_KHR_shader_atomic_int64".cstring
  VK_KHR_SHADER_ATOMIC_INT64_SPEC_VERSION* = 1.cuint
  VK_KHR_SHADER_CLOCK_EXTENSION_NAME* = "VK_KHR_shader_clock".cstring
  VK_KHR_SHADER_CLOCK_SPEC_VERSION* = 1.cuint
  VK_KHR_SHADER_DRAW_PARAMETERS_EXTENSION_NAME* = "VK_KHR_shader_draw_parameters".cstring
  VK_KHR_SHADER_DRAW_PARAMETERS_SPEC_VERSION* = 1.cuint
  VK_KHR_SHADER_FLOAT16_INT8_EXTENSION_NAME* = "VK_KHR_shader_float16_int8".cstring
  VK_KHR_SHADER_FLOAT16_INT8_SPEC_VERSION* = 1.cuint
  VK_KHR_SHADER_FLOAT_CONTROLS_EXTENSION_NAME* = "VK_KHR_shader_float_controls".cstring
  VK_KHR_SHADER_FLOAT_CONTROLS_SPEC_VERSION* = 4.cuint
  VK_KHR_SHADER_NON_SEMANTIC_INFO_EXTENSION_NAME* = "VK_KHR_shader_non_semantic_info".cstring
  VK_KHR_SHADER_NON_SEMANTIC_INFO_SPEC_VERSION* = 1.cuint
  VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_EXTENSION_NAME* = "VK_KHR_shader_subgroup_extended_types".cstring
  VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_SPEC_VERSION* = 1.cuint
  VK_KHR_SHARED_PRESENTABLE_IMAGE_EXTENSION_NAME* = "VK_KHR_shared_presentable_image".cstring
  VK_KHR_SHARED_PRESENTABLE_IMAGE_SPEC_VERSION* = 1.cuint
  VK_KHR_SPIRV_1_4_EXTENSION_NAME* = "VK_KHR_spirv_1_4".cstring
  VK_KHR_SPIRV_1_4_SPEC_VERSION* = 1.cuint
  VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_EXTENSION_NAME* = "VK_KHR_storage_buffer_storage_class".cstring
  VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_SPEC_VERSION* = 1.cuint
  VK_KHR_SURFACE_EXTENSION_NAME* = "VK_KHR_surface".cstring
  VK_KHR_SURFACE_PROTECTED_CAPABILITIES_EXTENSION_NAME* = "VK_KHR_surface_protected_capabilities".cstring
  VK_KHR_SURFACE_PROTECTED_CAPABILITIES_SPEC_VERSION* = 1.cuint
  VK_KHR_SURFACE_SPEC_VERSION* = 25.cuint
  VK_KHR_SWAPCHAIN_EXTENSION_NAME* = "VK_KHR_swapchain".cstring
  VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_EXTENSION_NAME* = "VK_KHR_swapchain_mutable_format".cstring
  VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_SPEC_VERSION* = 1.cuint
  VK_KHR_SWAPCHAIN_SPEC_VERSION* = 70.cuint
  VK_KHR_TIMELINE_SEMAPHORE_EXTENSION_NAME* = "VK_KHR_timeline_semaphore".cstring
  VK_KHR_TIMELINE_SEMAPHORE_SPEC_VERSION* = 2.cuint
  VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_EXTENSION_NAME* = "VK_KHR_uniform_buffer_standard_layout".cstring
  VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_SPEC_VERSION* = 1.cuint
  VK_KHR_VARIABLE_POINTERS_EXTENSION_NAME* = "VK_KHR_variable_pointers".cstring
  VK_KHR_VARIABLE_POINTERS_SPEC_VERSION* = 1.cuint
  VK_KHR_VULKAN_MEMORY_MODEL_EXTENSION_NAME* = "VK_KHR_vulkan_memory_model".cstring
  VK_KHR_VULKAN_MEMORY_MODEL_SPEC_VERSION* = 3.cuint
  VK_KHR_WAYLAND_SURFACE_EXTENSION_NAME* = "VK_KHR_wayland_surface".cstring
  VK_KHR_WAYLAND_SURFACE_SPEC_VERSION* = 6.cuint
  VK_KHR_WIN32_KEYED_MUTEX_EXTENSION_NAME* = "VK_KHR_win32_keyed_mutex".cstring
  VK_KHR_WIN32_KEYED_MUTEX_SPEC_VERSION* = 1.cuint
  VK_KHR_WIN32_SURFACE_EXTENSION_NAME* = "VK_KHR_win32_surface".cstring
  VK_KHR_WIN32_SURFACE_SPEC_VERSION* = 6.cuint
  VK_KHR_XCB_SURFACE_EXTENSION_NAME* = "VK_KHR_xcb_surface".cstring
  VK_KHR_XCB_SURFACE_SPEC_VERSION* = 6.cuint
  VK_KHR_XLIB_SURFACE_EXTENSION_NAME* = "VK_KHR_xlib_surface".cstring
  VK_KHR_XLIB_SURFACE_SPEC_VERSION* = 6.cuint
  VK_LOD_CLAMP_NONE* = 1000.0f.float32
  VK_LUID_SIZE* = 8.cuint
  VK_LUID_SIZE_KHR* = 8.cuint
  VK_MAX_DESCRIPTION_SIZE* = 256.cuint
  VK_MAX_DEVICE_GROUP_SIZE* = 32.cuint
  VK_MAX_DEVICE_GROUP_SIZE_KHR* = 32.cuint
  VK_MAX_DRIVER_INFO_SIZE* = 256.cuint
  VK_MAX_DRIVER_INFO_SIZE_KHR* = 256.cuint
  VK_MAX_DRIVER_NAME_SIZE* = 256.cuint
  VK_MAX_DRIVER_NAME_SIZE_KHR* = 256.cuint
  VK_MAX_EXTENSION_NAME_SIZE* = 256.cuint
  VK_MAX_MEMORY_HEAPS* = 16.cuint
  VK_MAX_MEMORY_TYPES* = 32.cuint
  VK_MAX_PHYSICAL_DEVICE_NAME_SIZE* = 256.cuint
  VK_MVK_IOS_SURFACE_EXTENSION_NAME* = "VK_MVK_ios_surface".cstring
  VK_MVK_IOS_SURFACE_SPEC_VERSION* = 3.cuint
  VK_MVK_MACOS_SURFACE_EXTENSION_NAME* = "VK_MVK_macos_surface".cstring
  VK_MVK_MACOS_SURFACE_SPEC_VERSION* = 3.cuint
  VK_NN_VI_SURFACE_EXTENSION_NAME* = "VK_NN_vi_surface".cstring
  VK_NN_VI_SURFACE_SPEC_VERSION* = 1.cuint
  VK_NVX_IMAGE_VIEW_HANDLE_EXTENSION_NAME* = "VK_NVX_image_view_handle".cstring
  VK_NVX_IMAGE_VIEW_HANDLE_SPEC_VERSION* = 2.cuint
  VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_EXTENSION_NAME* = "VK_NVX_multiview_per_view_attributes".cstring
  VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_SPEC_VERSION* = 1.cuint
  VK_NV_CLIP_SPACE_W_SCALING_EXTENSION_NAME* = "VK_NV_clip_space_w_scaling".cstring
  VK_NV_CLIP_SPACE_W_SCALING_SPEC_VERSION* = 1.cuint
  VK_NV_COMPUTE_SHADER_DERIVATIVES_EXTENSION_NAME* = "VK_NV_compute_shader_derivatives".cstring
  VK_NV_COMPUTE_SHADER_DERIVATIVES_SPEC_VERSION* = 1.cuint
  VK_NV_COOPERATIVE_MATRIX_EXTENSION_NAME* = "VK_NV_cooperative_matrix".cstring
  VK_NV_COOPERATIVE_MATRIX_SPEC_VERSION* = 1.cuint
  VK_NV_CORNER_SAMPLED_IMAGE_EXTENSION_NAME* = "VK_NV_corner_sampled_image".cstring
  VK_NV_CORNER_SAMPLED_IMAGE_SPEC_VERSION* = 2.cuint
  VK_NV_COVERAGE_REDUCTION_MODE_EXTENSION_NAME* = "VK_NV_coverage_reduction_mode".cstring
  VK_NV_COVERAGE_REDUCTION_MODE_SPEC_VERSION* = 1.cuint
  VK_NV_DEDICATED_ALLOCATION_EXTENSION_NAME* = "VK_NV_dedicated_allocation".cstring
  VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_EXTENSION_NAME* = "VK_NV_dedicated_allocation_image_aliasing".cstring
  VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_SPEC_VERSION* = 1.cuint
  VK_NV_DEDICATED_ALLOCATION_SPEC_VERSION* = 1.cuint
  VK_NV_DEVICE_DIAGNOSTICS_CONFIG_EXTENSION_NAME* = "VK_NV_device_diagnostics_config".cstring
  VK_NV_DEVICE_DIAGNOSTICS_CONFIG_SPEC_VERSION* = 1.cuint
  VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_EXTENSION_NAME* = "VK_NV_device_diagnostic_checkpoints".cstring
  VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_SPEC_VERSION* = 2.cuint
  VK_NV_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME* = "VK_NV_device_generated_commands".cstring
  VK_NV_DEVICE_GENERATED_COMMANDS_SPEC_VERSION* = 3.cuint
  VK_NV_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME* = "VK_NV_external_memory_capabilities".cstring
  VK_NV_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION* = 1.cuint
  VK_NV_EXTERNAL_MEMORY_EXTENSION_NAME* = "VK_NV_external_memory".cstring
  VK_NV_EXTERNAL_MEMORY_SPEC_VERSION* = 1.cuint
  VK_NV_EXTERNAL_MEMORY_WIN32_EXTENSION_NAME* = "VK_NV_external_memory_win32".cstring
  VK_NV_EXTERNAL_MEMORY_WIN32_SPEC_VERSION* = 1.cuint
  VK_NV_FILL_RECTANGLE_EXTENSION_NAME* = "VK_NV_fill_rectangle".cstring
  VK_NV_FILL_RECTANGLE_SPEC_VERSION* = 1.cuint
  VK_NV_FRAGMENT_COVERAGE_TO_COLOR_EXTENSION_NAME* = "VK_NV_fragment_coverage_to_color".cstring
  VK_NV_FRAGMENT_COVERAGE_TO_COLOR_SPEC_VERSION* = 1.cuint
  VK_NV_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME* = "VK_NV_fragment_shader_barycentric".cstring
  VK_NV_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION* = 1.cuint
  VK_NV_FRAMEBUFFER_MIXED_SAMPLES_EXTENSION_NAME* = "VK_NV_framebuffer_mixed_samples".cstring
  VK_NV_FRAMEBUFFER_MIXED_SAMPLES_SPEC_VERSION* = 1.cuint
  VK_NV_GEOMETRY_SHADER_PASSTHROUGH_EXTENSION_NAME* = "VK_NV_geometry_shader_passthrough".cstring
  VK_NV_GEOMETRY_SHADER_PASSTHROUGH_SPEC_VERSION* = 1.cuint
  VK_NV_GLSL_SHADER_EXTENSION_NAME* = "VK_NV_glsl_shader".cstring
  VK_NV_GLSL_SHADER_SPEC_VERSION* = 1.cuint
  VK_NV_MESH_SHADER_EXTENSION_NAME* = "VK_NV_mesh_shader".cstring
  VK_NV_MESH_SHADER_SPEC_VERSION* = 1.cuint
  VK_NV_RAY_TRACING_EXTENSION_NAME* = "VK_NV_ray_tracing".cstring
  VK_NV_RAY_TRACING_SPEC_VERSION* = 3.cuint
  VK_NV_REPRESENTATIVE_FRAGMENT_TEST_EXTENSION_NAME* = "VK_NV_representative_fragment_test".cstring
  VK_NV_REPRESENTATIVE_FRAGMENT_TEST_SPEC_VERSION* = 2.cuint
  VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_EXTENSION_NAME* = "VK_NV_sample_mask_override_coverage".cstring
  VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_SPEC_VERSION* = 1.cuint
  VK_NV_SCISSOR_EXCLUSIVE_EXTENSION_NAME* = "VK_NV_scissor_exclusive".cstring
  VK_NV_SCISSOR_EXCLUSIVE_SPEC_VERSION* = 1.cuint
  VK_NV_SHADER_IMAGE_FOOTPRINT_EXTENSION_NAME* = "VK_NV_shader_image_footprint".cstring
  VK_NV_SHADER_IMAGE_FOOTPRINT_SPEC_VERSION* = 2.cuint
  VK_NV_SHADER_SM_BUILTINS_EXTENSION_NAME* = "VK_NV_shader_sm_builtins".cstring
  VK_NV_SHADER_SM_BUILTINS_SPEC_VERSION* = 1.cuint
  VK_NV_SHADER_SUBGROUP_PARTITIONED_EXTENSION_NAME* = "VK_NV_shader_subgroup_partitioned".cstring
  VK_NV_SHADER_SUBGROUP_PARTITIONED_SPEC_VERSION* = 1.cuint
  VK_NV_SHADING_RATE_IMAGE_EXTENSION_NAME* = "VK_NV_shading_rate_image".cstring
  VK_NV_SHADING_RATE_IMAGE_SPEC_VERSION* = 3.cuint
  VK_NV_VIEWPORT_ARRAY2_EXTENSION_NAME* = "VK_NV_viewport_array2".cstring
  VK_NV_VIEWPORT_ARRAY2_SPEC_VERSION* = 1.cuint
  VK_NV_VIEWPORT_SWIZZLE_EXTENSION_NAME* = "VK_NV_viewport_swizzle".cstring
  VK_NV_VIEWPORT_SWIZZLE_SPEC_VERSION* = 1.cuint
  VK_NV_WIN32_KEYED_MUTEX_EXTENSION_NAME* = "VK_NV_win32_keyed_mutex".cstring
  VK_NV_WIN32_KEYED_MUTEX_SPEC_VERSION* = 2.cuint
  VK_QCOM_RENDER_PASS_SHADER_RESOLVE_EXTENSION_NAME* = "VK_QCOM_render_pass_shader_resolve".cstring
  VK_QCOM_RENDER_PASS_SHADER_RESOLVE_SPEC_VERSION* = 4.cuint
  VK_QCOM_RENDER_PASS_TRANSFORM_EXTENSION_NAME* = "VK_QCOM_render_pass_transform".cstring
  VK_QCOM_RENDER_PASS_TRANSFORM_SPEC_VERSION* = 1.cuint
  VK_QCOM_render_pass_store_ops_EXTENSION_NAME* = "VK_QCOM_render_pass_store_ops".cstring
  VK_QCOM_render_pass_store_ops_SPEC_VERSION* = 2.cuint
  VK_QUEUE_FAMILY_EXTERNAL* = not 0U32-1.cuint
  VK_QUEUE_FAMILY_EXTERNAL_KHR* = not 0U32-1.cuint
  VK_QUEUE_FAMILY_FOREIGN_EXT* = not 0U32-2.cuint
  VK_QUEUE_FAMILY_IGNORED* = not 0U32.cuint
  VK_REMAINING_ARRAY_LAYERS* = not 0U32.cuint
  VK_REMAINING_MIP_LEVELS* = not 0U32.cuint
  VK_SHADER_UNUSED_KHR* = not 0U32.cuint
  VK_SHADER_UNUSED_NV* = not 0U32.cuint
  VK_SUBPASS_EXTERNAL* = not 0U32.cuint
  VK_TRUE* = 1.VkBool32
  VK_UUID_SIZE* = 16.cuint
  VK_WHOLE_SIZE* = not 0U32.cuint

# Functions
var
  vkAcquireFullScreenExclusiveModeEXT*: proc (device: VkDevice, swapchain: VkSwapchainKHR): VkResult {.stdcall.}
  vkAcquireNextImage2KHR*: proc (device: VkDevice, pAcquireInfo: ptr VkAcquireNextImageInfoKHR, pImageIndex: ptr uint32): VkResult {.stdcall.}
  vkAcquireNextImageKHR*: proc (device: VkDevice, swapchain: VkSwapchainKHR, timeout: uint64, semaphore: VkSemaphore, fence: VkFence, pImageIndex: ptr uint32): VkResult {.stdcall.}
  vkAcquirePerformanceConfigurationINTEL*: proc (device: VkDevice, pAcquireInfo: ptr VkPerformanceConfigurationAcquireInfoINTEL, pConfiguration: ptr VkPerformanceConfigurationINTEL): VkResult {.stdcall.}
  vkAcquireProfilingLockKHR*: proc (device: VkDevice, pInfo: ptr VkAcquireProfilingLockInfoKHR): VkResult {.stdcall.}
  vkAcquireXlibDisplayEXT*: proc (physicalDevice: VkPhysicalDevice, dpy: ptr Display, display: VkDisplayKHR): VkResult {.stdcall.}
  vkAllocateCommandBuffers*: proc (device: VkDevice, pAllocateInfo: ptr VkCommandBufferAllocateInfo, pCommandBuffers: ptr VkCommandBuffer): VkResult {.stdcall.}
  vkAllocateDescriptorSets*: proc (device: VkDevice, pAllocateInfo: ptr VkDescriptorSetAllocateInfo, pDescriptorSets: ptr VkDescriptorSet): VkResult {.stdcall.}
  vkAllocateMemory*: proc (device: VkDevice, pAllocateInfo: ptr VkMemoryAllocateInfo, pAllocator: ptr VkAllocationCallbacks, pMemory: ptr VkDeviceMemory): VkResult {.stdcall.}
  vkBeginCommandBuffer*: proc (commandBuffer: VkCommandBuffer, pBeginInfo: ptr VkCommandBufferBeginInfo): VkResult {.stdcall.}
  vkBindAccelerationStructureMemoryKHR*: proc (device: VkDevice, bindInfoCount: uint32, pBindInfos: ptr VkBindAccelerationStructureMemoryInfoKHR): VkResult {.stdcall.}
  vkBindAccelerationStructureMemoryNV*: proc (device: VkDevice, bindInfoCount: uint32, pBindInfos: ptr VkBindAccelerationStructureMemoryInfoKHR): VkResult {.stdcall.}
  vkBindBufferMemory*: proc (device: VkDevice, buffer: VkBuffer, memory: VkDeviceMemory, memoryOffset: VkDeviceSize): VkResult {.stdcall.}
  vkBindBufferMemory2*: proc (device: VkDevice, bindInfoCount: uint32, pBindInfos: ptr VkBindBufferMemoryInfo): VkResult {.stdcall.}
  vkBindBufferMemory2KHR*: proc (device: VkDevice, bindInfoCount: uint32, pBindInfos: ptr VkBindBufferMemoryInfo): VkResult {.stdcall.}
  vkBindImageMemory*: proc (device: VkDevice, image: VkImage, memory: VkDeviceMemory, memoryOffset: VkDeviceSize): VkResult {.stdcall.}
  vkBindImageMemory2*: proc (device: VkDevice, bindInfoCount: uint32, pBindInfos: ptr VkBindImageMemoryInfo): VkResult {.stdcall.}
  vkBindImageMemory2KHR*: proc (device: VkDevice, bindInfoCount: uint32, pBindInfos: ptr VkBindImageMemoryInfo): VkResult {.stdcall.}
  vkBuildAccelerationStructureKHR*: proc (device: VkDevice, infoCount: uint32, pInfos: ptr VkAccelerationStructureBuildGeometryInfoKHR, ppOffsetInfos: ptr ptr VkAccelerationStructureBuildOffsetInfoKHR): VkResult {.stdcall.}
  vkCmdBeginConditionalRenderingEXT*: proc (commandBuffer: VkCommandBuffer, pConditionalRenderingBegin: ptr VkConditionalRenderingBeginInfoEXT): void {.stdcall.}
  vkCmdBeginDebugUtilsLabelEXT*: proc (commandBuffer: VkCommandBuffer, pLabelInfo: ptr VkDebugUtilsLabelEXT): void {.stdcall.}
  vkCmdBeginQuery*: proc (commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, query: uint32, flags: VkQueryControlFlags): void {.stdcall.}
  vkCmdBeginQueryIndexedEXT*: proc (commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, query: uint32, flags: VkQueryControlFlags, index: uint32): void {.stdcall.}
  vkCmdBeginRenderPass*: proc (commandBuffer: VkCommandBuffer, pRenderPassBegin: ptr VkRenderPassBeginInfo, contents: VkSubpassContents): void {.stdcall.}
  vkCmdBeginRenderPass2*: proc (commandBuffer: VkCommandBuffer, pRenderPassBegin: ptr VkRenderPassBeginInfo, pSubpassBeginInfo: ptr VkSubpassBeginInfo): void {.stdcall.}
  vkCmdBeginRenderPass2KHR*: proc (commandBuffer: VkCommandBuffer, pRenderPassBegin: ptr VkRenderPassBeginInfo, pSubpassBeginInfo: ptr VkSubpassBeginInfo): void {.stdcall.}
  vkCmdBeginTransformFeedbackEXT*: proc (commandBuffer: VkCommandBuffer, firstCounterBuffer: uint32, counterBufferCount: uint32, pCounterBuffers: ptr VkBuffer, pCounterBufferOffsets: ptr VkDeviceSize): void {.stdcall.}
  vkCmdBindDescriptorSets*: proc (commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, layout: VkPipelineLayout, firstSet: uint32, descriptorSetCount: uint32, pDescriptorSets: ptr VkDescriptorSet, dynamicOffsetCount: uint32, pDynamicOffsets: ptr uint32): void {.stdcall.}
  vkCmdBindIndexBuffer*: proc (commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, indexType: VkIndexType): void {.stdcall.}
  vkCmdBindPipeline*: proc (commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, pipeline: VkPipeline): void {.stdcall.}
  vkCmdBindPipelineShaderGroupNV*: proc (commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, pipeline: VkPipeline, groupIndex: uint32): void {.stdcall.}
  vkCmdBindShadingRateImageNV*: proc (commandBuffer: VkCommandBuffer, imageView: VkImageView, imageLayout: VkImageLayout): void {.stdcall.}
  vkCmdBindTransformFeedbackBuffersEXT*: proc (commandBuffer: VkCommandBuffer, firstBinding: uint32, bindingCount: uint32, pBuffers: ptr VkBuffer, pOffsets: ptr VkDeviceSize, pSizes: ptr VkDeviceSize): void {.stdcall.}
  vkCmdBindVertexBuffers*: proc (commandBuffer: VkCommandBuffer, firstBinding: uint32, bindingCount: uint32, pBuffers: ptr VkBuffer, pOffsets: ptr VkDeviceSize): void {.stdcall.}
  vkCmdBindVertexBuffers2EXT*: proc (commandBuffer: VkCommandBuffer, firstBinding: uint32, bindingCount: uint32, pBuffers: ptr VkBuffer, pOffsets: ptr VkDeviceSize, pSizes: ptr VkDeviceSize, pStrides: ptr VkDeviceSize): void {.stdcall.}
  vkCmdBlitImage*: proc (commandBuffer: VkCommandBuffer, srcImage: VkImage, srcImageLayout: VkImageLayout, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: uint32, pRegions: ptr VkImageBlit, filter: VkFilter): void {.stdcall.}
  vkCmdBuildAccelerationStructureIndirectKHR*: proc (commandBuffer: VkCommandBuffer, pInfo: ptr VkAccelerationStructureBuildGeometryInfoKHR, indirectBuffer: VkBuffer, indirectOffset: VkDeviceSize, indirectStride: uint32): void {.stdcall.}
  vkCmdBuildAccelerationStructureKHR*: proc (commandBuffer: VkCommandBuffer, infoCount: uint32, pInfos: ptr VkAccelerationStructureBuildGeometryInfoKHR, ppOffsetInfos: ptr ptr VkAccelerationStructureBuildOffsetInfoKHR): void {.stdcall.}
  vkCmdBuildAccelerationStructureNV*: proc (commandBuffer: VkCommandBuffer, pInfo: ptr VkAccelerationStructureInfoNV, instanceData: VkBuffer, instanceOffset: VkDeviceSize, update: VkBool32, dst: VkAccelerationStructureKHR, src: VkAccelerationStructureKHR, scratch: VkBuffer, scratchOffset: VkDeviceSize): void {.stdcall.}
  vkCmdClearAttachments*: proc (commandBuffer: VkCommandBuffer, attachmentCount: uint32, pAttachments: ptr VkClearAttachment, rectCount: uint32, pRects: ptr VkClearRect): void {.stdcall.}
  vkCmdClearColorImage*: proc (commandBuffer: VkCommandBuffer, image: VkImage, imageLayout: VkImageLayout, pColor: ptr VkClearColorValue, rangeCount: uint32, pRanges: ptr VkImageSubresourceRange): void {.stdcall.}
  vkCmdClearDepthStencilImage*: proc (commandBuffer: VkCommandBuffer, image: VkImage, imageLayout: VkImageLayout, pDepthStencil: ptr VkClearDepthStencilValue, rangeCount: uint32, pRanges: ptr VkImageSubresourceRange): void {.stdcall.}
  vkCmdCopyAccelerationStructureKHR*: proc (commandBuffer: VkCommandBuffer, pInfo: ptr VkCopyAccelerationStructureInfoKHR): void {.stdcall.}
  vkCmdCopyAccelerationStructureNV*: proc (commandBuffer: VkCommandBuffer, dst: VkAccelerationStructureKHR, src: VkAccelerationStructureKHR, mode: VkCopyAccelerationStructureModeKHR): void {.stdcall.}
  vkCmdCopyAccelerationStructureToMemoryKHR*: proc (commandBuffer: VkCommandBuffer, pInfo: ptr VkCopyAccelerationStructureToMemoryInfoKHR): void {.stdcall.}
  vkCmdCopyBuffer*: proc (commandBuffer: VkCommandBuffer, srcBuffer: VkBuffer, dstBuffer: VkBuffer, regionCount: uint32, pRegions: ptr VkBufferCopy): void {.stdcall.}
  vkCmdCopyBufferToImage*: proc (commandBuffer: VkCommandBuffer, srcBuffer: VkBuffer, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: uint32, pRegions: ptr VkBufferImageCopy): void {.stdcall.}
  vkCmdCopyImage*: proc (commandBuffer: VkCommandBuffer, srcImage: VkImage, srcImageLayout: VkImageLayout, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: uint32, pRegions: ptr VkImageCopy): void {.stdcall.}
  vkCmdCopyImageToBuffer*: proc (commandBuffer: VkCommandBuffer, srcImage: VkImage, srcImageLayout: VkImageLayout, dstBuffer: VkBuffer, regionCount: uint32, pRegions: ptr VkBufferImageCopy): void {.stdcall.}
  vkCmdCopyMemoryToAccelerationStructureKHR*: proc (commandBuffer: VkCommandBuffer, pInfo: ptr VkCopyMemoryToAccelerationStructureInfoKHR): void {.stdcall.}
  vkCmdCopyQueryPoolResults*: proc (commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, firstQuery: uint32, queryCount: uint32, dstBuffer: VkBuffer, dstOffset: VkDeviceSize, stride: VkDeviceSize, flags: VkQueryResultFlags): void {.stdcall.}
  vkCmdDebugMarkerBeginEXT*: proc (commandBuffer: VkCommandBuffer, pMarkerInfo: ptr VkDebugMarkerMarkerInfoEXT): void {.stdcall.}
  vkCmdDebugMarkerEndEXT*: proc (commandBuffer: VkCommandBuffer): void {.stdcall.}
  vkCmdDebugMarkerInsertEXT*: proc (commandBuffer: VkCommandBuffer, pMarkerInfo: ptr VkDebugMarkerMarkerInfoEXT): void {.stdcall.}
  vkCmdDispatch*: proc (commandBuffer: VkCommandBuffer, groupCountX: uint32, groupCountY: uint32, groupCountZ: uint32): void {.stdcall.}
  vkCmdDispatchBase*: proc (commandBuffer: VkCommandBuffer, baseGroupX: uint32, baseGroupY: uint32, baseGroupZ: uint32, groupCountX: uint32, groupCountY: uint32, groupCountZ: uint32): void {.stdcall.}
  vkCmdDispatchBaseKHR*: proc (commandBuffer: VkCommandBuffer, baseGroupX: uint32, baseGroupY: uint32, baseGroupZ: uint32, groupCountX: uint32, groupCountY: uint32, groupCountZ: uint32): void {.stdcall.}
  vkCmdDispatchIndirect*: proc (commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize): void {.stdcall.}
  vkCmdDraw*: proc (commandBuffer: VkCommandBuffer, vertexCount: uint32, instanceCount: uint32, firstVertex: uint32, firstInstance: uint32): void {.stdcall.}
  vkCmdDrawIndexed*: proc (commandBuffer: VkCommandBuffer, indexCount: uint32, instanceCount: uint32, firstIndex: uint32, vertexOffset: int32, firstInstance: uint32): void {.stdcall.}
  vkCmdDrawIndexedIndirect*: proc (commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, drawCount: uint32, stride: uint32): void {.stdcall.}
  vkCmdDrawIndexedIndirectCount*: proc (commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: uint32, stride: uint32): void {.stdcall.}
  vkCmdDrawIndexedIndirectCountAMD*: proc (commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: uint32, stride: uint32): void {.stdcall.}
  vkCmdDrawIndexedIndirectCountKHR*: proc (commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: uint32, stride: uint32): void {.stdcall.}
  vkCmdDrawIndirect*: proc (commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, drawCount: uint32, stride: uint32): void {.stdcall.}
  vkCmdDrawIndirectByteCountEXT*: proc (commandBuffer: VkCommandBuffer, instanceCount: uint32, firstInstance: uint32, counterBuffer: VkBuffer, counterBufferOffset: VkDeviceSize, counterOffset: uint32, vertexStride: uint32): void {.stdcall.}
  vkCmdDrawIndirectCount*: proc (commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: uint32, stride: uint32): void {.stdcall.}
  vkCmdDrawIndirectCountAMD*: proc (commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: uint32, stride: uint32): void {.stdcall.}
  vkCmdDrawIndirectCountKHR*: proc (commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: uint32, stride: uint32): void {.stdcall.}
  vkCmdDrawMeshTasksIndirectCountNV*: proc (commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: uint32, stride: uint32): void {.stdcall.}
  vkCmdDrawMeshTasksIndirectNV*: proc (commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, drawCount: uint32, stride: uint32): void {.stdcall.}
  vkCmdDrawMeshTasksNV*: proc (commandBuffer: VkCommandBuffer, taskCount: uint32, firstTask: uint32): void {.stdcall.}
  vkCmdEndConditionalRenderingEXT*: proc (commandBuffer: VkCommandBuffer): void {.stdcall.}
  vkCmdEndDebugUtilsLabelEXT*: proc (commandBuffer: VkCommandBuffer): void {.stdcall.}
  vkCmdEndQuery*: proc (commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, query: uint32): void {.stdcall.}
  vkCmdEndQueryIndexedEXT*: proc (commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, query: uint32, index: uint32): void {.stdcall.}
  vkCmdEndRenderPass*: proc (commandBuffer: VkCommandBuffer): void {.stdcall.}
  vkCmdEndRenderPass2*: proc (commandBuffer: VkCommandBuffer, pSubpassEndInfo: ptr VkSubpassEndInfo): void {.stdcall.}
  vkCmdEndRenderPass2KHR*: proc (commandBuffer: VkCommandBuffer, pSubpassEndInfo: ptr VkSubpassEndInfo): void {.stdcall.}
  vkCmdEndTransformFeedbackEXT*: proc (commandBuffer: VkCommandBuffer, firstCounterBuffer: uint32, counterBufferCount: uint32, pCounterBuffers: ptr VkBuffer, pCounterBufferOffsets: ptr VkDeviceSize): void {.stdcall.}
  vkCmdExecuteCommands*: proc (commandBuffer: VkCommandBuffer, commandBufferCount: uint32, pCommandBuffers: ptr VkCommandBuffer): void {.stdcall.}
  vkCmdExecuteGeneratedCommandsNV*: proc (commandBuffer: VkCommandBuffer, isPreprocessed: VkBool32, pGeneratedCommandsInfo: ptr VkGeneratedCommandsInfoNV): void {.stdcall.}
  vkCmdFillBuffer*: proc (commandBuffer: VkCommandBuffer, dstBuffer: VkBuffer, dstOffset: VkDeviceSize, size: VkDeviceSize, data: uint32): void {.stdcall.}
  vkCmdInsertDebugUtilsLabelEXT*: proc (commandBuffer: VkCommandBuffer, pLabelInfo: ptr VkDebugUtilsLabelEXT): void {.stdcall.}
  vkCmdNextSubpass*: proc (commandBuffer: VkCommandBuffer, contents: VkSubpassContents): void {.stdcall.}
  vkCmdNextSubpass2*: proc (commandBuffer: VkCommandBuffer, pSubpassBeginInfo: ptr VkSubpassBeginInfo, pSubpassEndInfo: ptr VkSubpassEndInfo): void {.stdcall.}
  vkCmdNextSubpass2KHR*: proc (commandBuffer: VkCommandBuffer, pSubpassBeginInfo: ptr VkSubpassBeginInfo, pSubpassEndInfo: ptr VkSubpassEndInfo): void {.stdcall.}
  vkCmdPipelineBarrier*: proc (commandBuffer: VkCommandBuffer, srcStageMask: VkPipelineStageFlags, dstStageMask: VkPipelineStageFlags, dependencyFlags: VkDependencyFlags, memoryBarrierCount: uint32, pMemoryBarriers: ptr VkMemoryBarrier, bufferMemoryBarrierCount: uint32, pBufferMemoryBarriers: ptr VkBufferMemoryBarrier, imageMemoryBarrierCount: uint32, pImageMemoryBarriers: ptr VkImageMemoryBarrier): void {.stdcall.}
  vkCmdPreprocessGeneratedCommandsNV*: proc (commandBuffer: VkCommandBuffer, pGeneratedCommandsInfo: ptr VkGeneratedCommandsInfoNV): void {.stdcall.}
  vkCmdPushConstants*: proc (commandBuffer: VkCommandBuffer, layout: VkPipelineLayout, stageFlags: VkShaderStageFlags, offset: uint32, size: uint32, pValues: pointer): void {.stdcall.}
  vkCmdPushDescriptorSetKHR*: proc (commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, layout: VkPipelineLayout, set: uint32, descriptorWriteCount: uint32, pDescriptorWrites: ptr VkWriteDescriptorSet): void {.stdcall.}
  vkCmdPushDescriptorSetWithTemplateKHR*: proc (commandBuffer: VkCommandBuffer, descriptorUpdateTemplate: VkDescriptorUpdateTemplate, layout: VkPipelineLayout, set: uint32, pData: pointer): void {.stdcall.}
  vkCmdResetEvent*: proc (commandBuffer: VkCommandBuffer, event: VkEvent, stageMask: VkPipelineStageFlags): void {.stdcall.}
  vkCmdResetQueryPool*: proc (commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, firstQuery: uint32, queryCount: uint32): void {.stdcall.}
  vkCmdResolveImage*: proc (commandBuffer: VkCommandBuffer, srcImage: VkImage, srcImageLayout: VkImageLayout, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: uint32, pRegions: ptr VkImageResolve): void {.stdcall.}
  vkCmdSetBlendConstants*: proc (commandBuffer: VkCommandBuffer, blendConstants: array[4,float32]): void {.stdcall.}
  vkCmdSetCheckpointNV*: proc (commandBuffer: VkCommandBuffer, pCheckpointMarker: pointer): void {.stdcall.}
  vkCmdSetCoarseSampleOrderNV*: proc (commandBuffer: VkCommandBuffer, sampleOrderType: VkCoarseSampleOrderTypeNV, customSampleOrderCount: uint32, pCustomSampleOrders: ptr VkCoarseSampleOrderCustomNV): void {.stdcall.}
  vkCmdSetCullModeEXT*: proc (commandBuffer: VkCommandBuffer, cullMode: VkCullModeFlags): void {.stdcall.}
  vkCmdSetDepthBias*: proc (commandBuffer: VkCommandBuffer, depthBiasConstantFactor: float32, depthBiasClamp: float32, depthBiasSlopeFactor: float32): void {.stdcall.}
  vkCmdSetDepthBounds*: proc (commandBuffer: VkCommandBuffer, minDepthBounds: float32, maxDepthBounds: float32): void {.stdcall.}
  vkCmdSetDepthBoundsTestEnableEXT*: proc (commandBuffer: VkCommandBuffer, depthBoundsTestEnable: VkBool32): void {.stdcall.}
  vkCmdSetDepthCompareOpEXT*: proc (commandBuffer: VkCommandBuffer, depthCompareOp: VkCompareOp): void {.stdcall.}
  vkCmdSetDepthTestEnableEXT*: proc (commandBuffer: VkCommandBuffer, depthTestEnable: VkBool32): void {.stdcall.}
  vkCmdSetDepthWriteEnableEXT*: proc (commandBuffer: VkCommandBuffer, depthWriteEnable: VkBool32): void {.stdcall.}
  vkCmdSetDeviceMask*: proc (commandBuffer: VkCommandBuffer, deviceMask: uint32): void {.stdcall.}
  vkCmdSetDeviceMaskKHR*: proc (commandBuffer: VkCommandBuffer, deviceMask: uint32): void {.stdcall.}
  vkCmdSetDiscardRectangleEXT*: proc (commandBuffer: VkCommandBuffer, firstDiscardRectangle: uint32, discardRectangleCount: uint32, pDiscardRectangles: ptr VkRect2D): void {.stdcall.}
  vkCmdSetEvent*: proc (commandBuffer: VkCommandBuffer, event: VkEvent, stageMask: VkPipelineStageFlags): void {.stdcall.}
  vkCmdSetExclusiveScissorNV*: proc (commandBuffer: VkCommandBuffer, firstExclusiveScissor: uint32, exclusiveScissorCount: uint32, pExclusiveScissors: ptr VkRect2D): void {.stdcall.}
  vkCmdSetFrontFaceEXT*: proc (commandBuffer: VkCommandBuffer, frontFace: VkFrontFace): void {.stdcall.}
  vkCmdSetLineStippleEXT*: proc (commandBuffer: VkCommandBuffer, lineStippleFactor: uint32, lineStipplePattern: uint16): void {.stdcall.}
  vkCmdSetLineWidth*: proc (commandBuffer: VkCommandBuffer, lineWidth: float32): void {.stdcall.}
  vkCmdSetPerformanceMarkerINTEL*: proc (commandBuffer: VkCommandBuffer, pMarkerInfo: ptr VkPerformanceMarkerInfoINTEL): VkResult {.stdcall.}
  vkCmdSetPerformanceOverrideINTEL*: proc (commandBuffer: VkCommandBuffer, pOverrideInfo: ptr VkPerformanceOverrideInfoINTEL): VkResult {.stdcall.}
  vkCmdSetPerformanceStreamMarkerINTEL*: proc (commandBuffer: VkCommandBuffer, pMarkerInfo: ptr VkPerformanceStreamMarkerInfoINTEL): VkResult {.stdcall.}
  vkCmdSetPrimitiveTopologyEXT*: proc (commandBuffer: VkCommandBuffer, primitiveTopology: VkPrimitiveTopology): void {.stdcall.}
  vkCmdSetSampleLocationsEXT*: proc (commandBuffer: VkCommandBuffer, pSampleLocationsInfo: ptr VkSampleLocationsInfoEXT): void {.stdcall.}
  vkCmdSetScissor*: proc (commandBuffer: VkCommandBuffer, firstScissor: uint32, scissorCount: uint32, pScissors: ptr VkRect2D): void {.stdcall.}
  vkCmdSetScissorWithCountEXT*: proc (commandBuffer: VkCommandBuffer, scissorCount: uint32, pScissors: ptr VkRect2D): void {.stdcall.}
  vkCmdSetStencilCompareMask*: proc (commandBuffer: VkCommandBuffer, faceMask: VkStencilFaceFlags, compareMask: uint32): void {.stdcall.}
  vkCmdSetStencilOpEXT*: proc (commandBuffer: VkCommandBuffer, faceMask: VkStencilFaceFlags, failOp: VkStencilOp, passOp: VkStencilOp, depthFailOp: VkStencilOp, compareOp: VkCompareOp): void {.stdcall.}
  vkCmdSetStencilReference*: proc (commandBuffer: VkCommandBuffer, faceMask: VkStencilFaceFlags, reference: uint32): void {.stdcall.}
  vkCmdSetStencilTestEnableEXT*: proc (commandBuffer: VkCommandBuffer, stencilTestEnable: VkBool32): void {.stdcall.}
  vkCmdSetStencilWriteMask*: proc (commandBuffer: VkCommandBuffer, faceMask: VkStencilFaceFlags, writeMask: uint32): void {.stdcall.}
  vkCmdSetViewport*: proc (commandBuffer: VkCommandBuffer, firstViewport: uint32, viewportCount: uint32, pViewports: ptr VkViewport): void {.stdcall.}
  vkCmdSetViewportShadingRatePaletteNV*: proc (commandBuffer: VkCommandBuffer, firstViewport: uint32, viewportCount: uint32, pShadingRatePalettes: ptr VkShadingRatePaletteNV): void {.stdcall.}
  vkCmdSetViewportWScalingNV*: proc (commandBuffer: VkCommandBuffer, firstViewport: uint32, viewportCount: uint32, pViewportWScalings: ptr VkViewportWScalingNV): void {.stdcall.}
  vkCmdSetViewportWithCountEXT*: proc (commandBuffer: VkCommandBuffer, viewportCount: uint32, pViewports: ptr VkViewport): void {.stdcall.}
  vkCmdTraceRaysIndirectKHR*: proc (commandBuffer: VkCommandBuffer, pRaygenShaderBindingTable: ptr VkStridedBufferRegionKHR, pMissShaderBindingTable: ptr VkStridedBufferRegionKHR, pHitShaderBindingTable: ptr VkStridedBufferRegionKHR, pCallableShaderBindingTable: ptr VkStridedBufferRegionKHR, buffer: VkBuffer, offset: VkDeviceSize): void {.stdcall.}
  vkCmdTraceRaysKHR*: proc (commandBuffer: VkCommandBuffer, pRaygenShaderBindingTable: ptr VkStridedBufferRegionKHR, pMissShaderBindingTable: ptr VkStridedBufferRegionKHR, pHitShaderBindingTable: ptr VkStridedBufferRegionKHR, pCallableShaderBindingTable: ptr VkStridedBufferRegionKHR, width: uint32, height: uint32, depth: uint32): void {.stdcall.}
  vkCmdTraceRaysNV*: proc (commandBuffer: VkCommandBuffer, raygenShaderBindingTableBuffer: VkBuffer, raygenShaderBindingOffset: VkDeviceSize, missShaderBindingTableBuffer: VkBuffer, missShaderBindingOffset: VkDeviceSize, missShaderBindingStride: VkDeviceSize, hitShaderBindingTableBuffer: VkBuffer, hitShaderBindingOffset: VkDeviceSize, hitShaderBindingStride: VkDeviceSize, callableShaderBindingTableBuffer: VkBuffer, callableShaderBindingOffset: VkDeviceSize, callableShaderBindingStride: VkDeviceSize, width: uint32, height: uint32, depth: uint32): void {.stdcall.}
  vkCmdUpdateBuffer*: proc (commandBuffer: VkCommandBuffer, dstBuffer: VkBuffer, dstOffset: VkDeviceSize, dataSize: VkDeviceSize, pData: pointer): void {.stdcall.}
  vkCmdWaitEvents*: proc (commandBuffer: VkCommandBuffer, eventCount: uint32, pEvents: ptr VkEvent, srcStageMask: VkPipelineStageFlags, dstStageMask: VkPipelineStageFlags, memoryBarrierCount: uint32, pMemoryBarriers: ptr VkMemoryBarrier, bufferMemoryBarrierCount: uint32, pBufferMemoryBarriers: ptr VkBufferMemoryBarrier, imageMemoryBarrierCount: uint32, pImageMemoryBarriers: ptr VkImageMemoryBarrier): void {.stdcall.}
  vkCmdWriteAccelerationStructuresPropertiesKHR*: proc (commandBuffer: VkCommandBuffer, accelerationStructureCount: uint32, pAccelerationStructures: ptr VkAccelerationStructureKHR, queryType: VkQueryType, queryPool: VkQueryPool, firstQuery: uint32): void {.stdcall.}
  vkCmdWriteAccelerationStructuresPropertiesNV*: proc (commandBuffer: VkCommandBuffer, accelerationStructureCount: uint32, pAccelerationStructures: ptr VkAccelerationStructureKHR, queryType: VkQueryType, queryPool: VkQueryPool, firstQuery: uint32): void {.stdcall.}
  vkCmdWriteBufferMarkerAMD*: proc (commandBuffer: VkCommandBuffer, pipelineStage: VkPipelineStageFlagBits, dstBuffer: VkBuffer, dstOffset: VkDeviceSize, marker: uint32): void {.stdcall.}
  vkCmdWriteTimestamp*: proc (commandBuffer: VkCommandBuffer, pipelineStage: VkPipelineStageFlagBits, queryPool: VkQueryPool, query: uint32): void {.stdcall.}
  vkCompileDeferredNV*: proc (device: VkDevice, pipeline: VkPipeline, shader: uint32): VkResult {.stdcall.}
  vkCopyAccelerationStructureKHR*: proc (device: VkDevice, pInfo: ptr VkCopyAccelerationStructureInfoKHR): VkResult {.stdcall.}
  vkCopyAccelerationStructureToMemoryKHR*: proc (device: VkDevice, pInfo: ptr VkCopyAccelerationStructureToMemoryInfoKHR): VkResult {.stdcall.}
  vkCopyMemoryToAccelerationStructureKHR*: proc (device: VkDevice, pInfo: ptr VkCopyMemoryToAccelerationStructureInfoKHR): VkResult {.stdcall.}
  vkCreateAccelerationStructureKHR*: proc (device: VkDevice, pCreateInfo: ptr VkAccelerationStructureCreateInfoKHR, pAllocator: ptr VkAllocationCallbacks, pAccelerationStructure: ptr VkAccelerationStructureKHR): VkResult {.stdcall.}
  vkCreateAccelerationStructureNV*: proc (device: VkDevice, pCreateInfo: ptr VkAccelerationStructureCreateInfoNV, pAllocator: ptr VkAllocationCallbacks, pAccelerationStructure: ptr VkAccelerationStructureNV): VkResult {.stdcall.}
  vkCreateAndroidSurfaceKHR*: proc (instance: VkInstance, pCreateInfo: ptr VkAndroidSurfaceCreateInfoKHR, pAllocator: ptr VkAllocationCallbacks, pSurface: ptr VkSurfaceKHR): VkResult {.stdcall.}
  vkCreateBuffer*: proc (device: VkDevice, pCreateInfo: ptr VkBufferCreateInfo, pAllocator: ptr VkAllocationCallbacks, pBuffer: ptr VkBuffer): VkResult {.stdcall.}
  vkCreateBufferView*: proc (device: VkDevice, pCreateInfo: ptr VkBufferViewCreateInfo, pAllocator: ptr VkAllocationCallbacks, pView: ptr VkBufferView): VkResult {.stdcall.}
  vkCreateCommandPool*: proc (device: VkDevice, pCreateInfo: ptr VkCommandPoolCreateInfo, pAllocator: ptr VkAllocationCallbacks, pCommandPool: ptr VkCommandPool): VkResult {.stdcall.}
  vkCreateComputePipelines*: proc (device: VkDevice, pipelineCache: VkPipelineCache, createInfoCount: uint32, pCreateInfos: ptr VkComputePipelineCreateInfo, pAllocator: ptr VkAllocationCallbacks, pPipelines: ptr VkPipeline): VkResult {.stdcall.}
  vkCreateDebugReportCallbackEXT*: proc (instance: VkInstance, pCreateInfo: ptr VkDebugReportCallbackCreateInfoEXT, pAllocator: ptr VkAllocationCallbacks, pCallback: ptr VkDebugReportCallbackEXT): VkResult {.stdcall.}
  vkCreateDebugUtilsMessengerEXT*: proc (instance: VkInstance, pCreateInfo: ptr VkDebugUtilsMessengerCreateInfoEXT, pAllocator: ptr VkAllocationCallbacks, pMessenger: ptr VkDebugUtilsMessengerEXT): VkResult {.stdcall.}
  vkCreateDeferredOperationKHR*: proc (device: VkDevice, pAllocator: ptr VkAllocationCallbacks, pDeferredOperation: ptr VkDeferredOperationKHR): VkResult {.stdcall.}
  vkCreateDescriptorPool*: proc (device: VkDevice, pCreateInfo: ptr VkDescriptorPoolCreateInfo, pAllocator: ptr VkAllocationCallbacks, pDescriptorPool: ptr VkDescriptorPool): VkResult {.stdcall.}
  vkCreateDescriptorSetLayout*: proc (device: VkDevice, pCreateInfo: ptr VkDescriptorSetLayoutCreateInfo, pAllocator: ptr VkAllocationCallbacks, pSetLayout: ptr VkDescriptorSetLayout): VkResult {.stdcall.}
  vkCreateDescriptorUpdateTemplate*: proc (device: VkDevice, pCreateInfo: ptr VkDescriptorUpdateTemplateCreateInfo, pAllocator: ptr VkAllocationCallbacks, pDescriptorUpdateTemplate: ptr VkDescriptorUpdateTemplate): VkResult {.stdcall.}
  vkCreateDescriptorUpdateTemplateKHR*: proc (device: VkDevice, pCreateInfo: ptr VkDescriptorUpdateTemplateCreateInfo, pAllocator: ptr VkAllocationCallbacks, pDescriptorUpdateTemplate: ptr VkDescriptorUpdateTemplate): VkResult {.stdcall.}
  vkCreateDevice*: proc (physicalDevice: VkPhysicalDevice, pCreateInfo: ptr VkDeviceCreateInfo, pAllocator: ptr VkAllocationCallbacks, pDevice: ptr VkDevice): VkResult {.stdcall.}
  vkCreateDirectFBSurfaceEXT*: proc (instance: VkInstance, pCreateInfo: ptr VkDirectFBSurfaceCreateInfoEXT, pAllocator: ptr VkAllocationCallbacks, pSurface: ptr VkSurfaceKHR): VkResult {.stdcall.}
  vkCreateDisplayModeKHR*: proc (physicalDevice: VkPhysicalDevice, display: VkDisplayKHR, pCreateInfo: ptr VkDisplayModeCreateInfoKHR, pAllocator: ptr VkAllocationCallbacks, pMode: ptr VkDisplayModeKHR): VkResult {.stdcall.}
  vkCreateDisplayPlaneSurfaceKHR*: proc (instance: VkInstance, pCreateInfo: ptr VkDisplaySurfaceCreateInfoKHR, pAllocator: ptr VkAllocationCallbacks, pSurface: ptr VkSurfaceKHR): VkResult {.stdcall.}
  vkCreateEvent*: proc (device: VkDevice, pCreateInfo: ptr VkEventCreateInfo, pAllocator: ptr VkAllocationCallbacks, pEvent: ptr VkEvent): VkResult {.stdcall.}
  vkCreateFence*: proc (device: VkDevice, pCreateInfo: ptr VkFenceCreateInfo, pAllocator: ptr VkAllocationCallbacks, pFence: ptr VkFence): VkResult {.stdcall.}
  vkCreateFramebuffer*: proc (device: VkDevice, pCreateInfo: ptr VkFramebufferCreateInfo, pAllocator: ptr VkAllocationCallbacks, pFramebuffer: ptr VkFramebuffer): VkResult {.stdcall.}
  vkCreateGraphicsPipelines*: proc (device: VkDevice, pipelineCache: VkPipelineCache, createInfoCount: uint32, pCreateInfos: ptr VkGraphicsPipelineCreateInfo, pAllocator: ptr VkAllocationCallbacks, pPipelines: ptr VkPipeline): VkResult {.stdcall.}
  vkCreateHeadlessSurfaceEXT*: proc (instance: VkInstance, pCreateInfo: ptr VkHeadlessSurfaceCreateInfoEXT, pAllocator: ptr VkAllocationCallbacks, pSurface: ptr VkSurfaceKHR): VkResult {.stdcall.}
  vkCreateIOSSurfaceMVK*: proc (instance: VkInstance, pCreateInfo: ptr VkIOSSurfaceCreateInfoMVK, pAllocator: ptr VkAllocationCallbacks, pSurface: ptr VkSurfaceKHR): VkResult {.stdcall.}
  vkCreateImage*: proc (device: VkDevice, pCreateInfo: ptr VkImageCreateInfo, pAllocator: ptr VkAllocationCallbacks, pImage: ptr VkImage): VkResult {.stdcall.}
  vkCreateImagePipeSurfaceFUCHSIA*: proc (instance: VkInstance, pCreateInfo: ptr VkImagePipeSurfaceCreateInfoFUCHSIA, pAllocator: ptr VkAllocationCallbacks, pSurface: ptr VkSurfaceKHR): VkResult {.stdcall.}
  vkCreateImageView*: proc (device: VkDevice, pCreateInfo: ptr VkImageViewCreateInfo, pAllocator: ptr VkAllocationCallbacks, pView: ptr VkImageView): VkResult {.stdcall.}
  vkCreateIndirectCommandsLayoutNV*: proc (device: VkDevice, pCreateInfo: ptr VkIndirectCommandsLayoutCreateInfoNV, pAllocator: ptr VkAllocationCallbacks, pIndirectCommandsLayout: ptr VkIndirectCommandsLayoutNV): VkResult {.stdcall.}
  vkCreateInstance*: proc (pCreateInfo: ptr VkInstanceCreateInfo, pAllocator: ptr VkAllocationCallbacks, pInstance: ptr VkInstance): VkResult {.stdcall.}
  vkCreateMacOSSurfaceMVK*: proc (instance: VkInstance, pCreateInfo: ptr VkMacOSSurfaceCreateInfoMVK, pAllocator: ptr VkAllocationCallbacks, pSurface: ptr VkSurfaceKHR): VkResult {.stdcall.}
  vkCreateMetalSurfaceEXT*: proc (instance: VkInstance, pCreateInfo: ptr VkMetalSurfaceCreateInfoEXT, pAllocator: ptr VkAllocationCallbacks, pSurface: ptr VkSurfaceKHR): VkResult {.stdcall.}
  vkCreatePipelineCache*: proc (device: VkDevice, pCreateInfo: ptr VkPipelineCacheCreateInfo, pAllocator: ptr VkAllocationCallbacks, pPipelineCache: ptr VkPipelineCache): VkResult {.stdcall.}
  vkCreatePipelineLayout*: proc (device: VkDevice, pCreateInfo: ptr VkPipelineLayoutCreateInfo, pAllocator: ptr VkAllocationCallbacks, pPipelineLayout: ptr VkPipelineLayout): VkResult {.stdcall.}
  vkCreatePrivateDataSlotEXT*: proc (device: VkDevice, pCreateInfo: ptr VkPrivateDataSlotCreateInfoEXT, pAllocator: ptr VkAllocationCallbacks, pPrivateDataSlot: ptr VkPrivateDataSlotEXT): VkResult {.stdcall.}
  vkCreateQueryPool*: proc (device: VkDevice, pCreateInfo: ptr VkQueryPoolCreateInfo, pAllocator: ptr VkAllocationCallbacks, pQueryPool: ptr VkQueryPool): VkResult {.stdcall.}
  vkCreateRayTracingPipelinesKHR*: proc (device: VkDevice, pipelineCache: VkPipelineCache, createInfoCount: uint32, pCreateInfos: ptr VkRayTracingPipelineCreateInfoKHR, pAllocator: ptr VkAllocationCallbacks, pPipelines: ptr VkPipeline): VkResult {.stdcall.}
  vkCreateRayTracingPipelinesNV*: proc (device: VkDevice, pipelineCache: VkPipelineCache, createInfoCount: uint32, pCreateInfos: ptr VkRayTracingPipelineCreateInfoNV, pAllocator: ptr VkAllocationCallbacks, pPipelines: ptr VkPipeline): VkResult {.stdcall.}
  vkCreateRenderPass*: proc (device: VkDevice, pCreateInfo: ptr VkRenderPassCreateInfo, pAllocator: ptr VkAllocationCallbacks, pRenderPass: ptr VkRenderPass): VkResult {.stdcall.}
  vkCreateRenderPass2*: proc (device: VkDevice, pCreateInfo: ptr VkRenderPassCreateInfo2, pAllocator: ptr VkAllocationCallbacks, pRenderPass: ptr VkRenderPass): VkResult {.stdcall.}
  vkCreateRenderPass2KHR*: proc (device: VkDevice, pCreateInfo: ptr VkRenderPassCreateInfo2, pAllocator: ptr VkAllocationCallbacks, pRenderPass: ptr VkRenderPass): VkResult {.stdcall.}
  vkCreateSampler*: proc (device: VkDevice, pCreateInfo: ptr VkSamplerCreateInfo, pAllocator: ptr VkAllocationCallbacks, pSampler: ptr VkSampler): VkResult {.stdcall.}
  vkCreateSamplerYcbcrConversion*: proc (device: VkDevice, pCreateInfo: ptr VkSamplerYcbcrConversionCreateInfo, pAllocator: ptr VkAllocationCallbacks, pYcbcrConversion: ptr VkSamplerYcbcrConversion): VkResult {.stdcall.}
  vkCreateSamplerYcbcrConversionKHR*: proc (device: VkDevice, pCreateInfo: ptr VkSamplerYcbcrConversionCreateInfo, pAllocator: ptr VkAllocationCallbacks, pYcbcrConversion: ptr VkSamplerYcbcrConversion): VkResult {.stdcall.}
  vkCreateSemaphore*: proc (device: VkDevice, pCreateInfo: ptr VkSemaphoreCreateInfo, pAllocator: ptr VkAllocationCallbacks, pSemaphore: ptr VkSemaphore): VkResult {.stdcall.}
  vkCreateShaderModule*: proc (device: VkDevice, pCreateInfo: ptr VkShaderModuleCreateInfo, pAllocator: ptr VkAllocationCallbacks, pShaderModule: ptr VkShaderModule): VkResult {.stdcall.}
  vkCreateSharedSwapchainsKHR*: proc (device: VkDevice, swapchainCount: uint32, pCreateInfos: ptr VkSwapchainCreateInfoKHR, pAllocator: ptr VkAllocationCallbacks, pSwapchains: ptr VkSwapchainKHR): VkResult {.stdcall.}
  vkCreateStreamDescriptorSurfaceGGP*: proc (instance: VkInstance, pCreateInfo: ptr VkStreamDescriptorSurfaceCreateInfoGGP, pAllocator: ptr VkAllocationCallbacks, pSurface: ptr VkSurfaceKHR): VkResult {.stdcall.}
  vkCreateSwapchainKHR*: proc (device: VkDevice, pCreateInfo: ptr VkSwapchainCreateInfoKHR, pAllocator: ptr VkAllocationCallbacks, pSwapchain: ptr VkSwapchainKHR): VkResult {.stdcall.}
  vkCreateValidationCacheEXT*: proc (device: VkDevice, pCreateInfo: ptr VkValidationCacheCreateInfoEXT, pAllocator: ptr VkAllocationCallbacks, pValidationCache: ptr VkValidationCacheEXT): VkResult {.stdcall.}
  vkCreateViSurfaceNN*: proc (instance: VkInstance, pCreateInfo: ptr VkViSurfaceCreateInfoNN, pAllocator: ptr VkAllocationCallbacks, pSurface: ptr VkSurfaceKHR): VkResult {.stdcall.}
  vkCreateWaylandSurfaceKHR*: proc (instance: VkInstance, pCreateInfo: ptr VkWaylandSurfaceCreateInfoKHR, pAllocator: ptr VkAllocationCallbacks, pSurface: ptr VkSurfaceKHR): VkResult {.stdcall.}
  vkCreateWin32SurfaceKHR*: proc (instance: VkInstance, pCreateInfo: ptr VkWin32SurfaceCreateInfoKHR, pAllocator: ptr VkAllocationCallbacks, pSurface: ptr VkSurfaceKHR): VkResult {.stdcall.}
  vkCreateXcbSurfaceKHR*: proc (instance: VkInstance, pCreateInfo: ptr VkXcbSurfaceCreateInfoKHR, pAllocator: ptr VkAllocationCallbacks, pSurface: ptr VkSurfaceKHR): VkResult {.stdcall.}
  vkCreateXlibSurfaceKHR*: proc (instance: VkInstance, pCreateInfo: ptr VkXlibSurfaceCreateInfoKHR, pAllocator: ptr VkAllocationCallbacks, pSurface: ptr VkSurfaceKHR): VkResult {.stdcall.}
  vkDebugMarkerSetObjectNameEXT*: proc (device: VkDevice, pNameInfo: ptr VkDebugMarkerObjectNameInfoEXT): VkResult {.stdcall.}
  vkDebugMarkerSetObjectTagEXT*: proc (device: VkDevice, pTagInfo: ptr VkDebugMarkerObjectTagInfoEXT): VkResult {.stdcall.}
  vkDebugReportMessageEXT*: proc (instance: VkInstance, flags: VkDebugReportFlagsEXT, objectType: VkDebugReportObjectTypeEXT, `object`: uint64, location: uint, messageCode: int32, pLayerPrefix: cstring, pMessage: cstring): void {.stdcall.}
  vkDeferredOperationJoinKHR*: proc (device: VkDevice, operation: VkDeferredOperationKHR): VkResult {.stdcall.}
  vkDestroyAccelerationStructureKHR*: proc (device: VkDevice, accelerationStructure: VkAccelerationStructureKHR, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}
  vkDestroyAccelerationStructureNV*: proc (device: VkDevice, accelerationStructure: VkAccelerationStructureKHR, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}
  vkDestroyBuffer*: proc (device: VkDevice, buffer: VkBuffer, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}
  vkDestroyBufferView*: proc (device: VkDevice, bufferView: VkBufferView, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}
  vkDestroyCommandPool*: proc (device: VkDevice, commandPool: VkCommandPool, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}
  vkDestroyDebugReportCallbackEXT*: proc (instance: VkInstance, callback: VkDebugReportCallbackEXT, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}
  vkDestroyDebugUtilsMessengerEXT*: proc (instance: VkInstance, messenger: VkDebugUtilsMessengerEXT, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}
  vkDestroyDeferredOperationKHR*: proc (device: VkDevice, operation: VkDeferredOperationKHR, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}
  vkDestroyDescriptorPool*: proc (device: VkDevice, descriptorPool: VkDescriptorPool, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}
  vkDestroyDescriptorSetLayout*: proc (device: VkDevice, descriptorSetLayout: VkDescriptorSetLayout, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}
  vkDestroyDescriptorUpdateTemplate*: proc (device: VkDevice, descriptorUpdateTemplate: VkDescriptorUpdateTemplate, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}
  vkDestroyDescriptorUpdateTemplateKHR*: proc (device: VkDevice, descriptorUpdateTemplate: VkDescriptorUpdateTemplate, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}
  vkDestroyDevice*: proc (device: VkDevice, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}
  vkDestroyEvent*: proc (device: VkDevice, event: VkEvent, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}
  vkDestroyFence*: proc (device: VkDevice, fence: VkFence, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}
  vkDestroyFramebuffer*: proc (device: VkDevice, framebuffer: VkFramebuffer, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}
  vkDestroyImage*: proc (device: VkDevice, image: VkImage, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}
  vkDestroyImageView*: proc (device: VkDevice, imageView: VkImageView, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}
  vkDestroyIndirectCommandsLayoutNV*: proc (device: VkDevice, indirectCommandsLayout: VkIndirectCommandsLayoutNV, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}
  vkDestroyInstance*: proc (instance: VkInstance, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}
  vkDestroyPipeline*: proc (device: VkDevice, pipeline: VkPipeline, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}
  vkDestroyPipelineCache*: proc (device: VkDevice, pipelineCache: VkPipelineCache, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}
  vkDestroyPipelineLayout*: proc (device: VkDevice, pipelineLayout: VkPipelineLayout, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}
  vkDestroyPrivateDataSlotEXT*: proc (device: VkDevice, privateDataSlot: VkPrivateDataSlotEXT, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}
  vkDestroyQueryPool*: proc (device: VkDevice, queryPool: VkQueryPool, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}
  vkDestroyRenderPass*: proc (device: VkDevice, renderPass: VkRenderPass, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}
  vkDestroySampler*: proc (device: VkDevice, sampler: VkSampler, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}
  vkDestroySamplerYcbcrConversion*: proc (device: VkDevice, ycbcrConversion: VkSamplerYcbcrConversion, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}
  vkDestroySamplerYcbcrConversionKHR*: proc (device: VkDevice, ycbcrConversion: VkSamplerYcbcrConversion, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}
  vkDestroySemaphore*: proc (device: VkDevice, semaphore: VkSemaphore, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}
  vkDestroyShaderModule*: proc (device: VkDevice, shaderModule: VkShaderModule, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}
  vkDestroySurfaceKHR*: proc (instance: VkInstance, surface: VkSurfaceKHR, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}
  vkDestroySwapchainKHR*: proc (device: VkDevice, swapchain: VkSwapchainKHR, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}
  vkDestroyValidationCacheEXT*: proc (device: VkDevice, validationCache: VkValidationCacheEXT, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}
  vkDeviceWaitIdle*: proc (device: VkDevice): VkResult {.stdcall.}
  vkDisplayPowerControlEXT*: proc (device: VkDevice, display: VkDisplayKHR, pDisplayPowerInfo: ptr VkDisplayPowerInfoEXT): VkResult {.stdcall.}
  vkEndCommandBuffer*: proc (commandBuffer: VkCommandBuffer): VkResult {.stdcall.}
  vkEnumerateDeviceExtensionProperties*: proc (physicalDevice: VkPhysicalDevice, pLayerName: cstring, pPropertyCount: ptr uint32, pProperties: ptr VkExtensionProperties): VkResult {.stdcall.}
  vkEnumerateDeviceLayerProperties*: proc (physicalDevice: VkPhysicalDevice, pPropertyCount: ptr uint32, pProperties: ptr VkLayerProperties): VkResult {.stdcall.}
  vkEnumerateInstanceExtensionProperties*: proc (pLayerName: cstring, pPropertyCount: ptr uint32, pProperties: ptr VkExtensionProperties): VkResult {.stdcall.}
  vkEnumerateInstanceLayerProperties*: proc (pPropertyCount: ptr uint32, pProperties: ptr VkLayerProperties): VkResult {.stdcall.}
  vkEnumerateInstanceVersion*: proc (pApiVersion: ptr uint32): VkResult {.stdcall.}
  vkEnumeratePhysicalDeviceGroups*: proc (instance: VkInstance, pPhysicalDeviceGroupCount: ptr uint32, pPhysicalDeviceGroupProperties: ptr VkPhysicalDeviceGroupProperties): VkResult {.stdcall.}
  vkEnumeratePhysicalDeviceGroupsKHR*: proc (instance: VkInstance, pPhysicalDeviceGroupCount: ptr uint32, pPhysicalDeviceGroupProperties: ptr VkPhysicalDeviceGroupProperties): VkResult {.stdcall.}
  vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR*: proc (physicalDevice: VkPhysicalDevice, queueFamilyIndex: uint32, pCounterCount: ptr uint32, pCounters: ptr VkPerformanceCounterKHR, pCounterDescriptions: ptr VkPerformanceCounterDescriptionKHR): VkResult {.stdcall.}
  vkEnumeratePhysicalDevices*: proc (instance: VkInstance, pPhysicalDeviceCount: ptr uint32, pPhysicalDevices: ptr VkPhysicalDevice): VkResult {.stdcall.}
  vkFlushMappedMemoryRanges*: proc (device: VkDevice, memoryRangeCount: uint32, pMemoryRanges: ptr VkMappedMemoryRange): VkResult {.stdcall.}
  vkFreeCommandBuffers*: proc (device: VkDevice, commandPool: VkCommandPool, commandBufferCount: uint32, pCommandBuffers: ptr VkCommandBuffer): void {.stdcall.}
  vkFreeDescriptorSets*: proc (device: VkDevice, descriptorPool: VkDescriptorPool, descriptorSetCount: uint32, pDescriptorSets: ptr VkDescriptorSet): VkResult {.stdcall.}
  vkFreeMemory*: proc (device: VkDevice, memory: VkDeviceMemory, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}
  vkGetAccelerationStructureDeviceAddressKHR*: proc (device: VkDevice, pInfo: ptr VkAccelerationStructureDeviceAddressInfoKHR): VkDeviceAddress {.stdcall.}
  vkGetAccelerationStructureHandleNV*: proc (device: VkDevice, accelerationStructure: VkAccelerationStructureKHR, dataSize: uint, pData: pointer): VkResult {.stdcall.}
  vkGetAccelerationStructureMemoryRequirementsKHR*: proc (device: VkDevice, pInfo: ptr VkAccelerationStructureMemoryRequirementsInfoKHR, pMemoryRequirements: ptr VkMemoryRequirements2): void {.stdcall.}
  vkGetAccelerationStructureMemoryRequirementsNV*: proc (device: VkDevice, pInfo: ptr VkAccelerationStructureMemoryRequirementsInfoNV, pMemoryRequirements: ptr VkMemoryRequirements2KHR): void {.stdcall.}
  vkGetAndroidHardwareBufferPropertiesANDROID*: proc (device: VkDevice, buffer: ptr AHardwareBuffer, pProperties: ptr VkAndroidHardwareBufferPropertiesANDROID): VkResult {.stdcall.}
  vkGetBufferDeviceAddress*: proc (device: VkDevice, pInfo: ptr VkBufferDeviceAddressInfo): VkDeviceAddress {.stdcall.}
  vkGetBufferDeviceAddressEXT*: proc (device: VkDevice, pInfo: ptr VkBufferDeviceAddressInfo): VkDeviceAddress {.stdcall.}
  vkGetBufferDeviceAddressKHR*: proc (device: VkDevice, pInfo: ptr VkBufferDeviceAddressInfo): VkDeviceAddress {.stdcall.}
  vkGetBufferMemoryRequirements*: proc (device: VkDevice, buffer: VkBuffer, pMemoryRequirements: ptr VkMemoryRequirements): void {.stdcall.}
  vkGetBufferMemoryRequirements2*: proc (device: VkDevice, pInfo: ptr VkBufferMemoryRequirementsInfo2, pMemoryRequirements: ptr VkMemoryRequirements2): void {.stdcall.}
  vkGetBufferMemoryRequirements2KHR*: proc (device: VkDevice, pInfo: ptr VkBufferMemoryRequirementsInfo2, pMemoryRequirements: ptr VkMemoryRequirements2): void {.stdcall.}
  vkGetBufferOpaqueCaptureAddress*: proc (device: VkDevice, pInfo: ptr VkBufferDeviceAddressInfo): uint64 {.stdcall.}
  vkGetBufferOpaqueCaptureAddressKHR*: proc (device: VkDevice, pInfo: ptr VkBufferDeviceAddressInfo): uint64 {.stdcall.}
  vkGetCalibratedTimestampsEXT*: proc (device: VkDevice, timestampCount: uint32, pTimestampInfos: ptr VkCalibratedTimestampInfoEXT, pTimestamps: ptr uint64, pMaxDeviation: ptr uint64): VkResult {.stdcall.}
  vkGetDeferredOperationMaxConcurrencyKHR*: proc (device: VkDevice, operation: VkDeferredOperationKHR): uint32 {.stdcall.}
  vkGetDeferredOperationResultKHR*: proc (device: VkDevice, operation: VkDeferredOperationKHR): VkResult {.stdcall.}
  vkGetDescriptorSetLayoutSupport*: proc (device: VkDevice, pCreateInfo: ptr VkDescriptorSetLayoutCreateInfo, pSupport: ptr VkDescriptorSetLayoutSupport): void {.stdcall.}
  vkGetDescriptorSetLayoutSupportKHR*: proc (device: VkDevice, pCreateInfo: ptr VkDescriptorSetLayoutCreateInfo, pSupport: ptr VkDescriptorSetLayoutSupport): void {.stdcall.}
  vkGetDeviceAccelerationStructureCompatibilityKHR*: proc (device: VkDevice, version: ptr VkAccelerationStructureVersionKHR): VkResult {.stdcall.}
  vkGetDeviceGroupPeerMemoryFeatures*: proc (device: VkDevice, heapIndex: uint32, localDeviceIndex: uint32, remoteDeviceIndex: uint32, pPeerMemoryFeatures: ptr VkPeerMemoryFeatureFlags): void {.stdcall.}
  vkGetDeviceGroupPeerMemoryFeaturesKHR*: proc (device: VkDevice, heapIndex: uint32, localDeviceIndex: uint32, remoteDeviceIndex: uint32, pPeerMemoryFeatures: ptr VkPeerMemoryFeatureFlags): void {.stdcall.}
  vkGetDeviceGroupPresentCapabilitiesKHR*: proc (device: VkDevice, pDeviceGroupPresentCapabilities: ptr VkDeviceGroupPresentCapabilitiesKHR): VkResult {.stdcall.}
  vkGetDeviceGroupSurfacePresentModes2EXT*: proc (device: VkDevice, pSurfaceInfo: ptr VkPhysicalDeviceSurfaceInfo2KHR, pModes: ptr VkDeviceGroupPresentModeFlagsKHR): VkResult {.stdcall.}
  vkGetDeviceGroupSurfacePresentModesKHR*: proc (device: VkDevice, surface: VkSurfaceKHR, pModes: ptr VkDeviceGroupPresentModeFlagsKHR): VkResult {.stdcall.}
  vkGetDeviceMemoryCommitment*: proc (device: VkDevice, memory: VkDeviceMemory, pCommittedMemoryInBytes: ptr VkDeviceSize): void {.stdcall.}
  vkGetDeviceMemoryOpaqueCaptureAddress*: proc (device: VkDevice, pInfo: ptr VkDeviceMemoryOpaqueCaptureAddressInfo): uint64 {.stdcall.}
  vkGetDeviceMemoryOpaqueCaptureAddressKHR*: proc (device: VkDevice, pInfo: ptr VkDeviceMemoryOpaqueCaptureAddressInfo): uint64 {.stdcall.}
  vkGetDeviceProcAddr*: proc (device: VkDevice, pName: cstring): PFN_vkVoidFunction {.stdcall.}
  vkGetDeviceQueue*: proc (device: VkDevice, queueFamilyIndex: uint32, queueIndex: uint32, pQueue: ptr VkQueue): void {.stdcall.}
  vkGetDeviceQueue2*: proc (device: VkDevice, pQueueInfo: ptr VkDeviceQueueInfo2, pQueue: ptr VkQueue): void {.stdcall.}
  vkGetDisplayModeProperties2KHR*: proc (physicalDevice: VkPhysicalDevice, display: VkDisplayKHR, pPropertyCount: ptr uint32, pProperties: ptr VkDisplayModeProperties2KHR): VkResult {.stdcall.}
  vkGetDisplayModePropertiesKHR*: proc (physicalDevice: VkPhysicalDevice, display: VkDisplayKHR, pPropertyCount: ptr uint32, pProperties: ptr VkDisplayModePropertiesKHR): VkResult {.stdcall.}
  vkGetDisplayPlaneCapabilities2KHR*: proc (physicalDevice: VkPhysicalDevice, pDisplayPlaneInfo: ptr VkDisplayPlaneInfo2KHR, pCapabilities: ptr VkDisplayPlaneCapabilities2KHR): VkResult {.stdcall.}
  vkGetDisplayPlaneCapabilitiesKHR*: proc (physicalDevice: VkPhysicalDevice, mode: VkDisplayModeKHR, planeIndex: uint32, pCapabilities: ptr VkDisplayPlaneCapabilitiesKHR): VkResult {.stdcall.}
  vkGetDisplayPlaneSupportedDisplaysKHR*: proc (physicalDevice: VkPhysicalDevice, planeIndex: uint32, pDisplayCount: ptr uint32, pDisplays: ptr VkDisplayKHR): VkResult {.stdcall.}
  vkGetEventStatus*: proc (device: VkDevice, event: VkEvent): VkResult {.stdcall.}
  vkGetFenceFdKHR*: proc (device: VkDevice, pGetFdInfo: ptr VkFenceGetFdInfoKHR, pFd: ptr cint): VkResult {.stdcall.}
  vkGetFenceStatus*: proc (device: VkDevice, fence: VkFence): VkResult {.stdcall.}
  vkGetFenceWin32HandleKHR*: proc (device: VkDevice, pGetWin32HandleInfo: ptr VkFenceGetWin32HandleInfoKHR, pHandle: ptr HANDLE): VkResult {.stdcall.}
  vkGetGeneratedCommandsMemoryRequirementsNV*: proc (device: VkDevice, pInfo: ptr VkGeneratedCommandsMemoryRequirementsInfoNV, pMemoryRequirements: ptr VkMemoryRequirements2): void {.stdcall.}
  vkGetImageDrmFormatModifierPropertiesEXT*: proc (device: VkDevice, image: VkImage, pProperties: ptr VkImageDrmFormatModifierPropertiesEXT): VkResult {.stdcall.}
  vkGetImageMemoryRequirements*: proc (device: VkDevice, image: VkImage, pMemoryRequirements: ptr VkMemoryRequirements): void {.stdcall.}
  vkGetImageMemoryRequirements2*: proc (device: VkDevice, pInfo: ptr VkImageMemoryRequirementsInfo2, pMemoryRequirements: ptr VkMemoryRequirements2): void {.stdcall.}
  vkGetImageMemoryRequirements2KHR*: proc (device: VkDevice, pInfo: ptr VkImageMemoryRequirementsInfo2, pMemoryRequirements: ptr VkMemoryRequirements2): void {.stdcall.}
  vkGetImageSparseMemoryRequirements*: proc (device: VkDevice, image: VkImage, pSparseMemoryRequirementCount: ptr uint32, pSparseMemoryRequirements: ptr VkSparseImageMemoryRequirements): void {.stdcall.}
  vkGetImageSparseMemoryRequirements2*: proc (device: VkDevice, pInfo: ptr VkImageSparseMemoryRequirementsInfo2, pSparseMemoryRequirementCount: ptr uint32, pSparseMemoryRequirements: ptr VkSparseImageMemoryRequirements2): void {.stdcall.}
  vkGetImageSparseMemoryRequirements2KHR*: proc (device: VkDevice, pInfo: ptr VkImageSparseMemoryRequirementsInfo2, pSparseMemoryRequirementCount: ptr uint32, pSparseMemoryRequirements: ptr VkSparseImageMemoryRequirements2): void {.stdcall.}
  vkGetImageSubresourceLayout*: proc (device: VkDevice, image: VkImage, pSubresource: ptr VkImageSubresource, pLayout: ptr VkSubresourceLayout): void {.stdcall.}
  vkGetImageViewAddressNVX*: proc (device: VkDevice, imageView: VkImageView, pProperties: ptr VkImageViewAddressPropertiesNVX): VkResult {.stdcall.}
  vkGetImageViewHandleNVX*: proc (device: VkDevice, pInfo: ptr VkImageViewHandleInfoNVX): uint32 {.stdcall.}
  vkGetInstanceProcAddr*: proc (instance: VkInstance, pName: cstring): PFN_vkVoidFunction {.stdcall.}
  vkGetMemoryAndroidHardwareBufferANDROID*: proc (device: VkDevice, pInfo: ptr VkMemoryGetAndroidHardwareBufferInfoANDROID, pBuffer: ptr ptr AHardwareBuffer): VkResult {.stdcall.}
  vkGetMemoryFdKHR*: proc (device: VkDevice, pGetFdInfo: ptr VkMemoryGetFdInfoKHR, pFd: ptr cint): VkResult {.stdcall.}
  vkGetMemoryFdPropertiesKHR*: proc (device: VkDevice, handleType: VkExternalMemoryHandleTypeFlagBits, fd: cint, pMemoryFdProperties: ptr VkMemoryFdPropertiesKHR): VkResult {.stdcall.}
  vkGetMemoryHostPointerPropertiesEXT*: proc (device: VkDevice, handleType: VkExternalMemoryHandleTypeFlagBits, pHostPointer: pointer, pMemoryHostPointerProperties: ptr VkMemoryHostPointerPropertiesEXT): VkResult {.stdcall.}
  vkGetMemoryWin32HandleKHR*: proc (device: VkDevice, pGetWin32HandleInfo: ptr VkMemoryGetWin32HandleInfoKHR, pHandle: ptr HANDLE): VkResult {.stdcall.}
  vkGetMemoryWin32HandleNV*: proc (device: VkDevice, memory: VkDeviceMemory, handleType: VkExternalMemoryHandleTypeFlagsNV, pHandle: ptr HANDLE): VkResult {.stdcall.}
  vkGetMemoryWin32HandlePropertiesKHR*: proc (device: VkDevice, handleType: VkExternalMemoryHandleTypeFlagBits, handle: HANDLE, pMemoryWin32HandleProperties: ptr VkMemoryWin32HandlePropertiesKHR): VkResult {.stdcall.}
  vkGetPastPresentationTimingGOOGLE*: proc (device: VkDevice, swapchain: VkSwapchainKHR, pPresentationTimingCount: ptr uint32, pPresentationTimings: ptr VkPastPresentationTimingGOOGLE): VkResult {.stdcall.}
  vkGetPerformanceParameterINTEL*: proc (device: VkDevice, parameter: VkPerformanceParameterTypeINTEL, pValue: ptr VkPerformanceValueINTEL): VkResult {.stdcall.}
  vkGetPhysicalDeviceCalibrateableTimeDomainsEXT*: proc (physicalDevice: VkPhysicalDevice, pTimeDomainCount: ptr uint32, pTimeDomains: ptr VkTimeDomainEXT): VkResult {.stdcall.}
  vkGetPhysicalDeviceCooperativeMatrixPropertiesNV*: proc (physicalDevice: VkPhysicalDevice, pPropertyCount: ptr uint32, pProperties: ptr VkCooperativeMatrixPropertiesNV): VkResult {.stdcall.}
  vkGetPhysicalDeviceDirectFBPresentationSupportEXT*: proc (physicalDevice: VkPhysicalDevice, queueFamilyIndex: uint32, dfb: ptr IDirectFB): VkBool32 {.stdcall.}
  vkGetPhysicalDeviceDisplayPlaneProperties2KHR*: proc (physicalDevice: VkPhysicalDevice, pPropertyCount: ptr uint32, pProperties: ptr VkDisplayPlaneProperties2KHR): VkResult {.stdcall.}
  vkGetPhysicalDeviceDisplayPlanePropertiesKHR*: proc (physicalDevice: VkPhysicalDevice, pPropertyCount: ptr uint32, pProperties: ptr VkDisplayPlanePropertiesKHR): VkResult {.stdcall.}
  vkGetPhysicalDeviceDisplayProperties2KHR*: proc (physicalDevice: VkPhysicalDevice, pPropertyCount: ptr uint32, pProperties: ptr VkDisplayProperties2KHR): VkResult {.stdcall.}
  vkGetPhysicalDeviceDisplayPropertiesKHR*: proc (physicalDevice: VkPhysicalDevice, pPropertyCount: ptr uint32, pProperties: ptr VkDisplayPropertiesKHR): VkResult {.stdcall.}
  vkGetPhysicalDeviceExternalBufferProperties*: proc (physicalDevice: VkPhysicalDevice, pExternalBufferInfo: ptr VkPhysicalDeviceExternalBufferInfo, pExternalBufferProperties: ptr VkExternalBufferProperties): void {.stdcall.}
  vkGetPhysicalDeviceExternalBufferPropertiesKHR*: proc (physicalDevice: VkPhysicalDevice, pExternalBufferInfo: ptr VkPhysicalDeviceExternalBufferInfo, pExternalBufferProperties: ptr VkExternalBufferProperties): void {.stdcall.}
  vkGetPhysicalDeviceExternalFenceProperties*: proc (physicalDevice: VkPhysicalDevice, pExternalFenceInfo: ptr VkPhysicalDeviceExternalFenceInfo, pExternalFenceProperties: ptr VkExternalFenceProperties): void {.stdcall.}
  vkGetPhysicalDeviceExternalFencePropertiesKHR*: proc (physicalDevice: VkPhysicalDevice, pExternalFenceInfo: ptr VkPhysicalDeviceExternalFenceInfo, pExternalFenceProperties: ptr VkExternalFenceProperties): void {.stdcall.}
  vkGetPhysicalDeviceExternalImageFormatPropertiesNV*: proc (physicalDevice: VkPhysicalDevice, format: VkFormat, `type`: VkImageType, tiling: VkImageTiling, usage: VkImageUsageFlags, flags: VkImageCreateFlags, externalHandleType: VkExternalMemoryHandleTypeFlagsNV, pExternalImageFormatProperties: ptr VkExternalImageFormatPropertiesNV): VkResult {.stdcall.}
  vkGetPhysicalDeviceExternalSemaphoreProperties*: proc (physicalDevice: VkPhysicalDevice, pExternalSemaphoreInfo: ptr VkPhysicalDeviceExternalSemaphoreInfo, pExternalSemaphoreProperties: ptr VkExternalSemaphoreProperties): void {.stdcall.}
  vkGetPhysicalDeviceExternalSemaphorePropertiesKHR*: proc (physicalDevice: VkPhysicalDevice, pExternalSemaphoreInfo: ptr VkPhysicalDeviceExternalSemaphoreInfo, pExternalSemaphoreProperties: ptr VkExternalSemaphoreProperties): void {.stdcall.}
  vkGetPhysicalDeviceFeatures*: proc (physicalDevice: VkPhysicalDevice, pFeatures: ptr VkPhysicalDeviceFeatures): void {.stdcall.}
  vkGetPhysicalDeviceFeatures2*: proc (physicalDevice: VkPhysicalDevice, pFeatures: ptr VkPhysicalDeviceFeatures2): void {.stdcall.}
  vkGetPhysicalDeviceFeatures2KHR*: proc (physicalDevice: VkPhysicalDevice, pFeatures: ptr VkPhysicalDeviceFeatures2): void {.stdcall.}
  vkGetPhysicalDeviceFormatProperties*: proc (physicalDevice: VkPhysicalDevice, format: VkFormat, pFormatProperties: ptr VkFormatProperties): void {.stdcall.}
  vkGetPhysicalDeviceFormatProperties2*: proc (physicalDevice: VkPhysicalDevice, format: VkFormat, pFormatProperties: ptr VkFormatProperties2): void {.stdcall.}
  vkGetPhysicalDeviceFormatProperties2KHR*: proc (physicalDevice: VkPhysicalDevice, format: VkFormat, pFormatProperties: ptr VkFormatProperties2): void {.stdcall.}
  vkGetPhysicalDeviceImageFormatProperties*: proc (physicalDevice: VkPhysicalDevice, format: VkFormat, `type`: VkImageType, tiling: VkImageTiling, usage: VkImageUsageFlags, flags: VkImageCreateFlags, pImageFormatProperties: ptr VkImageFormatProperties): VkResult {.stdcall.}
  vkGetPhysicalDeviceImageFormatProperties2*: proc (physicalDevice: VkPhysicalDevice, pImageFormatInfo: ptr VkPhysicalDeviceImageFormatInfo2, pImageFormatProperties: ptr VkImageFormatProperties2): VkResult {.stdcall.}
  vkGetPhysicalDeviceImageFormatProperties2KHR*: proc (physicalDevice: VkPhysicalDevice, pImageFormatInfo: ptr VkPhysicalDeviceImageFormatInfo2, pImageFormatProperties: ptr VkImageFormatProperties2): VkResult {.stdcall.}
  vkGetPhysicalDeviceMemoryProperties*: proc (physicalDevice: VkPhysicalDevice, pMemoryProperties: ptr VkPhysicalDeviceMemoryProperties): void {.stdcall.}
  vkGetPhysicalDeviceMemoryProperties2*: proc (physicalDevice: VkPhysicalDevice, pMemoryProperties: ptr VkPhysicalDeviceMemoryProperties2): void {.stdcall.}
  vkGetPhysicalDeviceMemoryProperties2KHR*: proc (physicalDevice: VkPhysicalDevice, pMemoryProperties: ptr VkPhysicalDeviceMemoryProperties2): void {.stdcall.}
  vkGetPhysicalDeviceMultisamplePropertiesEXT*: proc (physicalDevice: VkPhysicalDevice, samples: VkSampleCountFlagBits, pMultisampleProperties: ptr VkMultisamplePropertiesEXT): void {.stdcall.}
  vkGetPhysicalDevicePresentRectanglesKHR*: proc (physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pRectCount: ptr uint32, pRects: ptr VkRect2D): VkResult {.stdcall.}
  vkGetPhysicalDeviceProperties*: proc (physicalDevice: VkPhysicalDevice, pProperties: ptr VkPhysicalDeviceProperties): void {.stdcall.}
  vkGetPhysicalDeviceProperties2*: proc (physicalDevice: VkPhysicalDevice, pProperties: ptr VkPhysicalDeviceProperties2): void {.stdcall.}
  vkGetPhysicalDeviceProperties2KHR*: proc (physicalDevice: VkPhysicalDevice, pProperties: ptr VkPhysicalDeviceProperties2): void {.stdcall.}
  vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR*: proc (physicalDevice: VkPhysicalDevice, pPerformanceQueryCreateInfo: ptr VkQueryPoolPerformanceCreateInfoKHR, pNumPasses: ptr uint32): void {.stdcall.}
  vkGetPhysicalDeviceQueueFamilyProperties*: proc (physicalDevice: VkPhysicalDevice, pQueueFamilyPropertyCount: ptr uint32, pQueueFamilyProperties: ptr VkQueueFamilyProperties): void {.stdcall.}
  vkGetPhysicalDeviceQueueFamilyProperties2*: proc (physicalDevice: VkPhysicalDevice, pQueueFamilyPropertyCount: ptr uint32, pQueueFamilyProperties: ptr VkQueueFamilyProperties2): void {.stdcall.}
  vkGetPhysicalDeviceQueueFamilyProperties2KHR*: proc (physicalDevice: VkPhysicalDevice, pQueueFamilyPropertyCount: ptr uint32, pQueueFamilyProperties: ptr VkQueueFamilyProperties2): void {.stdcall.}
  vkGetPhysicalDeviceSparseImageFormatProperties*: proc (physicalDevice: VkPhysicalDevice, format: VkFormat, `type`: VkImageType, samples: VkSampleCountFlagBits, usage: VkImageUsageFlags, tiling: VkImageTiling, pPropertyCount: ptr uint32, pProperties: ptr VkSparseImageFormatProperties): void {.stdcall.}
  vkGetPhysicalDeviceSparseImageFormatProperties2*: proc (physicalDevice: VkPhysicalDevice, pFormatInfo: ptr VkPhysicalDeviceSparseImageFormatInfo2, pPropertyCount: ptr uint32, pProperties: ptr VkSparseImageFormatProperties2): void {.stdcall.}
  vkGetPhysicalDeviceSparseImageFormatProperties2KHR*: proc (physicalDevice: VkPhysicalDevice, pFormatInfo: ptr VkPhysicalDeviceSparseImageFormatInfo2, pPropertyCount: ptr uint32, pProperties: ptr VkSparseImageFormatProperties2): void {.stdcall.}
  vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV*: proc (physicalDevice: VkPhysicalDevice, pCombinationCount: ptr uint32, pCombinations: ptr VkFramebufferMixedSamplesCombinationNV): VkResult {.stdcall.}
  vkGetPhysicalDeviceSurfaceCapabilities2EXT*: proc (physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pSurfaceCapabilities: ptr VkSurfaceCapabilities2EXT): VkResult {.stdcall.}
  vkGetPhysicalDeviceSurfaceCapabilities2KHR*: proc (physicalDevice: VkPhysicalDevice, pSurfaceInfo: ptr VkPhysicalDeviceSurfaceInfo2KHR, pSurfaceCapabilities: ptr VkSurfaceCapabilities2KHR): VkResult {.stdcall.}
  vkGetPhysicalDeviceSurfaceCapabilitiesKHR*: proc (physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pSurfaceCapabilities: ptr VkSurfaceCapabilitiesKHR): VkResult {.stdcall.}
  vkGetPhysicalDeviceSurfaceFormats2KHR*: proc (physicalDevice: VkPhysicalDevice, pSurfaceInfo: ptr VkPhysicalDeviceSurfaceInfo2KHR, pSurfaceFormatCount: ptr uint32, pSurfaceFormats: ptr VkSurfaceFormat2KHR): VkResult {.stdcall.}
  vkGetPhysicalDeviceSurfaceFormatsKHR*: proc (physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pSurfaceFormatCount: ptr uint32, pSurfaceFormats: ptr VkSurfaceFormatKHR): VkResult {.stdcall.}
  vkGetPhysicalDeviceSurfacePresentModes2EXT*: proc (physicalDevice: VkPhysicalDevice, pSurfaceInfo: ptr VkPhysicalDeviceSurfaceInfo2KHR, pPresentModeCount: ptr uint32, pPresentModes: ptr VkPresentModeKHR): VkResult {.stdcall.}
  vkGetPhysicalDeviceSurfacePresentModesKHR*: proc (physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pPresentModeCount: ptr uint32, pPresentModes: ptr VkPresentModeKHR): VkResult {.stdcall.}
  vkGetPhysicalDeviceSurfaceSupportKHR*: proc (physicalDevice: VkPhysicalDevice, queueFamilyIndex: uint32, surface: VkSurfaceKHR, pSupported: ptr VkBool32): VkResult {.stdcall.}
  vkGetPhysicalDeviceToolPropertiesEXT*: proc (physicalDevice: VkPhysicalDevice, pToolCount: ptr uint32, pToolProperties: ptr VkPhysicalDeviceToolPropertiesEXT): VkResult {.stdcall.}
  vkGetPhysicalDeviceWaylandPresentationSupportKHR*: proc (physicalDevice: VkPhysicalDevice, queueFamilyIndex: uint32, display: ptr wl_display): VkBool32 {.stdcall.}
  vkGetPhysicalDeviceWin32PresentationSupportKHR*: proc (physicalDevice: VkPhysicalDevice, queueFamilyIndex: uint32): VkBool32 {.stdcall.}
  vkGetPhysicalDeviceXcbPresentationSupportKHR*: proc (physicalDevice: VkPhysicalDevice, queueFamilyIndex: uint32, connection: ptr xcb_connection_t, visual_id: xcb_visualid_t): VkBool32 {.stdcall.}
  vkGetPhysicalDeviceXlibPresentationSupportKHR*: proc (physicalDevice: VkPhysicalDevice, queueFamilyIndex: uint32, dpy: ptr Display, visualID: VisualID): VkBool32 {.stdcall.}
  vkGetPipelineCacheData*: proc (device: VkDevice, pipelineCache: VkPipelineCache, pDataSize: ptr uint, pData: pointer): VkResult {.stdcall.}
  vkGetPipelineExecutableInternalRepresentationsKHR*: proc (device: VkDevice, pExecutableInfo: ptr VkPipelineExecutableInfoKHR, pInternalRepresentationCount: ptr uint32, pInternalRepresentations: ptr VkPipelineExecutableInternalRepresentationKHR): VkResult {.stdcall.}
  vkGetPipelineExecutablePropertiesKHR*: proc (device: VkDevice, pPipelineInfo: ptr VkPipelineInfoKHR, pExecutableCount: ptr uint32, pProperties: ptr VkPipelineExecutablePropertiesKHR): VkResult {.stdcall.}
  vkGetPipelineExecutableStatisticsKHR*: proc (device: VkDevice, pExecutableInfo: ptr VkPipelineExecutableInfoKHR, pStatisticCount: ptr uint32, pStatistics: ptr VkPipelineExecutableStatisticKHR): VkResult {.stdcall.}
  vkGetPrivateDataEXT*: proc (device: VkDevice, objectType: VkObjectType, objectHandle: uint64, privateDataSlot: VkPrivateDataSlotEXT, pData: ptr uint64): void {.stdcall.}
  vkGetQueryPoolResults*: proc (device: VkDevice, queryPool: VkQueryPool, firstQuery: uint32, queryCount: uint32, dataSize: uint, pData: pointer, stride: VkDeviceSize, flags: VkQueryResultFlags): VkResult {.stdcall.}
  vkGetQueueCheckpointDataNV*: proc (queue: VkQueue, pCheckpointDataCount: ptr uint32, pCheckpointData: ptr VkCheckpointDataNV): void {.stdcall.}
  vkGetRandROutputDisplayEXT*: proc (physicalDevice: VkPhysicalDevice, dpy: ptr Display, rrOutput: RROutput, pDisplay: ptr VkDisplayKHR): VkResult {.stdcall.}
  vkGetRayTracingCaptureReplayShaderGroupHandlesKHR*: proc (device: VkDevice, pipeline: VkPipeline, firstGroup: uint32, groupCount: uint32, dataSize: uint, pData: pointer): VkResult {.stdcall.}
  vkGetRayTracingShaderGroupHandlesKHR*: proc (device: VkDevice, pipeline: VkPipeline, firstGroup: uint32, groupCount: uint32, dataSize: uint, pData: pointer): VkResult {.stdcall.}
  vkGetRayTracingShaderGroupHandlesNV*: proc (device: VkDevice, pipeline: VkPipeline, firstGroup: uint32, groupCount: uint32, dataSize: uint, pData: pointer): VkResult {.stdcall.}
  vkGetRefreshCycleDurationGOOGLE*: proc (device: VkDevice, swapchain: VkSwapchainKHR, pDisplayTimingProperties: ptr VkRefreshCycleDurationGOOGLE): VkResult {.stdcall.}
  vkGetRenderAreaGranularity*: proc (device: VkDevice, renderPass: VkRenderPass, pGranularity: ptr VkExtent2D): void {.stdcall.}
  vkGetSemaphoreCounterValue*: proc (device: VkDevice, semaphore: VkSemaphore, pValue: ptr uint64): VkResult {.stdcall.}
  vkGetSemaphoreCounterValueKHR*: proc (device: VkDevice, semaphore: VkSemaphore, pValue: ptr uint64): VkResult {.stdcall.}
  vkGetSemaphoreFdKHR*: proc (device: VkDevice, pGetFdInfo: ptr VkSemaphoreGetFdInfoKHR, pFd: ptr cint): VkResult {.stdcall.}
  vkGetSemaphoreWin32HandleKHR*: proc (device: VkDevice, pGetWin32HandleInfo: ptr VkSemaphoreGetWin32HandleInfoKHR, pHandle: ptr HANDLE): VkResult {.stdcall.}
  vkGetShaderInfoAMD*: proc (device: VkDevice, pipeline: VkPipeline, shaderStage: VkShaderStageFlagBits, infoType: VkShaderInfoTypeAMD, pInfoSize: ptr uint, pInfo: pointer): VkResult {.stdcall.}
  vkGetSwapchainCounterEXT*: proc (device: VkDevice, swapchain: VkSwapchainKHR, counter: VkSurfaceCounterFlagBitsEXT, pCounterValue: ptr uint64): VkResult {.stdcall.}
  vkGetSwapchainImagesKHR*: proc (device: VkDevice, swapchain: VkSwapchainKHR, pSwapchainImageCount: ptr uint32, pSwapchainImages: ptr VkImage): VkResult {.stdcall.}
  vkGetSwapchainStatusKHR*: proc (device: VkDevice, swapchain: VkSwapchainKHR): VkResult {.stdcall.}
  vkGetValidationCacheDataEXT*: proc (device: VkDevice, validationCache: VkValidationCacheEXT, pDataSize: ptr uint, pData: pointer): VkResult {.stdcall.}
  vkImportFenceFdKHR*: proc (device: VkDevice, pImportFenceFdInfo: ptr VkImportFenceFdInfoKHR): VkResult {.stdcall.}
  vkImportFenceWin32HandleKHR*: proc (device: VkDevice, pImportFenceWin32HandleInfo: ptr VkImportFenceWin32HandleInfoKHR): VkResult {.stdcall.}
  vkImportSemaphoreFdKHR*: proc (device: VkDevice, pImportSemaphoreFdInfo: ptr VkImportSemaphoreFdInfoKHR): VkResult {.stdcall.}
  vkImportSemaphoreWin32HandleKHR*: proc (device: VkDevice, pImportSemaphoreWin32HandleInfo: ptr VkImportSemaphoreWin32HandleInfoKHR): VkResult {.stdcall.}
  vkInitializePerformanceApiINTEL*: proc (device: VkDevice, pInitializeInfo: ptr VkInitializePerformanceApiInfoINTEL): VkResult {.stdcall.}
  vkInvalidateMappedMemoryRanges*: proc (device: VkDevice, memoryRangeCount: uint32, pMemoryRanges: ptr VkMappedMemoryRange): VkResult {.stdcall.}
  vkMapMemory*: proc (device: VkDevice, memory: VkDeviceMemory, offset: VkDeviceSize, size: VkDeviceSize, flags: VkMemoryMapFlags, ppData: pointer): VkResult {.stdcall.}
  vkMergePipelineCaches*: proc (device: VkDevice, dstCache: VkPipelineCache, srcCacheCount: uint32, pSrcCaches: ptr VkPipelineCache): VkResult {.stdcall.}
  vkMergeValidationCachesEXT*: proc (device: VkDevice, dstCache: VkValidationCacheEXT, srcCacheCount: uint32, pSrcCaches: ptr VkValidationCacheEXT): VkResult {.stdcall.}
  vkQueueBeginDebugUtilsLabelEXT*: proc (queue: VkQueue, pLabelInfo: ptr VkDebugUtilsLabelEXT): void {.stdcall.}
  vkQueueBindSparse*: proc (queue: VkQueue, bindInfoCount: uint32, pBindInfo: ptr VkBindSparseInfo, fence: VkFence): VkResult {.stdcall.}
  vkQueueEndDebugUtilsLabelEXT*: proc (queue: VkQueue): void {.stdcall.}
  vkQueueInsertDebugUtilsLabelEXT*: proc (queue: VkQueue, pLabelInfo: ptr VkDebugUtilsLabelEXT): void {.stdcall.}
  vkQueuePresentKHR*: proc (queue: VkQueue, pPresentInfo: ptr VkPresentInfoKHR): VkResult {.stdcall.}
  vkQueueSetPerformanceConfigurationINTEL*: proc (queue: VkQueue, configuration: VkPerformanceConfigurationINTEL): VkResult {.stdcall.}
  vkQueueSubmit*: proc (queue: VkQueue, submitCount: uint32, pSubmits: ptr VkSubmitInfo, fence: VkFence): VkResult {.stdcall.}
  vkQueueWaitIdle*: proc (queue: VkQueue): VkResult {.stdcall.}
  vkRegisterDeviceEventEXT*: proc (device: VkDevice, pDeviceEventInfo: ptr VkDeviceEventInfoEXT, pAllocator: ptr VkAllocationCallbacks, pFence: ptr VkFence): VkResult {.stdcall.}
  vkRegisterDisplayEventEXT*: proc (device: VkDevice, display: VkDisplayKHR, pDisplayEventInfo: ptr VkDisplayEventInfoEXT, pAllocator: ptr VkAllocationCallbacks, pFence: ptr VkFence): VkResult {.stdcall.}
  vkReleaseDisplayEXT*: proc (physicalDevice: VkPhysicalDevice, display: VkDisplayKHR): VkResult {.stdcall.}
  vkReleaseFullScreenExclusiveModeEXT*: proc (device: VkDevice, swapchain: VkSwapchainKHR): VkResult {.stdcall.}
  vkReleasePerformanceConfigurationINTEL*: proc (device: VkDevice, configuration: VkPerformanceConfigurationINTEL): VkResult {.stdcall.}
  vkReleaseProfilingLockKHR*: proc (device: VkDevice): void {.stdcall.}
  vkResetCommandBuffer*: proc (commandBuffer: VkCommandBuffer, flags: VkCommandBufferResetFlags): VkResult {.stdcall.}
  vkResetCommandPool*: proc (device: VkDevice, commandPool: VkCommandPool, flags: VkCommandPoolResetFlags): VkResult {.stdcall.}
  vkResetDescriptorPool*: proc (device: VkDevice, descriptorPool: VkDescriptorPool, flags: VkDescriptorPoolResetFlags): VkResult {.stdcall.}
  vkResetEvent*: proc (device: VkDevice, event: VkEvent): VkResult {.stdcall.}
  vkResetFences*: proc (device: VkDevice, fenceCount: uint32, pFences: ptr VkFence): VkResult {.stdcall.}
  vkResetQueryPool*: proc (device: VkDevice, queryPool: VkQueryPool, firstQuery: uint32, queryCount: uint32): void {.stdcall.}
  vkResetQueryPoolEXT*: proc (device: VkDevice, queryPool: VkQueryPool, firstQuery: uint32, queryCount: uint32): void {.stdcall.}
  vkSetDebugUtilsObjectNameEXT*: proc (device: VkDevice, pNameInfo: ptr VkDebugUtilsObjectNameInfoEXT): VkResult {.stdcall.}
  vkSetDebugUtilsObjectTagEXT*: proc (device: VkDevice, pTagInfo: ptr VkDebugUtilsObjectTagInfoEXT): VkResult {.stdcall.}
  vkSetEvent*: proc (device: VkDevice, event: VkEvent): VkResult {.stdcall.}
  vkSetHdrMetadataEXT*: proc (device: VkDevice, swapchainCount: uint32, pSwapchains: ptr VkSwapchainKHR, pMetadata: ptr VkHdrMetadataEXT): void {.stdcall.}
  vkSetLocalDimmingAMD*: proc (device: VkDevice, swapChain: VkSwapchainKHR, localDimmingEnable: VkBool32): void {.stdcall.}
  vkSetPrivateDataEXT*: proc (device: VkDevice, objectType: VkObjectType, objectHandle: uint64, privateDataSlot: VkPrivateDataSlotEXT, data: uint64): VkResult {.stdcall.}
  vkSignalSemaphore*: proc (device: VkDevice, pSignalInfo: ptr VkSemaphoreSignalInfo): VkResult {.stdcall.}
  vkSignalSemaphoreKHR*: proc (device: VkDevice, pSignalInfo: ptr VkSemaphoreSignalInfo): VkResult {.stdcall.}
  vkSubmitDebugUtilsMessageEXT*: proc (instance: VkInstance, messageSeverity: VkDebugUtilsMessageSeverityFlagBitsEXT, messageTypes: VkDebugUtilsMessageTypeFlagsEXT, pCallbackData: ptr VkDebugUtilsMessengerCallbackDataEXT): void {.stdcall.}
  vkTrimCommandPool*: proc (device: VkDevice, commandPool: VkCommandPool, flags: VkCommandPoolTrimFlags): void {.stdcall.}
  vkTrimCommandPoolKHR*: proc (device: VkDevice, commandPool: VkCommandPool, flags: VkCommandPoolTrimFlags): void {.stdcall.}
  vkUninitializePerformanceApiINTEL*: proc (device: VkDevice): void {.stdcall.}
  vkUnmapMemory*: proc (device: VkDevice, memory: VkDeviceMemory): void {.stdcall.}
  vkUpdateDescriptorSetWithTemplate*: proc (device: VkDevice, descriptorSet: VkDescriptorSet, descriptorUpdateTemplate: VkDescriptorUpdateTemplate, pData: pointer): void {.stdcall.}
  vkUpdateDescriptorSetWithTemplateKHR*: proc (device: VkDevice, descriptorSet: VkDescriptorSet, descriptorUpdateTemplate: VkDescriptorUpdateTemplate, pData: pointer): void {.stdcall.}
  vkUpdateDescriptorSets*: proc (device: VkDevice, descriptorWriteCount: uint32, pDescriptorWrites: ptr VkWriteDescriptorSet, descriptorCopyCount: uint32, pDescriptorCopies: ptr VkCopyDescriptorSet): void {.stdcall.}
  vkWaitForFences*: proc (device: VkDevice, fenceCount: uint32, pFences: ptr VkFence, waitAll: VkBool32, timeout: uint64): VkResult {.stdcall.}
  vkWaitSemaphores*: proc (device: VkDevice, pWaitInfo: ptr VkSemaphoreWaitInfo, timeout: uint64): VkResult {.stdcall.}
  vkWaitSemaphoresKHR*: proc (device: VkDevice, pWaitInfo: ptr VkSemaphoreWaitInfo, timeout: uint64): VkResult {.stdcall.}
  vkWriteAccelerationStructuresPropertiesKHR*: proc (device: VkDevice, accelerationStructureCount: uint32, pAccelerationStructures: ptr VkAccelerationStructureKHR, queryType: VkQueryType, dataSize: uint, pData: pointer, stride: uint): VkResult {.stdcall.}
